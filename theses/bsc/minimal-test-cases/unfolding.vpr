// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int
field next: Ref

predicate valid(r: Ref) {
    acc(r.f, write) && acc(r.next, write) && ((r.next != null) ==> (acc(valid(r.next), write)))
}

method t1(r: Ref)
    requires acc(valid(r), write)
{
    var i: Int := unfolding acc(valid(r), write) in (r.f)
}

method t2(r: Ref)
    requires r != null
{
    //:: ExpectedOutput(assignment.failed:insufficient.permission)
    var i: Int := unfolding acc(valid(r), write) in (r.f)
}

method t3(r: Ref)
    requires acc(valid(r), write)
{
    //:: ExpectedOutput(assignment.failed:insufficient.permission)
    var i: Int := (unfolding acc(valid(r), write) in (unfolding acc(valid(r), write) in (r.f)))
}


predicate deeper(r:Ref) {
     acc(r.f)
  && acc(r.next)
  && ((r.next != null) ==> acc(deeper(r.next)) && (unfolding deeper(r.next) in true))
}


method t4(r: Ref)
    requires acc(deeper(r))
{
    // note: this fails because the unfolding inside the predicate body is only evaluated in a temporary state - this doesn't grant extra permissions in the unfoldee's state. But perhaps it should.
    //:: ExpectedOutput(assignment.failed:insufficient.permission)
    var i: Int := unfolding acc(deeper(r), write) in ((r.next == null) ? 0 : r.next.f)
}

method t5(r: Ref)
    requires acc(deeper(r))
{
    var i: Int := unfolding acc(deeper(r), write) in ((r.next == null) ? 0 : (unfolding deeper(r.next) in r.next.f))
}

method t6(r: Ref)
    requires acc(deeper(r))
{
    //:: ExpectedOutput(assignment.failed:insufficient.permission)
    var i: Int := unfolding acc(deeper(r), write) in ((r.next == null) ? 0 : ((r.next.next == null) ? 0 : r.next.next.f))
}

/* This was originally a mistake: it is a version of the "deeper" predicate which
 * contains itself. A verifier may be able to find out that an instance of this
 * predicate cannot be held ...
 */
predicate strange(r:Ref) {
     acc(r.f)
  && acc(r.next)
  && (r.next != null
        ==>
     acc(r.next.f) && acc(r.next.next) && acc(strange(r)) && unfolding strange(r) in true)
}

method t7(r: Ref)
    requires acc(strange(r))
{
   //:: ExpectedOutput(assert.failed:assertion.false)
   assert false
}

method t8(r: Ref)
    requires acc(strange(r))
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert unfolding strange(r) in false
}

method t9(r:Ref)
    requires acc(strange(r))
{
  unfold strange(r)

  assert r.next == null // because otherwise, the predicate instance would be infinite..
}

method t10(r:Ref, i:Int) // test unfolding in loop invariant
  requires acc(valid(r))
  ensures acc(valid(r)) && unfolding valid(r) in (r.f > 2)
{
  var j : Int := i
  unfold valid(r)
  r.f := 3
  fold valid(r)
  while(j > 0)
    invariant acc(valid(r)) && unfolding valid(r) in (r.f > 2)
  {
    j := j - 1
    unfold valid(r)
    r.f := r.f + 1
    fold valid(r)
  }
}

method t11(r:Ref)
  requires acc(valid(r))
  ensures acc(r.f) && r.f > 2
{
  t10(r,0)
  unfold valid(r)
}

predicate deeperfalse(r:Ref) {
  acc(r.next) && r.next != null && acc(valid(r.next)) && (unfolding valid(r.next) in false)
}

method t12(r:Ref)
  requires acc(deeperfalse(r)) && unfolding deeperfalse(r) in true
  ensures false
{
}

method t13(r:Ref)
  requires acc(deeperfalse(r))
  ensures false
{
  t12(r)
}

