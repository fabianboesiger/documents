method test(x: Int) {
    var y: Int := 0
    if (x == 0) {
        y := 1
    } else {
    	y := 2
    }
    assert x == 0 ==> y == 1
}

/*
[info] EXECUTE 2:8: var y: Int
[info] Store: (x -> x@1@16),
[info] Heap: (),
[info] OHs: (old: ()),
[info] PCs: ()
[info] )
[info] EXECUTE 2:8: y := 0
[info] Store: (x -> x@1@16, y -> y@2@16),
[info] Heap: (),
[info] OHs: (old: ()),
[info] PCs: ()
[info] )
[info] EVAL 3:10: x == 0
[info] Store: (x -> x@1@16, y -> 0),
[info] Heap: (),
[info] OHs: (old: ()),
[info] PCs: ()
[info] )
[info] EXECUTE 4:10: y := 1
[info] Store: (x -> x@1@16, y -> 0),
[info] Heap: (),
[info] OHs: (old: ()),
[info] PCs: (x@1@16 == 0)
[info] )
[info] EXECUTE 8:11: assert x == 0 ==> y == 1
[info] Store: (x -> x@1@16, y -> 1),
[info] Heap: (),
[info] OHs: (old: ()),
[info] PCs: (x@1@16 == 0)
[info] )
[info] CONSUME 8:13: x == 0 ==> y == 1
[info] Store: (x -> x@1@16, y -> 1),
[info] Heap: (),
[info] OHs: (old: ()),
[info] PCs: (x@1@16 == 0)
[info] )
[info] h = ()
[info] EVAL 8:13: x == 0 ==> y == 1
[info] Store: (x -> x@1@16, y -> 1),
[info] Heap: (),
[info] OHs: (old: ()),
[info] PCs: (x@1@16 == 0)
[info] )
[info] EVAL 8:13: x == 0
[info] Store: (x -> x@1@16, y -> 1),
[info] Heap: (),
[info] OHs: (old: ()),
[info] PCs: (x@1@16 == 0)
[info] )
[info] EVAL 8:24: y == 1
[info] Store: (x -> x@1@16, y -> 1),
[info] Heap: (),
[info] OHs: (old: ()),
[info] PCs: (x@1@16 == 0)
[info] )
[info] EVAL 3:10: !(x == 0)
[info] Store: (x -> x@1@16, y -> 0),
[info] Heap: (),
[info] OHs: (old: ()),
[info] PCs: ()
[info] )
[info] EVAL 3:10: x == 0
[info] Store: (x -> x@1@16, y -> 0),
[info] Heap: (),
[info] OHs: (old: ()),
[info] PCs: ()
[info] )
[info] EXECUTE 6:7: y := 2
[info] Store: (x -> x@1@16, y -> 0),
[info] Heap: (),
[info] OHs: (old: ()),
[info] PCs: (x@1@16 != 0)
[info] )
[info] EXECUTE 8:11: assert x == 0 ==> y == 1
[info] Store: (x -> x@1@16, y -> 2),
[info] Heap: (),
[info] OHs: (old: ()),
[info] PCs: (x@1@16 != 0)
[info] )
[info] CONSUME 8:13: x == 0 ==> y == 1
[info] Store: (x -> x@1@16, y -> 2),
[info] Heap: (),
[info] OHs: (old: ()),
[info] PCs: (x@1@16 != 0)
[info] )
[info] h = ()
[info] EVAL 8:13: x == 0 ==> y == 1
[info] Store: (x -> x@1@16, y -> 2),
[info] Heap: (),
[info] OHs: (old: ()),
[info] PCs: (x@1@16 != 0)
[info] )
[info] EVAL 8:13: x == 0
[info] Store: (x -> x@1@16, y -> 2),
[info] Heap: (),
[info] OHs: (old: ()),
[info] PCs: (x@1@16 != 0)
[info] )

*/
