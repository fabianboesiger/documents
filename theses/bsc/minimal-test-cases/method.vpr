// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

function fun1(j: Int): Int { 10 }

predicate P(x: Ref, b: Bool) { b ==> acc(x.f) }


method test02(x: Ref, b: Bool) {
  inhale P(x, b)

  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/114/)
  assert forall j: Int :: {fun1(j)} unfolding P(x, b) in fun1(j) > 0
}


method test03(x: Ref, b: Bool) {
  assert forall j: Int :: {fun1(j)} b ? fun1(j) > 0 : fun1(j) > 1
}


function fun2(b: Bool, x: Ref, y: Ref, j: Int): Int
  requires b ? acc(x.f) : acc(y.f)
{ 10 }

method test04(x: Ref, y: Ref, b: Bool) {
  inhale acc(x.f) && acc(y.f)

  assert forall j: Int :: {fun2(b, x, y, j)} fun2(b, x, y, j) > 0
}


domain D {
  function fun3(i: Int): Bool
}

method test05(x: Ref, y: Ref, b: Bool) {
  inhale acc(x.f) && acc(y.f)

  inhale forall j: Int :: {fun2(b, x, y, j)} 0 < j && j < 10 ==> fun3(j)
  inhale fun2(b, x, y, 5) > 0

  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/114/)
  assert fun3(5)
}


method test01(x: Ref, b: Bool, c: Bool)
  requires acc(P(x, c))
{
  assert forall j: Int :: fun1(j) > 0
  assert forall j: Int :: false ? true : fun1(j) > 0
  assert forall j: Int :: b ? fun1(j) > 5 : fun1(j) > 0

  assert forall j: Int :: true ==> fun1(j) > 0
  assert forall j: Int :: b ==> fun1(j) > 0

  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/114/)
  assert forall j: Int :: unfolding acc(P(x, c)) in fun1(j) > 0

  //:: MissingOutput(assert.failed:assertion.false, /silicon/issue/34/)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
