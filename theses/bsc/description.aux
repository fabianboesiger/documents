\relax 
\@writefile{toc}{\boolfalse {citerequest}\boolfalse {citetracker}\boolfalse {pagetracker}\boolfalse {backtracker}\relax }
\@writefile{lof}{\boolfalse {citerequest}\boolfalse {citetracker}\boolfalse {pagetracker}\boolfalse {backtracker}\relax }
\@writefile{lot}{\boolfalse {citerequest}\boolfalse {citetracker}\boolfalse {pagetracker}\boolfalse {backtracker}\relax }
\abx@aux@refcontext{none/global//global/global}
\abx@aux@cite{viper}
\abx@aux@segm{0}{0}{viper}
\abx@aux@cite{silicon}
\abx@aux@segm{0}{0}{silicon}
\abx@aux@cite{silicon}
\abx@aux@segm{0}{0}{silicon}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}{}\protected@file@percent }
\newlabel{introduction}{{1}{1}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {2}Background}{1}{}\protected@file@percent }
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Viper and Silicon}{1}{}\protected@file@percent }
\newlabel{background:viper}{{2.1}{1}}
\abx@aux@cite{intellij}
\abx@aux@segm{0}{0}{intellij}
\@writefile{lol}{\defcounter {refsection}{0}\relax }\@writefile{lol}{\contentsline {lstlisting}{\numberline {1}Example of multiple subtree (``term'') equality checks occuring during the execution of Silicon.}{2}{}\protected@file@percent }
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Scala and IntelliJ}{2}{}\protected@file@percent }
\newlabel{background:scala}{{2.2}{2}}
\abx@aux@cite{patterns}
\abx@aux@segm{0}{0}{patterns}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {3}Approach}{3}{}\protected@file@percent }
\newlabel{approach}{{3}{3}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Implementation of Flyweight ASTs}{3}{}\protected@file@percent }
\newlabel{approach:flyweight}{{3.1}{3}}
\@writefile{lol}{\defcounter {refsection}{0}\relax }\@writefile{lol}{\contentsline {lstlisting}{\numberline {2}Simplification of how term instances currently are implemented. Because \texttt  {Plus} is defined as a case class, the compiler automatically generates code for recursive structural equality checking.}{3}{}\protected@file@percent }
\@writefile{lol}{\defcounter {refsection}{0}\relax }\@writefile{lol}{\contentsline {lstlisting}{\numberline {3}Avoid instantiating multiple structurally equal terms using the flyweight pattern.}{3}{}\protected@file@percent }
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Automate Boilerplate Generation using Macros}{4}{}\protected@file@percent }
\newlabel{approach:macros}{{3.2}{4}}
\@writefile{lol}{\defcounter {refsection}{0}\relax }\@writefile{lol}{\contentsline {lstlisting}{\numberline {4}One possible way to use macro annotations to automatically generate code in listing 3.}{5}{}\protected@file@percent }
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {4}Goals}{5}{}\protected@file@percent }
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Core Goals}{5}{}\protected@file@percent }
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Extension Goals}{5}{}\protected@file@percent }
\abx@aux@refcontextdefaultsdone
\abx@aux@defaultrefcontext{0}{viper}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{silicon}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{intellij}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{patterns}{none/global//global/global}
\gdef \@abspage@last{7}
