domain Map[U, V] {
  
  function Map_keys(m: Map[U, V]): Set[U]
  
  function Map_card(m: Map[U, V]): Int
  
  function Map_lookup(m: Map[U, V], u: U): V
  
  function Map_values(m: Map[U, V]): Set[V]
  
  function Map_empty(): Map[U, V]
  
  function Map_build(m: Map[U, V], u: U, v: V): Map[U, V]
  
  function Map_equal(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_disjoint(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_union(m1: Map[U, V], m2: Map[U, V]): Map[U, V]
  
  axiom Map_card_non_neg {
    (forall m: Map[U, V] :: { Map_card(m) } 0 <= Map_card(m))
  }
  
  axiom Map_card_domain {
    (forall m: Map[U, V] :: { |Map_keys(m)| } |Map_keys(m)| == Map_card(m))
  }
  
  axiom Map_values_def {
    (forall m: Map[U, V], v: V :: { (v in Map_values(m)) } (v in Map_values(m)) == (exists u: U :: (u in Map_keys(m)) && v == Map_lookup(m, u)))
  }
  
  axiom Map_empty_1 {
    (forall u: U :: { (u in Map_keys(Map_empty())) } !((u in Map_keys(Map_empty()))))
  }
  
  axiom Map_empty_2 {
    (forall m: Map[U, V] :: { Map_card(m) } (Map_card(m) == 0) == (m == Map_empty()) && (Map_card(m) != 0 ==> (exists u: U :: (u in Map_keys(m)))))
  }
  
  axiom Map_build_1 {
    (forall m: Map[U, V], u1: U, u2: U, v: V :: { (u2 in Map_keys(Map_build(m, u1, v))) } (u2 == u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) && Map_lookup(Map_build(m, u1, v), u1) == v) && (u2 != u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) == (u2 in Map_keys(m)) && Map_lookup(Map_build(m, u1, v), u2) == Map_lookup(m, u2)))
  }
  
  axiom Map_build_2 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } (u in Map_keys(m)) ==> Map_card(Map_build(m, u, v)) == Map_card(m))
  }
  
  axiom Map_build_3 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } !((u in Map_keys(m))) ==> Map_card(Map_build(m, u, v)) == Map_card(m) + 1)
  }
  
  axiom Map_equality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } (u in Map_keys(m1)) == (u in Map_keys(m2))))
  }
  
  axiom Map_extensionality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) ==> m1 == m2)
  }
  
  axiom Map_disjoint_def {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_disjoint(m1, m2) } Map_disjoint(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } !((u in Map_keys(m1))) || !((u in Map_keys(m2)))))
  }
  
  axiom Map_union_1 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { (u in Map_keys(Map_union(m1, m2))) } { (u in (Map_keys(m1) union Map_keys(m2))) } Map_disjoint(m1, m2) ==> (u in Map_keys(Map_union(m1, m2))) == (u in (Map_keys(m1) union Map_keys(m2))))
  }
  
  axiom Map_union_2 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m1)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m1, u))
  }
  
  axiom Map_union_3 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m2)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m2, u))
  }
}

domain trigger_functions {
  
  function Counter1_state_T(r: Ref, lvl: Int, x: Ref): Bool
  
  function Counter2_state_T(r: Ref, lvl: Int, x: Ref): Bool
  
  function Counter3_state_T(r: Ref, lvl: Int, x: Ref): Bool
  
  function Counter4_state_T(r: Ref, lvl: Int, x: Ref): Bool
}

domain interferenceReference_Domain {
  
  function Counter1_interferenceReference_df($p0: Int, r: Ref, lvl: Int, x: Ref): Bool
  
  function Counter2_interferenceReference_df($p0: Int, r: Ref, lvl: Int, x: Ref): Bool
  
  function Counter3_interferenceReference_df($p0: Int, r: Ref, lvl: Int, x: Ref): Bool
  
  function Counter4_interferenceReference_df($p0: Int, r: Ref, lvl: Int, x: Ref): Bool
}

domain interferenceSet_Domain {
  
  function Counter1_interferenceSet_df($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
  
  function Counter2_interferenceSet_df($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
  
  function Counter3_interferenceSet_df($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
  
  function Counter4_interferenceSet_df($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
}

domain atomicity_context_Domain {
  
  function Counter1_atomicity_context_df(r: Ref, lvl: Int, x: Ref): Bool
  
  function Counter2_atomicity_context_df(r: Ref, lvl: Int, x: Ref): Bool
  
  function Counter3_atomicity_context_df(r: Ref, lvl: Int, x: Ref): Bool
  
  function Counter4_atomicity_context_df(r: Ref, lvl: Int, x: Ref): Bool
}

field $diamond: Int

field $stepFrom_int: Int

field $stepTo_int: Int

field $memcell_$f: Int

function IntSet(): Set[Int]
  ensures (forall n: Int :: (n in result))


function NatSet(): Set[Int]
  ensures (forall n: Int :: 0 <= n == (n in result))


function Counter1_atomicity_context_hf(r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Counter1_atomicity_context_fp(r, lvl, x), write)
  ensures [Counter1_atomicity_context_df(r, lvl, x), true]


function Counter1_interferenceSet_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Counter1_interferenceContext_fp(r, lvl, x), write)
  ensures [(forall $_m: Int :: { ($_m in result) } ($_m in result) ==> ($_m in Counter1_interferenceSet_df($p0, r, lvl, x))), true]


function Counter1_interferenceReference_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter1_interferenceContext_fp(r, lvl, x), write)
  ensures [Counter1_interferenceReference_df($p0, r, lvl, x), true]


function Counter1_sk_$_action_n(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter1_sk_fp(), write)


function Counter1_sk_$_action_m(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter1_sk_fp(), write)


function Counter1_state(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter1(r, lvl, x), write)
  ensures [Counter1_state_T(r, lvl, x), true]
{
  (unfolding acc(Counter1(r, lvl, x), write) in x.$memcell_$f)
}

function Counter2_atomicity_context_hf(r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Counter2_atomicity_context_fp(r, lvl, x), write)
  ensures [Counter2_atomicity_context_df(r, lvl, x), true]


function Counter2_interferenceSet_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Counter2_interferenceContext_fp(r, lvl, x), write)
  ensures [(forall $_m: Int :: { ($_m in result) } ($_m in result) ==> ($_m in Counter2_interferenceSet_df($p0, r, lvl, x))), true]


function Counter2_interferenceReference_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter2_interferenceContext_fp(r, lvl, x), write)
  ensures [Counter2_interferenceReference_df($p0, r, lvl, x), true]


function Counter2_sk_$_action_n(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter2_sk_fp(), write)


function Counter2_sk_$_action_m(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter2_sk_fp(), write)


function Counter2_state(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter2(r, lvl, x), write)
  ensures [Counter2_state_T(r, lvl, x), true]
{
  (unfolding acc(Counter2(r, lvl, x), write) in x.$memcell_$f)
}

function Counter3_atomicity_context_hf(r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Counter3_atomicity_context_fp(r, lvl, x), write)
  ensures [Counter3_atomicity_context_df(r, lvl, x), true]


function Counter3_interferenceSet_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Counter3_interferenceContext_fp(r, lvl, x), write)
  ensures [(forall $_m: Int :: { ($_m in result) } ($_m in result) ==> ($_m in Counter3_interferenceSet_df($p0, r, lvl, x))), true]


function Counter3_interferenceReference_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter3_interferenceContext_fp(r, lvl, x), write)
  ensures [Counter3_interferenceReference_df($p0, r, lvl, x), true]


function Counter3_sk_$_action_n(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter3_sk_fp(), write)


function Counter3_sk_$_action_m(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter3_sk_fp(), write)


function Counter3_state(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter3(r, lvl, x), write)
  ensures [Counter3_state_T(r, lvl, x), true]
{
  (unfolding acc(Counter3(r, lvl, x), write) in x.$memcell_$f)
}

function Counter4_atomicity_context_hf(r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Counter4_atomicity_context_fp(r, lvl, x), write)
  ensures [Counter4_atomicity_context_df(r, lvl, x), true]


function Counter4_interferenceSet_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Counter4_interferenceContext_fp(r, lvl, x), write)
  ensures [(forall $_m: Int :: { ($_m in result) } ($_m in result) ==> ($_m in Counter4_interferenceSet_df($p0, r, lvl, x))), true]


function Counter4_interferenceReference_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter4_interferenceContext_fp(r, lvl, x), write)
  ensures [Counter4_interferenceReference_df($p0, r, lvl, x), true]


function Counter4_sk_$_action_n(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter4_sk_fp(), write)


function Counter4_sk_$_action_m(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter4_sk_fp(), write)


function Counter4_state(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter4(r, lvl, x), write)
  ensures [Counter4_state_T(r, lvl, x), true]
{
  (unfolding acc(Counter4(r, lvl, x), write) in x.$memcell_$f)
}

predicate Counter1_INCREMENT1($r: Ref) 

predicate Counter1_atomicity_context_fp(r: Ref, lvl: Int, x: Ref) 

predicate Counter1_interferenceContext_fp(r: Ref, lvl: Int, x: Ref) 

predicate Counter1_sk_fp() 

predicate Counter1(r: Ref, lvl: Int, x: Ref) {
  acc(x.$memcell_$f, write) && true
}

predicate Counter2_INCREMENT2($r: Ref) 

predicate Counter2_atomicity_context_fp(r: Ref, lvl: Int, x: Ref) 

predicate Counter2_interferenceContext_fp(r: Ref, lvl: Int, x: Ref) 

predicate Counter2_sk_fp() 

predicate Counter2(r: Ref, lvl: Int, x: Ref) {
  acc(x.$memcell_$f, write) && true
}

predicate Counter3_INCREMENT3($r: Ref) 

predicate Counter3_atomicity_context_fp(r: Ref, lvl: Int, x: Ref) 

predicate Counter3_interferenceContext_fp(r: Ref, lvl: Int, x: Ref) 

predicate Counter3_sk_fp() 

predicate Counter3(r: Ref, lvl: Int, x: Ref) {
  acc(x.$memcell_$f, write) && true
}

predicate Counter4_INCREMENT4($r: Ref) 

predicate Counter4_atomicity_context_fp(r: Ref, lvl: Int, x: Ref) 

predicate Counter4_interferenceContext_fp(r: Ref, lvl: Int, x: Ref) 

predicate Counter4_sk_fp() 

predicate Counter4(r: Ref, lvl: Int, x: Ref) {
  acc(x.$memcell_$f, write) && true
}

method havoc_Bool() returns ($r: Bool)


method havoc_Int() returns ($r: Int)


method havoc_Ref() returns ($r: Ref)


method ___silicon_hack407_havoc_all_Counter1()


method ___silicon_hack407_havoc_all_Counter1_interferenceContext_fp()


method ___silicon_hack407_havoc_all_Counter2()


method ___silicon_hack407_havoc_all_Counter2_interferenceContext_fp()


method ___silicon_hack407_havoc_all_Counter3()


method ___silicon_hack407_havoc_all_Counter3_interferenceContext_fp()


method ___silicon_hack407_havoc_all_Counter4()


method ___silicon_hack407_havoc_all_Counter4_interferenceContext_fp()


method $_Counter1_interpretation_stability_check(r: Ref, lvl: Int, x: Ref)
{
  inhale acc(Counter1_sk_fp(), write) && acc(Counter2_sk_fp(), write) && acc(Counter3_sk_fp(), write) && acc(Counter4_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Counter1_interferenceContext_fp($r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Counter2_interferenceContext_fp($r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Counter3_interferenceContext_fp($r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Counter4_interferenceContext_fp($r, $lvl, $x), write))
  inhale acc(x.$memcell_$f, write) && true
  
  // ------- Stabilising regions Counter1,Counter2,Counter3,Counter4 (check stability of region interpretation) BEGIN 
  
  
  label pre_stabilize0
  
  // Stabilising all instances of region Counter1
  
  ___silicon_hack407_havoc_all_Counter1()
  exhale acc(Counter1_sk_fp(), write)
  inhale acc(Counter1_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Counter1($r, $lvl, $x)] :: none < old[pre_stabilize0](perm(Counter1($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Counter1_atomicity_context_fp($r, $lvl, $x)) ==> (Counter1_state($r, $lvl, $x) in Counter1_atomicity_context_hf($r, $lvl, $x))) && (Counter1_state($r, $lvl, $x) == old[pre_stabilize0](Counter1_state($r, $lvl, $x)) || Counter1_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize0](Counter1_state($r, $lvl, $x)) && Counter1_sk_$_action_m($r, $lvl, $x) == Counter1_state($r, $lvl, $x) && Counter1_sk_$_action_n($r, $lvl, $x) < Counter1_sk_$_action_m($r, $lvl, $x) && true))
  
  // Stabilising all instances of region Counter2
  
  ___silicon_hack407_havoc_all_Counter2()
  exhale acc(Counter2_sk_fp(), write)
  inhale acc(Counter2_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Counter2($r, $lvl, $x)] :: none < old[pre_stabilize0](perm(Counter2($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Counter2_atomicity_context_fp($r, $lvl, $x)) ==> (Counter2_state($r, $lvl, $x) in Counter2_atomicity_context_hf($r, $lvl, $x))) && (Counter2_state($r, $lvl, $x) == old[pre_stabilize0](Counter2_state($r, $lvl, $x)) || Counter2_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize0](Counter2_state($r, $lvl, $x)) && Counter2_sk_$_action_m($r, $lvl, $x) == Counter2_state($r, $lvl, $x) && Counter2_sk_$_action_n($r, $lvl, $x) < Counter2_sk_$_action_m($r, $lvl, $x) && true))
  
  // Stabilising all instances of region Counter3
  
  ___silicon_hack407_havoc_all_Counter3()
  exhale acc(Counter3_sk_fp(), write)
  inhale acc(Counter3_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Counter3($r, $lvl, $x)] :: none < old[pre_stabilize0](perm(Counter3($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Counter3_atomicity_context_fp($r, $lvl, $x)) ==> (Counter3_state($r, $lvl, $x) in Counter3_atomicity_context_hf($r, $lvl, $x))) && (Counter3_state($r, $lvl, $x) == old[pre_stabilize0](Counter3_state($r, $lvl, $x)) || Counter3_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize0](Counter3_state($r, $lvl, $x)) && Counter3_sk_$_action_m($r, $lvl, $x) == Counter3_state($r, $lvl, $x) && Counter3_sk_$_action_n($r, $lvl, $x) < Counter3_sk_$_action_m($r, $lvl, $x) && true))
  
  // Stabilising all instances of region Counter4
  
  ___silicon_hack407_havoc_all_Counter4()
  exhale acc(Counter4_sk_fp(), write)
  inhale acc(Counter4_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Counter4($r, $lvl, $x)] :: none < old[pre_stabilize0](perm(Counter4($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Counter4_atomicity_context_fp($r, $lvl, $x)) ==> (Counter4_state($r, $lvl, $x) in Counter4_atomicity_context_hf($r, $lvl, $x))) && (Counter4_state($r, $lvl, $x) == old[pre_stabilize0](Counter4_state($r, $lvl, $x)) || Counter4_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize0](Counter4_state($r, $lvl, $x)) && Counter4_sk_$_action_m($r, $lvl, $x) == Counter4_state($r, $lvl, $x) && Counter4_sk_$_action_n($r, $lvl, $x) < Counter4_sk_$_action_m($r, $lvl, $x) && true))
  
  // ------- Stabilising regions Counter1,Counter2,Counter3,Counter4 (check stability of region interpretation) END 
  
  
  assert acc(x.$memcell_$f, write) && true
}

method $_Counter1_action_transitivity_check()
{
  var INCREMENT1: Bool
  var $_action_n_0_x: Int
  var $_action_m_0_x: Int
  var $_action_n_0_y: Int
  var $_action_m_0_y: Int
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState || $_action_n_0_x == aState && $_action_m_0_x == bState && $_action_n_0_x < $_action_m_0_x && INCREMENT1
  inhale bState == cState || $_action_n_0_y == bState && $_action_m_0_y == cState && $_action_n_0_y < $_action_m_0_y && INCREMENT1
  assert aState == cState || aState == aState && cState == cState && aState < cState && INCREMENT1
}

method $_Counter2_interpretation_stability_check(r: Ref, lvl: Int, x: Ref)
{
  inhale acc(Counter1_sk_fp(), write) && acc(Counter2_sk_fp(), write) && acc(Counter3_sk_fp(), write) && acc(Counter4_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Counter1_interferenceContext_fp($r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Counter2_interferenceContext_fp($r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Counter3_interferenceContext_fp($r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Counter4_interferenceContext_fp($r, $lvl, $x), write))
  inhale acc(x.$memcell_$f, write) && true
  
  // ------- Stabilising regions Counter1,Counter2,Counter3,Counter4 (check stability of region interpretation) BEGIN 
  
  
  label pre_stabilize
  
  // Stabilising all instances of region Counter1
  
  ___silicon_hack407_havoc_all_Counter1()
  exhale acc(Counter1_sk_fp(), write)
  inhale acc(Counter1_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Counter1($r, $lvl, $x)] :: none < old[pre_stabilize](perm(Counter1($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Counter1_atomicity_context_fp($r, $lvl, $x)) ==> (Counter1_state($r, $lvl, $x) in Counter1_atomicity_context_hf($r, $lvl, $x))) && (Counter1_state($r, $lvl, $x) == old[pre_stabilize](Counter1_state($r, $lvl, $x)) || Counter1_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize](Counter1_state($r, $lvl, $x)) && Counter1_sk_$_action_m($r, $lvl, $x) == Counter1_state($r, $lvl, $x) && Counter1_sk_$_action_n($r, $lvl, $x) < Counter1_sk_$_action_m($r, $lvl, $x) && true))
  
  // Stabilising all instances of region Counter2
  
  ___silicon_hack407_havoc_all_Counter2()
  exhale acc(Counter2_sk_fp(), write)
  inhale acc(Counter2_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Counter2($r, $lvl, $x)] :: none < old[pre_stabilize](perm(Counter2($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Counter2_atomicity_context_fp($r, $lvl, $x)) ==> (Counter2_state($r, $lvl, $x) in Counter2_atomicity_context_hf($r, $lvl, $x))) && (Counter2_state($r, $lvl, $x) == old[pre_stabilize](Counter2_state($r, $lvl, $x)) || Counter2_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize](Counter2_state($r, $lvl, $x)) && Counter2_sk_$_action_m($r, $lvl, $x) == Counter2_state($r, $lvl, $x) && Counter2_sk_$_action_n($r, $lvl, $x) < Counter2_sk_$_action_m($r, $lvl, $x) && true))
  
  // Stabilising all instances of region Counter3
  
  ___silicon_hack407_havoc_all_Counter3()
  exhale acc(Counter3_sk_fp(), write)
  inhale acc(Counter3_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Counter3($r, $lvl, $x)] :: none < old[pre_stabilize](perm(Counter3($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Counter3_atomicity_context_fp($r, $lvl, $x)) ==> (Counter3_state($r, $lvl, $x) in Counter3_atomicity_context_hf($r, $lvl, $x))) && (Counter3_state($r, $lvl, $x) == old[pre_stabilize](Counter3_state($r, $lvl, $x)) || Counter3_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize](Counter3_state($r, $lvl, $x)) && Counter3_sk_$_action_m($r, $lvl, $x) == Counter3_state($r, $lvl, $x) && Counter3_sk_$_action_n($r, $lvl, $x) < Counter3_sk_$_action_m($r, $lvl, $x) && true))
  
  // Stabilising all instances of region Counter4
  
  ___silicon_hack407_havoc_all_Counter4()
  exhale acc(Counter4_sk_fp(), write)
  inhale acc(Counter4_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Counter4($r, $lvl, $x)] :: none < old[pre_stabilize](perm(Counter4($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Counter4_atomicity_context_fp($r, $lvl, $x)) ==> (Counter4_state($r, $lvl, $x) in Counter4_atomicity_context_hf($r, $lvl, $x))) && (Counter4_state($r, $lvl, $x) == old[pre_stabilize](Counter4_state($r, $lvl, $x)) || Counter4_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize](Counter4_state($r, $lvl, $x)) && Counter4_sk_$_action_m($r, $lvl, $x) == Counter4_state($r, $lvl, $x) && Counter4_sk_$_action_n($r, $lvl, $x) < Counter4_sk_$_action_m($r, $lvl, $x) && true))
  
  // ------- Stabilising regions Counter1,Counter2,Counter3,Counter4 (check stability of region interpretation) END 
  
  
  assert acc(x.$memcell_$f, write) && true
}

method $_Counter2_action_transitivity_check()
{
  var INCREMENT2: Bool
  var $_action_n_0_x: Int
  var $_action_m_0_x: Int
  var $_action_n_0_y: Int
  var $_action_m_0_y: Int
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState || $_action_n_0_x == aState && $_action_m_0_x == bState && $_action_n_0_x < $_action_m_0_x && INCREMENT2
  inhale bState == cState || $_action_n_0_y == bState && $_action_m_0_y == cState && $_action_n_0_y < $_action_m_0_y && INCREMENT2
  assert aState == cState || aState == aState && cState == cState && aState < cState && INCREMENT2
}

method $_Counter3_interpretation_stability_check(r: Ref, lvl: Int, x: Ref)
{
  inhale acc(Counter1_sk_fp(), write) && acc(Counter2_sk_fp(), write) && acc(Counter3_sk_fp(), write) && acc(Counter4_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Counter1_interferenceContext_fp($r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Counter2_interferenceContext_fp($r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Counter3_interferenceContext_fp($r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Counter4_interferenceContext_fp($r, $lvl, $x), write))
  inhale acc(x.$memcell_$f, write) && true
  
  // ------- Stabilising regions Counter1,Counter2,Counter3,Counter4 (check stability of region interpretation) BEGIN 
  
  
  label pre_stabilize2
  
  // Stabilising all instances of region Counter1
  
  ___silicon_hack407_havoc_all_Counter1()
  exhale acc(Counter1_sk_fp(), write)
  inhale acc(Counter1_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Counter1($r, $lvl, $x)] :: none < old[pre_stabilize2](perm(Counter1($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Counter1_atomicity_context_fp($r, $lvl, $x)) ==> (Counter1_state($r, $lvl, $x) in Counter1_atomicity_context_hf($r, $lvl, $x))) && (Counter1_state($r, $lvl, $x) == old[pre_stabilize2](Counter1_state($r, $lvl, $x)) || Counter1_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize2](Counter1_state($r, $lvl, $x)) && Counter1_sk_$_action_m($r, $lvl, $x) == Counter1_state($r, $lvl, $x) && Counter1_sk_$_action_n($r, $lvl, $x) < Counter1_sk_$_action_m($r, $lvl, $x) && true))
  
  // Stabilising all instances of region Counter2
  
  ___silicon_hack407_havoc_all_Counter2()
  exhale acc(Counter2_sk_fp(), write)
  inhale acc(Counter2_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Counter2($r, $lvl, $x)] :: none < old[pre_stabilize2](perm(Counter2($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Counter2_atomicity_context_fp($r, $lvl, $x)) ==> (Counter2_state($r, $lvl, $x) in Counter2_atomicity_context_hf($r, $lvl, $x))) && (Counter2_state($r, $lvl, $x) == old[pre_stabilize2](Counter2_state($r, $lvl, $x)) || Counter2_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize2](Counter2_state($r, $lvl, $x)) && Counter2_sk_$_action_m($r, $lvl, $x) == Counter2_state($r, $lvl, $x) && Counter2_sk_$_action_n($r, $lvl, $x) < Counter2_sk_$_action_m($r, $lvl, $x) && true))
  
  // Stabilising all instances of region Counter3
  
  ___silicon_hack407_havoc_all_Counter3()
  exhale acc(Counter3_sk_fp(), write)
  inhale acc(Counter3_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Counter3($r, $lvl, $x)] :: none < old[pre_stabilize2](perm(Counter3($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Counter3_atomicity_context_fp($r, $lvl, $x)) ==> (Counter3_state($r, $lvl, $x) in Counter3_atomicity_context_hf($r, $lvl, $x))) && (Counter3_state($r, $lvl, $x) == old[pre_stabilize2](Counter3_state($r, $lvl, $x)) || Counter3_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize2](Counter3_state($r, $lvl, $x)) && Counter3_sk_$_action_m($r, $lvl, $x) == Counter3_state($r, $lvl, $x) && Counter3_sk_$_action_n($r, $lvl, $x) < Counter3_sk_$_action_m($r, $lvl, $x) && true))
  
  // Stabilising all instances of region Counter4
  
  ___silicon_hack407_havoc_all_Counter4()
  exhale acc(Counter4_sk_fp(), write)
  inhale acc(Counter4_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Counter4($r, $lvl, $x)] :: none < old[pre_stabilize2](perm(Counter4($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Counter4_atomicity_context_fp($r, $lvl, $x)) ==> (Counter4_state($r, $lvl, $x) in Counter4_atomicity_context_hf($r, $lvl, $x))) && (Counter4_state($r, $lvl, $x) == old[pre_stabilize2](Counter4_state($r, $lvl, $x)) || Counter4_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize2](Counter4_state($r, $lvl, $x)) && Counter4_sk_$_action_m($r, $lvl, $x) == Counter4_state($r, $lvl, $x) && Counter4_sk_$_action_n($r, $lvl, $x) < Counter4_sk_$_action_m($r, $lvl, $x) && true))
  
  // ------- Stabilising regions Counter1,Counter2,Counter3,Counter4 (check stability of region interpretation) END 
  
  
  assert acc(x.$memcell_$f, write) && true
}

method $_Counter3_action_transitivity_check()
{
  var INCREMENT3: Bool
  var $_action_n_0_x: Int
  var $_action_m_0_x: Int
  var $_action_n_0_y: Int
  var $_action_m_0_y: Int
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState || $_action_n_0_x == aState && $_action_m_0_x == bState && $_action_n_0_x < $_action_m_0_x && INCREMENT3
  inhale bState == cState || $_action_n_0_y == bState && $_action_m_0_y == cState && $_action_n_0_y < $_action_m_0_y && INCREMENT3
  assert aState == cState || aState == aState && cState == cState && aState < cState && INCREMENT3
}

method $_Counter4_interpretation_stability_check(r: Ref, lvl: Int, x: Ref)
{
  inhale acc(Counter1_sk_fp(), write) && acc(Counter2_sk_fp(), write) && acc(Counter3_sk_fp(), write) && acc(Counter4_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Counter1_interferenceContext_fp($r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Counter2_interferenceContext_fp($r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Counter3_interferenceContext_fp($r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Counter4_interferenceContext_fp($r, $lvl, $x), write))
  inhale acc(x.$memcell_$f, write) && true
  
  // ------- Stabilising regions Counter1,Counter2,Counter3,Counter4 (check stability of region interpretation) BEGIN 
  
  
  label pre_stabilize3
  
  // Stabilising all instances of region Counter1
  
  ___silicon_hack407_havoc_all_Counter1()
  exhale acc(Counter1_sk_fp(), write)
  inhale acc(Counter1_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Counter1($r, $lvl, $x)] :: none < old[pre_stabilize3](perm(Counter1($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Counter1_atomicity_context_fp($r, $lvl, $x)) ==> (Counter1_state($r, $lvl, $x) in Counter1_atomicity_context_hf($r, $lvl, $x))) && (Counter1_state($r, $lvl, $x) == old[pre_stabilize3](Counter1_state($r, $lvl, $x)) || Counter1_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize3](Counter1_state($r, $lvl, $x)) && Counter1_sk_$_action_m($r, $lvl, $x) == Counter1_state($r, $lvl, $x) && Counter1_sk_$_action_n($r, $lvl, $x) < Counter1_sk_$_action_m($r, $lvl, $x) && true))
  
  // Stabilising all instances of region Counter2
  
  ___silicon_hack407_havoc_all_Counter2()
  exhale acc(Counter2_sk_fp(), write)
  inhale acc(Counter2_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Counter2($r, $lvl, $x)] :: none < old[pre_stabilize3](perm(Counter2($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Counter2_atomicity_context_fp($r, $lvl, $x)) ==> (Counter2_state($r, $lvl, $x) in Counter2_atomicity_context_hf($r, $lvl, $x))) && (Counter2_state($r, $lvl, $x) == old[pre_stabilize3](Counter2_state($r, $lvl, $x)) || Counter2_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize3](Counter2_state($r, $lvl, $x)) && Counter2_sk_$_action_m($r, $lvl, $x) == Counter2_state($r, $lvl, $x) && Counter2_sk_$_action_n($r, $lvl, $x) < Counter2_sk_$_action_m($r, $lvl, $x) && true))
  
  // Stabilising all instances of region Counter3
  
  ___silicon_hack407_havoc_all_Counter3()
  exhale acc(Counter3_sk_fp(), write)
  inhale acc(Counter3_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Counter3($r, $lvl, $x)] :: none < old[pre_stabilize3](perm(Counter3($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Counter3_atomicity_context_fp($r, $lvl, $x)) ==> (Counter3_state($r, $lvl, $x) in Counter3_atomicity_context_hf($r, $lvl, $x))) && (Counter3_state($r, $lvl, $x) == old[pre_stabilize3](Counter3_state($r, $lvl, $x)) || Counter3_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize3](Counter3_state($r, $lvl, $x)) && Counter3_sk_$_action_m($r, $lvl, $x) == Counter3_state($r, $lvl, $x) && Counter3_sk_$_action_n($r, $lvl, $x) < Counter3_sk_$_action_m($r, $lvl, $x) && true))
  
  // Stabilising all instances of region Counter4
  
  ___silicon_hack407_havoc_all_Counter4()
  exhale acc(Counter4_sk_fp(), write)
  inhale acc(Counter4_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Counter4($r, $lvl, $x)] :: none < old[pre_stabilize3](perm(Counter4($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Counter4_atomicity_context_fp($r, $lvl, $x)) ==> (Counter4_state($r, $lvl, $x) in Counter4_atomicity_context_hf($r, $lvl, $x))) && (Counter4_state($r, $lvl, $x) == old[pre_stabilize3](Counter4_state($r, $lvl, $x)) || Counter4_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize3](Counter4_state($r, $lvl, $x)) && Counter4_sk_$_action_m($r, $lvl, $x) == Counter4_state($r, $lvl, $x) && Counter4_sk_$_action_n($r, $lvl, $x) < Counter4_sk_$_action_m($r, $lvl, $x) && true))
  
  // ------- Stabilising regions Counter1,Counter2,Counter3,Counter4 (check stability of region interpretation) END 
  
  
  assert acc(x.$memcell_$f, write) && true
}

method $_Counter4_action_transitivity_check()
{
  var INCREMENT4: Bool
  var $_action_n_0_x: Int
  var $_action_m_0_x: Int
  var $_action_n_0_y: Int
  var $_action_m_0_y: Int
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState || $_action_n_0_x == aState && $_action_m_0_x == bState && $_action_n_0_x < $_action_m_0_x && INCREMENT4
  inhale bState == cState || $_action_n_0_y == bState && $_action_m_0_y == cState && $_action_n_0_y < $_action_m_0_y && INCREMENT4
  assert aState == cState || aState == aState && cState == cState && aState < cState && INCREMENT4
}