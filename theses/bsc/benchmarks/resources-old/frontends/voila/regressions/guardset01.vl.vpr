domain Map[U, V] {
  
  function Map_keys(m: Map[U, V]): Set[U]
  
  function Map_card(m: Map[U, V]): Int
  
  function Map_lookup(m: Map[U, V], u: U): V
  
  function Map_values(m: Map[U, V]): Set[V]
  
  function Map_empty(): Map[U, V]
  
  function Map_build(m: Map[U, V], u: U, v: V): Map[U, V]
  
  function Map_equal(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_disjoint(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_union(m1: Map[U, V], m2: Map[U, V]): Map[U, V]
  
  axiom Map_card_non_neg {
    (forall m: Map[U, V] :: { Map_card(m) } 0 <= Map_card(m))
  }
  
  axiom Map_card_domain {
    (forall m: Map[U, V] :: { |Map_keys(m)| } |Map_keys(m)| == Map_card(m))
  }
  
  axiom Map_values_def {
    (forall m: Map[U, V], v: V :: { (v in Map_values(m)) } (v in Map_values(m)) == (exists u: U :: (u in Map_keys(m)) && v == Map_lookup(m, u)))
  }
  
  axiom Map_empty_1 {
    (forall u: U :: { (u in Map_keys(Map_empty())) } !((u in Map_keys(Map_empty()))))
  }
  
  axiom Map_empty_2 {
    (forall m: Map[U, V] :: { Map_card(m) } (Map_card(m) == 0) == (m == Map_empty()) && (Map_card(m) != 0 ==> (exists u: U :: (u in Map_keys(m)))))
  }
  
  axiom Map_build_1 {
    (forall m: Map[U, V], u1: U, u2: U, v: V :: { (u2 in Map_keys(Map_build(m, u1, v))) } (u2 == u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) && Map_lookup(Map_build(m, u1, v), u1) == v) && (u2 != u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) == (u2 in Map_keys(m)) && Map_lookup(Map_build(m, u1, v), u2) == Map_lookup(m, u2)))
  }
  
  axiom Map_build_2 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } (u in Map_keys(m)) ==> Map_card(Map_build(m, u, v)) == Map_card(m))
  }
  
  axiom Map_build_3 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } !((u in Map_keys(m))) ==> Map_card(Map_build(m, u, v)) == Map_card(m) + 1)
  }
  
  axiom Map_equality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } (u in Map_keys(m1)) == (u in Map_keys(m2))))
  }
  
  axiom Map_extensionality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) ==> m1 == m2)
  }
  
  axiom Map_disjoint_def {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_disjoint(m1, m2) } Map_disjoint(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } !((u in Map_keys(m1))) || !((u in Map_keys(m2)))))
  }
  
  axiom Map_union_1 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { (u in Map_keys(Map_union(m1, m2))) } { (u in (Map_keys(m1) union Map_keys(m2))) } Map_disjoint(m1, m2) ==> (u in Map_keys(Map_union(m1, m2))) == (u in (Map_keys(m1) union Map_keys(m2))))
  }
  
  axiom Map_union_2 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m1)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m1, u))
  }
  
  axiom Map_union_3 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m2)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m2, u))
  }
}

domain trigger_functions {
  
  function TLock_TICKET_T($r: Ref, n: Int): Bool
  
  function TLock_state_T(r: Ref, lvl: Int, x: Ref): Bool
  
  axiom TLock_TICKET_T_bottom {
    (forall $r: Ref, n: Int :: { TLock_TICKET_T($r, n) } TLock_TICKET_T($r, n))
  }
}

domain interferenceReference_Domain {
  
  function TLock_interferenceReference_df($p0: Int, r: Ref, lvl: Int, x: Ref): Bool
}

domain interferenceSet_Domain {
  
  function TLock_interferenceSet_df($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
}

domain atomicity_context_Domain {
  
  function TLock_atomicity_context_df(r: Ref, lvl: Int, x: Ref): Bool
}

field $diamond: Int

field $stepFrom_int: Int

field $stepTo_int: Int

field $memcell_$next: Int

field $memcell_$owner: Int

function IntSet(): Set[Int]
  ensures (forall n: Int :: (n in result))


function NatSet(): Set[Int]
  ensures (forall n: Int :: 0 <= n == (n in result))


function comprehension_180_190($s_0: Int, $s_1: Int): Set[Int]
  ensures (forall $k: Int :: ($k in result) == ($s_0 <= $k && $k < $s_1))


function comprehension_21_190($s_0: Int): Set[Int]
  ensures (forall $k: Int :: ($k in result) == $k >= $s_0)


function comprehension_138_390($s_0: Int, $s_1: Int): Set[Int]
  ensures (forall $k: Int :: ($k in result) == ($s_0 <= $k && $k < $s_1 - 1))


function TLock_atomicity_context_hf(r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(TLock_atomicity_context_fp(r, lvl, x), write)
  ensures [TLock_atomicity_context_df(r, lvl, x), true]


function TLock_interferenceSet_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(TLock_interferenceContext_fp(r, lvl, x), write)
  ensures [(forall $_m: Int :: { ($_m in result) } ($_m in result) ==> ($_m in TLock_interferenceSet_df($p0, r, lvl, x))), true]


function TLock_interferenceReference_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Int
  requires acc(TLock_interferenceContext_fp(r, lvl, x), write)
  ensures [TLock_interferenceReference_df($p0, r, lvl, x), true]


function TLock_sk_$_action_n(r: Ref, lvl: Int, x: Ref): Int
  requires acc(TLock_sk_fp(), write)


function TLock_sk_$_action_m(r: Ref, lvl: Int, x: Ref): Int
  requires acc(TLock_sk_fp(), write)


function TLock_out0(r: Ref, lvl: Int, x: Ref): Int
  requires acc(TLock(r, lvl, x), write)
{
  (unfolding acc(TLock(r, lvl, x), write) in x.$memcell_$next)
}

function TLock_state(r: Ref, lvl: Int, x: Ref): Int
  requires acc(TLock(r, lvl, x), write)
  ensures [TLock_state_T(r, lvl, x), true]
{
  (unfolding acc(TLock(r, lvl, x), write) in x.$memcell_$owner)
}

predicate TLock_TICKET($r: Ref, n: Int) 

predicate TLock_atomicity_context_fp(r: Ref, lvl: Int, x: Ref) 

predicate TLock_interferenceContext_fp(r: Ref, lvl: Int, x: Ref) 

predicate TLock_sk_fp() 

predicate TLock(r: Ref, lvl: Int, x: Ref) {
  acc(x.$memcell_$owner, write) && true && (acc(x.$memcell_$next, write) && true) && ((forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_21_190(x.$memcell_$next)) } ($a in comprehension_21_190(x.$memcell_$next)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_21_190(x.$memcell_$next)) } ($a in comprehension_21_190(x.$memcell_$next)) ==> acc(TLock_TICKET(r, $a), write)))
}

method havoc_Bool() returns ($r: Bool)


method havoc_Int() returns ($r: Int)


method havoc_Ref() returns ($r: Ref)


method ___silicon_hack407_havoc_all_TLock()


method ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()


method test(r: Ref, lvl: Int, x: Ref)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && ((forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_21_190(TLock_out0(r, lvl, x))) } ($a in comprehension_21_190(TLock_out0(r, lvl, x))) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_21_190(TLock_out0(r, lvl, x))) } ($a in comprehension_21_190(TLock_out0(r, lvl, x))) ==> acc(TLock_TICKET(r, $a), write)))
{
  var f: Int
  var $_levelVar_0: Int
  inhale $_levelVar_0 >= 0 && $_levelVar_0 > lvl
  assert $_levelVar_0 >= 0
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer0
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(1, $r, $lvl, $x)) } none < old[pre_infer0](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(1, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer0](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer0](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer0](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(1, $r, $lvl, $x) == old[pre_infer0](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- assert BEGIN ------------
  
  
  assert (old(TLock_out0(r, lvl, x)) + 3 in comprehension_21_190(old(TLock_out0(r, lvl, x))))
  
  // ------- assert END --------------
  
  
  
  // ------- exhale BEGIN ------------
  
  
  exhale TLock_TICKET_T(r, old(TLock_out0(r, lvl, x)) + 3) && acc(TLock_TICKET(r, old(TLock_out0(r, lvl, x)) + 3), write)
  
  // ------- exhale END --------------
  
  
  
  // ------- assert BEGIN ------------
  
  
  assert false
  
  // ------- assert END --------------
  
  
}

method test2(r: Ref, lvl: Int, x: Ref) returns (ret1: Int, ret2: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && (TLock_TICKET_T(r, TLock_state(r, lvl, x)) && acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write))
  ensures TLock_TICKET_T(r, old(TLock_state(r, lvl, x))) && acc(TLock_TICKET(r, old(TLock_state(r, lvl, x))), write) && ret1 == ret2
{
  var $_levelVar_1: Int
  var $_levelVar_2: Int
  var $_levelVar_3: Int
  var $_levelVar_4: Int
  var $_levelVar_5: Int
  inhale $_levelVar_1 >= 0 && $_levelVar_1 > lvl
  assert $_levelVar_1 >= 0
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(2, $r, $lvl, $x)) } none < old[pre_infer](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(2, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(2, $r, $lvl, $x) == old[pre_infer](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- open-region BEGIN -------
  
  
  label pre_open_region0
  assert $_levelVar_1 > lvl
  $_levelVar_2 := lvl
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- heap-read BEGIN ---------
  
  
  ret1 := x.$memcell_$owner
  
  // ------- heap-read END -----------
  
  
  fold acc(TLock(r, lvl, x), write)
  assert TLock_state(r, lvl, x) == old[pre_open_region0](TLock_state(r, lvl, x))
  $_levelVar_3 := $_levelVar_1
  
  // ------- open-region END ---------
  
  
  
  // ------- Stabilising regions TLock (after open-region@33.3) BEGIN 
  
  
  label pre_stabilize0
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(3, $r, $lvl, $x)) } none < old[pre_stabilize0](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(3, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize0](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize0](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  ___silicon_hack407_havoc_all_TLock()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize0](perm(TLock($r, $lvl, $x))) ==> (TLock_state($r, $lvl, $x) in TLock_interferenceSet_hf(3, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize0](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(3, $r, $lvl, $x) == old[pre_stabilize0](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after open-region@33.3) END 
  
  
  
  // ------- open-region BEGIN -------
  
  
  label pre_open_region
  assert $_levelVar_3 > lvl
  $_levelVar_4 := lvl
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- heap-read BEGIN ---------
  
  
  ret2 := x.$memcell_$owner
  
  // ------- heap-read END -----------
  
  
  fold acc(TLock(r, lvl, x), write)
  assert TLock_state(r, lvl, x) == old[pre_open_region](TLock_state(r, lvl, x))
  $_levelVar_5 := $_levelVar_3
  
  // ------- open-region END ---------
  
  
  
  // ------- Stabilising regions TLock (after open-region@39.3) BEGIN 
  
  
  label pre_stabilize
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(4, $r, $lvl, $x)) } none < old[pre_stabilize](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(4, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  ___silicon_hack407_havoc_all_TLock()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize](perm(TLock($r, $lvl, $x))) ==> (TLock_state($r, $lvl, $x) in TLock_interferenceSet_hf(4, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(4, $r, $lvl, $x) == old[pre_stabilize](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after open-region@39.3) END 
  
  
}

method test3(r: Ref, lvl: Int, x: Ref) returns (ret: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && (TLock_TICKET_T(r, TLock_state(r, lvl, x)) && acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write))
  ensures acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  ensures TLock_TICKET_T(r, old(TLock_state(r, lvl, x))) && acc(TLock_TICKET(r, old(TLock_state(r, lvl, x))), write)
  ensures TLock_state(r, lvl, x) >= old(TLock_state(r, lvl, x)) + 1
{
  var z: Int
  var q: Int
  var $_levelVar_6: Int
  var $_levelVar_7: Int
  var $_levelVar_8: Int
  var $_levelVar_9: Int
  var $_levelVar_10: Int
  inhale $_levelVar_6 >= 0 && $_levelVar_6 > lvl
  assert $_levelVar_6 >= 0
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer2
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(5, $r, $lvl, $x)) } none < old[pre_infer2](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(5, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer2](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer2](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer2](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(5, $r, $lvl, $x) == old[pre_infer2](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- open-region BEGIN -------
  
  
  label pre_open_region2
  assert $_levelVar_6 > lvl
  $_levelVar_7 := lvl
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- heap-read BEGIN ---------
  
  
  z := x.$memcell_$owner
  
  // ------- heap-read END -----------
  
  
  fold acc(TLock(r, lvl, x), write)
  assert TLock_state(r, lvl, x) == old[pre_open_region2](TLock_state(r, lvl, x))
  $_levelVar_8 := $_levelVar_6
  
  // ------- open-region END ---------
  
  
  
  // ------- Stabilising regions TLock (after open-region@55.3) BEGIN 
  
  
  label pre_stabilize2
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(6, $r, $lvl, $x)) } none < old[pre_stabilize2](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(6, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize2](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize2](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  ___silicon_hack407_havoc_all_TLock()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize2](perm(TLock($r, $lvl, $x))) ==> (TLock_state($r, $lvl, $x) in TLock_interferenceSet_hf(6, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize2](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(6, $r, $lvl, $x) == old[pre_stabilize2](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after open-region@55.3) END 
  
  
  
  // ------- use-atomic BEGIN --------
  
  
  label pre_use_atomic0
  assert perm(TLock_atomicity_context_fp(r, lvl, x)) == none
  assert $_levelVar_8 > lvl
  $_levelVar_9 := lvl
  exhale TLock_TICKET_T(r, old(TLock_state(r, lvl, x))) && acc(TLock_TICKET(r, old(TLock_state(r, lvl, x))), write)
  
  // ------- Stabilising regions  (before use-atomic@61.3) BEGIN 
  
  
  label pre_stabilize3
  
  // ------- Stabilising regions  (before use-atomic@61.3) END 
  
  
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- Stabilising regions TLock (before use-atomic@61.3) BEGIN 
  
  
  label pre_stabilize4
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize4](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize4](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize4](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (before use-atomic@61.3) END 
  
  
  inhale TLock_TICKET_T(r, old(TLock_state(r, lvl, x))) && acc(TLock_TICKET(r, old(TLock_state(r, lvl, x))), write)
  
  // ------- heap-write BEGIN --------
  
  
  x.$memcell_$owner := z + 1
  
  // ------- heap-write END ----------
  
  
  fold acc(TLock(r, lvl, x), write)
  assert old[pre_use_atomic0](TLock_state(r, lvl, x)) == TLock_state(r, lvl, x) || old[pre_use_atomic0](TLock_state(r, lvl, x)) < TLock_state(r, lvl, x) && (forall $a: Int :: ($a in comprehension_180_190(old[pre_use_atomic0](TLock_state(r, lvl, x)), TLock_state(r, lvl, x))) ==> $a == old(TLock_state(r, lvl, x)))
  $_levelVar_10 := $_levelVar_8
  
  // ------- use-atomic END ----------
  
  
  
  // ------- Stabilising regions TLock (after use-atomic@61.3) BEGIN 
  
  
  label pre_stabilize5
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(7, $r, $lvl, $x)) } none < old[pre_stabilize5](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(7, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize5](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize5](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  ___silicon_hack407_havoc_all_TLock()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize5](perm(TLock($r, $lvl, $x))) ==> (TLock_state($r, $lvl, $x) in TLock_interferenceSet_hf(7, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize5](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(7, $r, $lvl, $x) == old[pre_stabilize5](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after use-atomic@61.3) END 
  
  
}

method test4(r: Ref, lvl: Int, x: Ref) returns (ret: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && (TLock_TICKET_T(r, TLock_state(r, lvl, x)) && acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write)) && (TLock_TICKET_T(r, TLock_state(r, lvl, x) + 1) && acc(TLock_TICKET(r, TLock_state(r, lvl, x) + 1), write))
  ensures acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  ensures TLock_TICKET_T(r, old(TLock_state(r, lvl, x))) && acc(TLock_TICKET(r, old(TLock_state(r, lvl, x))), write) && (TLock_TICKET_T(r, old(TLock_state(r, lvl, x)) + 1) && acc(TLock_TICKET(r, old(TLock_state(r, lvl, x)) + 1), write))
  ensures TLock_state(r, lvl, x) == old(TLock_state(r, lvl, x)) + 1
{
  var z: Int
  var $_levelVar_11: Int
  var $_levelVar_12: Int
  var $_levelVar_13: Int
  var $_levelVar_14: Int
  var $_levelVar_15: Int
  inhale $_levelVar_11 >= 0 && $_levelVar_11 > lvl
  assert $_levelVar_11 >= 0
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer3
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(8, $r, $lvl, $x)) } none < old[pre_infer3](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(8, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer3](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer3](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer3](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(8, $r, $lvl, $x) == old[pre_infer3](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- open-region BEGIN -------
  
  
  label pre_open_region3
  assert $_levelVar_11 > lvl
  $_levelVar_12 := lvl
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- heap-read BEGIN ---------
  
  
  z := x.$memcell_$owner
  
  // ------- heap-read END -----------
  
  
  fold acc(TLock(r, lvl, x), write)
  assert TLock_state(r, lvl, x) == old[pre_open_region3](TLock_state(r, lvl, x))
  $_levelVar_13 := $_levelVar_11
  
  // ------- open-region END ---------
  
  
  
  // ------- Stabilising regions TLock (after open-region@76.3) BEGIN 
  
  
  label pre_stabilize6
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(9, $r, $lvl, $x)) } none < old[pre_stabilize6](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(9, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize6](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize6](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  ___silicon_hack407_havoc_all_TLock()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize6](perm(TLock($r, $lvl, $x))) ==> (TLock_state($r, $lvl, $x) in TLock_interferenceSet_hf(9, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize6](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(9, $r, $lvl, $x) == old[pre_stabilize6](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after open-region@76.3) END 
  
  
  
  // ------- use-atomic BEGIN --------
  
  
  label pre_use_atomic
  assert perm(TLock_atomicity_context_fp(r, lvl, x)) == none
  assert $_levelVar_13 > lvl
  $_levelVar_14 := lvl
  exhale TLock_TICKET_T(r, old(TLock_state(r, lvl, x))) && acc(TLock_TICKET(r, old(TLock_state(r, lvl, x))), write)
  
  // ------- Stabilising regions  (before use-atomic@82.3) BEGIN 
  
  
  label pre_stabilize7
  
  // ------- Stabilising regions  (before use-atomic@82.3) END 
  
  
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- Stabilising regions TLock (before use-atomic@82.3) BEGIN 
  
  
  label pre_stabilize8
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize8](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize8](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize8](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (before use-atomic@82.3) END 
  
  
  inhale TLock_TICKET_T(r, old(TLock_state(r, lvl, x))) && acc(TLock_TICKET(r, old(TLock_state(r, lvl, x))), write)
  
  // ------- heap-write BEGIN --------
  
  
  x.$memcell_$owner := z + 1
  
  // ------- heap-write END ----------
  
  
  fold acc(TLock(r, lvl, x), write)
  assert old[pre_use_atomic](TLock_state(r, lvl, x)) == TLock_state(r, lvl, x) || old[pre_use_atomic](TLock_state(r, lvl, x)) < TLock_state(r, lvl, x) && (forall $a: Int :: ($a in comprehension_180_190(old[pre_use_atomic](TLock_state(r, lvl, x)), TLock_state(r, lvl, x))) ==> $a == old(TLock_state(r, lvl, x)))
  $_levelVar_15 := $_levelVar_13
  
  // ------- use-atomic END ----------
  
  
  
  // ------- Stabilising regions TLock (after use-atomic@82.3) BEGIN 
  
  
  label pre_stabilize9
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(10, $r, $lvl, $x)) } none < old[pre_stabilize9](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(10, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize9](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize9](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  ___silicon_hack407_havoc_all_TLock()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize9](perm(TLock($r, $lvl, $x))) ==> (TLock_state($r, $lvl, $x) in TLock_interferenceSet_hf(10, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize9](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(10, $r, $lvl, $x) == old[pre_stabilize9](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after use-atomic@82.3) END 
  
  
}

method test5(r: Ref, lvl: Int, x: Ref, d: Int) returns (ret: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  requires TLock_state(r, lvl, x) < d
  requires (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> acc(TLock_TICKET(r, $a), write))
  ensures acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  ensures TLock_state(r, lvl, x) >= d
{
  var $_levelVar_16: Int
  var $_levelVar_17: Int
  var $_levelVar_18: Int
  inhale $_levelVar_16 >= 0 && $_levelVar_16 > lvl
  assert $_levelVar_16 >= 0
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer4
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(11, $r, $lvl, $x)) } none < old[pre_infer4](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(11, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer4](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer4](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer4](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(11, $r, $lvl, $x) == old[pre_infer4](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- use-atomic BEGIN --------
  
  
  label pre_use_atomic2
  assert perm(TLock_atomicity_context_fp(r, lvl, x)) == none
  assert $_levelVar_16 > lvl
  $_levelVar_17 := lvl
  exhale (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) } ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) } ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) ==> acc(TLock_TICKET(r, $a), write))
  
  // ------- Stabilising regions  (before use-atomic@98.3) BEGIN 
  
  
  label pre_stabilize10
  
  // ------- Stabilising regions  (before use-atomic@98.3) END 
  
  
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- Stabilising regions TLock (before use-atomic@98.3) BEGIN 
  
  
  label pre_stabilize11
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize11](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize11](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize11](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (before use-atomic@98.3) END 
  
  
  inhale (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) } ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) } ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) ==> acc(TLock_TICKET(r, $a), write))
  
  // ------- heap-write BEGIN --------
  
  
  x.$memcell_$owner := d
  
  // ------- heap-write END ----------
  
  
  fold acc(TLock(r, lvl, x), write)
  assert old[pre_use_atomic2](TLock_state(r, lvl, x)) == TLock_state(r, lvl, x) || old[pre_use_atomic2](TLock_state(r, lvl, x)) < TLock_state(r, lvl, x) && (forall $a: Int :: ($a in comprehension_180_190(old[pre_use_atomic2](TLock_state(r, lvl, x)), TLock_state(r, lvl, x))) ==> ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)))
  $_levelVar_18 := $_levelVar_16
  
  // ------- use-atomic END ----------
  
  
  
  // ------- Stabilising regions TLock (after use-atomic@98.3) BEGIN 
  
  
  label pre_stabilize12
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(12, $r, $lvl, $x)) } none < old[pre_stabilize12](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(12, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize12](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize12](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  ___silicon_hack407_havoc_all_TLock()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize12](perm(TLock($r, $lvl, $x))) ==> (TLock_state($r, $lvl, $x) in TLock_interferenceSet_hf(12, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize12](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(12, $r, $lvl, $x) == old[pre_stabilize12](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after use-atomic@98.3) END 
  
  
}

method test6(r: Ref, lvl: Int, x: Ref, d: Int) returns (ret: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  requires TLock_state(r, lvl, x) < d
  requires (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> acc(TLock_TICKET(r, $a), write))
  ensures acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  ensures TLock_state(r, lvl, x) == d - 1
{
  var z: Int
  var q: Int
  var $_levelVar_19: Int
  var $_levelVar_20: Int
  var $_levelVar_21: Int
  inhale $_levelVar_19 >= 0 && $_levelVar_19 > lvl
  assert $_levelVar_19 >= 0
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer5
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(13, $r, $lvl, $x)) } none < old[pre_infer5](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(13, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer5](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer5](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer5](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(13, $r, $lvl, $x) == old[pre_infer5](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- use-atomic BEGIN --------
  
  
  label pre_use_atomic3
  assert perm(TLock_atomicity_context_fp(r, lvl, x)) == none
  assert $_levelVar_19 > lvl
  $_levelVar_20 := lvl
  exhale (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) } ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) } ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) ==> acc(TLock_TICKET(r, $a), write))
  
  // ------- Stabilising regions  (before use-atomic@116.3) BEGIN 
  
  
  label pre_stabilize13
  
  // ------- Stabilising regions  (before use-atomic@116.3) END 
  
  
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- Stabilising regions TLock (before use-atomic@116.3) BEGIN 
  
  
  label pre_stabilize14
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize14](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize14](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize14](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (before use-atomic@116.3) END 
  
  
  inhale (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) } ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) } ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) ==> acc(TLock_TICKET(r, $a), write))
  
  // ------- heap-write BEGIN --------
  
  
  x.$memcell_$owner := d - 1
  
  // ------- heap-write END ----------
  
  
  fold acc(TLock(r, lvl, x), write)
  assert old[pre_use_atomic3](TLock_state(r, lvl, x)) == TLock_state(r, lvl, x) || old[pre_use_atomic3](TLock_state(r, lvl, x)) < TLock_state(r, lvl, x) && (forall $a: Int :: ($a in comprehension_180_190(old[pre_use_atomic3](TLock_state(r, lvl, x)), TLock_state(r, lvl, x))) ==> ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)))
  $_levelVar_21 := $_levelVar_19
  
  // ------- use-atomic END ----------
  
  
  
  // ------- assert BEGIN ------------
  
  
  assert TLock_TICKET_T(r, d - 1) && acc(TLock_TICKET(r, d - 1), write)
  
  // ------- assert END --------------
  
  
  
  // ------- Stabilising regions TLock (after seq-comp@116.3) BEGIN 
  
  
  label pre_stabilize15
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(14, $r, $lvl, $x)) } none < old[pre_stabilize15](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(14, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize15](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize15](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  ___silicon_hack407_havoc_all_TLock()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize15](perm(TLock($r, $lvl, $x))) ==> (TLock_state($r, $lvl, $x) in TLock_interferenceSet_hf(14, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize15](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(14, $r, $lvl, $x) == old[pre_stabilize15](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after seq-comp@116.3) END 
  
  
}

method test7(r: Ref, lvl: Int, x: Ref, d: Int) returns (ret: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  requires TLock_state(r, lvl, x) < d
  requires (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> acc(TLock_TICKET(r, $a), write))
  ensures (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) } ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) } ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), d)) ==> acc(TLock_TICKET(r, $a), write))
  ensures acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  ensures TLock_state(r, lvl, x) >= d - 1
{
  var z: Int
  var q: Int
  var $_levelVar_22: Int
  var $_levelVar_23: Int
  var $_levelVar_24: Int
  inhale $_levelVar_22 >= 0 && $_levelVar_22 > lvl
  assert $_levelVar_22 >= 0
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer6
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(15, $r, $lvl, $x)) } none < old[pre_infer6](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(15, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer6](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer6](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer6](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(15, $r, $lvl, $x) == old[pre_infer6](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- use-atomic BEGIN --------
  
  
  label pre_use_atomic4
  assert perm(TLock_atomicity_context_fp(r, lvl, x)) == none
  assert $_levelVar_22 > lvl
  $_levelVar_23 := lvl
  exhale (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_138_390(old(TLock_state(r, lvl, x)), d)) } ($a in comprehension_138_390(old(TLock_state(r, lvl, x)), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_138_390(old(TLock_state(r, lvl, x)), d)) } ($a in comprehension_138_390(old(TLock_state(r, lvl, x)), d)) ==> acc(TLock_TICKET(r, $a), write))
  
  // ------- Stabilising regions  (before use-atomic@137.3) BEGIN 
  
  
  label pre_stabilize16
  
  // ------- Stabilising regions  (before use-atomic@137.3) END 
  
  
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- Stabilising regions TLock (before use-atomic@137.3) BEGIN 
  
  
  label pre_stabilize17
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize17](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize17](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize17](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (before use-atomic@137.3) END 
  
  
  inhale (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_138_390(old(TLock_state(r, lvl, x)), d)) } ($a in comprehension_138_390(old(TLock_state(r, lvl, x)), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_138_390(old(TLock_state(r, lvl, x)), d)) } ($a in comprehension_138_390(old(TLock_state(r, lvl, x)), d)) ==> acc(TLock_TICKET(r, $a), write))
  
  // ------- heap-write BEGIN --------
  
  
  x.$memcell_$owner := d - 1
  
  // ------- heap-write END ----------
  
  
  fold acc(TLock(r, lvl, x), write)
  assert old[pre_use_atomic4](TLock_state(r, lvl, x)) == TLock_state(r, lvl, x) || old[pre_use_atomic4](TLock_state(r, lvl, x)) < TLock_state(r, lvl, x) && (forall $a: Int :: ($a in comprehension_180_190(old[pre_use_atomic4](TLock_state(r, lvl, x)), TLock_state(r, lvl, x))) ==> ($a in comprehension_138_390(old(TLock_state(r, lvl, x)), d)))
  $_levelVar_24 := $_levelVar_22
  
  // ------- use-atomic END ----------
  
  
  
  // ------- Stabilising regions TLock (after use-atomic@137.3) BEGIN 
  
  
  label pre_stabilize18
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(16, $r, $lvl, $x)) } none < old[pre_stabilize18](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(16, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize18](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize18](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  ___silicon_hack407_havoc_all_TLock()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize18](perm(TLock($r, $lvl, $x))) ==> (TLock_state($r, $lvl, $x) in TLock_interferenceSet_hf(16, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize18](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(16, $r, $lvl, $x) == old[pre_stabilize18](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after use-atomic@137.3) END 
  
  
}

method test8(r: Ref, lvl: Int, x: Ref, d: Int) returns (ret: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && (TLock_TICKET_T(r, d) && acc(TLock_TICKET(r, d), write))
  requires TLock_state(r, lvl, x) < d
  ensures acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  ensures TLock_TICKET_T(r, d) && acc(TLock_TICKET(r, d), write)
  ensures TLock_state(r, lvl, x) <= d
{
  var $_levelVar_25: Int
  inhale $_levelVar_25 >= 0 && $_levelVar_25 > lvl
  assert $_levelVar_25 >= 0
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer7
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(17, $r, $lvl, $x)) } none < old[pre_infer7](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(17, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer7](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer7](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer7](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(17, $r, $lvl, $x) == old[pre_infer7](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // skip;
  
  
  
  // ------- Stabilising regions TLock (after skip@152.2) BEGIN 
  
  
  label pre_stabilize19
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(18, $r, $lvl, $x)) } none < old[pre_stabilize19](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(18, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize19](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize19](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  ___silicon_hack407_havoc_all_TLock()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize19](perm(TLock($r, $lvl, $x))) ==> (TLock_state($r, $lvl, $x) in TLock_interferenceSet_hf(18, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize19](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(18, $r, $lvl, $x) == old[pre_stabilize19](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after skip@152.2) END 
  
  
}

method test9(r: Ref, lvl: Int, x: Ref, d: Int) returns (ret: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  requires TLock_state(r, lvl, x) < d
  requires (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> acc(TLock_TICKET(r, $a), write))
  ensures acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  ensures TLock_state(r, lvl, x) >= d
{
  var z: Int
  var $_levelVar_26: Int
  var $_levelVar_27: Int
  var $_levelVar_28: Int
  inhale $_levelVar_26 >= 0 && $_levelVar_26 > lvl
  assert $_levelVar_26 >= 0
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer8
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(19, $r, $lvl, $x)) } none < old[pre_infer8](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(19, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer8](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer8](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer8](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(19, $r, $lvl, $x) == old[pre_infer8](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- assume BEGIN ------------
  
  
  inhale old(TLock_state(r, lvl, x)) < z && z < d
  
  // ------- assume END --------------
  
  
  
  // ------- use-atomic BEGIN --------
  
  
  label pre_use_atomic5
  assert perm(TLock_atomicity_context_fp(r, lvl, x)) == none
  assert $_levelVar_26 > lvl
  $_levelVar_27 := lvl
  exhale (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), z)) } ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), z)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), z)) } ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), z)) ==> acc(TLock_TICKET(r, $a), write)) && ((forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_138_390(z, d)) } ($a in comprehension_138_390(z, d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_138_390(z, d)) } ($a in comprehension_138_390(z, d)) ==> acc(TLock_TICKET(r, $a), write))) && (TLock_TICKET_T(r, d - 1) && acc(TLock_TICKET(r, d - 1), write))
  
  // ------- Stabilising regions  (before use-atomic@166.3) BEGIN 
  
  
  label pre_stabilize20
  
  // ------- Stabilising regions  (before use-atomic@166.3) END 
  
  
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- Stabilising regions TLock (before use-atomic@166.3) BEGIN 
  
  
  label pre_stabilize21
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize21](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize21](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize21](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (before use-atomic@166.3) END 
  
  
  inhale (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), z)) } ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), z)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), z)) } ($a in comprehension_180_190(old(TLock_state(r, lvl, x)), z)) ==> acc(TLock_TICKET(r, $a), write)) && ((forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_138_390(z, d)) } ($a in comprehension_138_390(z, d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_138_390(z, d)) } ($a in comprehension_138_390(z, d)) ==> acc(TLock_TICKET(r, $a), write))) && (TLock_TICKET_T(r, d - 1) && acc(TLock_TICKET(r, d - 1), write))
  
  // ------- heap-write BEGIN --------
  
  
  x.$memcell_$owner := d
  
  // ------- heap-write END ----------
  
  
  fold acc(TLock(r, lvl, x), write)
  assert old[pre_use_atomic5](TLock_state(r, lvl, x)) == TLock_state(r, lvl, x) || old[pre_use_atomic5](TLock_state(r, lvl, x)) < TLock_state(r, lvl, x) && (forall $a: Int :: ($a in comprehension_180_190(old[pre_use_atomic5](TLock_state(r, lvl, x)), TLock_state(r, lvl, x))) ==> ($a in ((comprehension_138_390(z, d) union comprehension_180_190(old(TLock_state(r, lvl, x)), z)) union Set(d - 1))))
  $_levelVar_28 := $_levelVar_26
  
  // ------- use-atomic END ----------
  
  
  
  // ------- Stabilising regions TLock (after seq-comp@164.3) BEGIN 
  
  
  label pre_stabilize22
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(20, $r, $lvl, $x)) } none < old[pre_stabilize22](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(20, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize22](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize22](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  ___silicon_hack407_havoc_all_TLock()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize22](perm(TLock($r, $lvl, $x))) ==> (TLock_state($r, $lvl, $x) in TLock_interferenceSet_hf(20, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize22](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(20, $r, $lvl, $x) == old[pre_stabilize22](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after seq-comp@164.3) END 
  
  
}

method test10(r: Ref, lvl: Int, x: Ref, d: Int) returns (ret: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  requires TLock_state(r, lvl, x) + 1 < d
  requires (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> acc(TLock_TICKET(r, $a), write))
  ensures acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  ensures TLock_state(r, lvl, x) == old(TLock_state(r, lvl, x)) + 1
{
  var z: Int
  var q: Int
  var k4: Int
  var $_levelVar_29: Int
  var $_levelVar_30: Int
  var $_levelVar_31: Int
  var $_levelVar_32: Int
  var $_levelVar_33: Int
  inhale $_levelVar_29 >= 0 && $_levelVar_29 > lvl
  assert $_levelVar_29 >= 0
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer9
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(21, $r, $lvl, $x)) } none < old[pre_infer9](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(21, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer9](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer9](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer9](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(21, $r, $lvl, $x) == old[pre_infer9](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- assume BEGIN ------------
  
  
  inhale q == old(TLock_state(r, lvl, x))
  
  // ------- assume END --------------
  
  
  
  // ------- open-region BEGIN -------
  
  
  label pre_open_region4
  assert $_levelVar_29 > lvl
  $_levelVar_30 := lvl
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- heap-read BEGIN ---------
  
  
  z := x.$memcell_$owner
  
  // ------- heap-read END -----------
  
  
  fold acc(TLock(r, lvl, x), write)
  assert TLock_state(r, lvl, x) == old[pre_open_region4](TLock_state(r, lvl, x))
  $_levelVar_31 := $_levelVar_29
  
  // ------- open-region END ---------
  
  
  
  // ------- Stabilising regions TLock (after open-region@188.3) BEGIN 
  
  
  label pre_stabilize23
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(22, $r, $lvl, $x)) } none < old[pre_stabilize23](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(22, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize23](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize23](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  ___silicon_hack407_havoc_all_TLock()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize23](perm(TLock($r, $lvl, $x))) ==> (TLock_state($r, $lvl, $x) in TLock_interferenceSet_hf(22, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize23](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(22, $r, $lvl, $x) == old[pre_stabilize23](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after open-region@188.3) END 
  
  
  
  // ------- use-atomic BEGIN --------
  
  
  label pre_use_atomic6
  assert perm(TLock_atomicity_context_fp(r, lvl, x)) == none
  assert $_levelVar_31 > lvl
  $_levelVar_32 := lvl
  exhale (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(q, d)) } ($a in comprehension_180_190(q, d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(q, d)) } ($a in comprehension_180_190(q, d)) ==> acc(TLock_TICKET(r, $a), write))
  
  // ------- Stabilising regions  (before use-atomic@194.3) BEGIN 
  
  
  label pre_stabilize24
  
  // ------- Stabilising regions  (before use-atomic@194.3) END 
  
  
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- Stabilising regions TLock (before use-atomic@194.3) BEGIN 
  
  
  label pre_stabilize25
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize25](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize25](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize25](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (before use-atomic@194.3) END 
  
  
  inhale (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(q, d)) } ($a in comprehension_180_190(q, d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(q, d)) } ($a in comprehension_180_190(q, d)) ==> acc(TLock_TICKET(r, $a), write))
  
  // ------- assert BEGIN ------------
  
  
  assert (z + 1 in comprehension_180_190(q, d))
  
  // ------- assert END --------------
  
  
  
  // ------- heap-write BEGIN --------
  
  
  x.$memcell_$owner := z + 1
  
  // ------- heap-write END ----------
  
  
  fold acc(TLock(r, lvl, x), write)
  assert old[pre_use_atomic6](TLock_state(r, lvl, x)) == TLock_state(r, lvl, x) || old[pre_use_atomic6](TLock_state(r, lvl, x)) < TLock_state(r, lvl, x) && (forall $a: Int :: ($a in comprehension_180_190(old[pre_use_atomic6](TLock_state(r, lvl, x)), TLock_state(r, lvl, x))) ==> ($a in comprehension_180_190(q, d)))
  $_levelVar_33 := $_levelVar_31
  
  // ------- use-atomic END ----------
  
  
  
  // ------- assert BEGIN ------------
  
  
  assert TLock_TICKET_T(r, old(TLock_state(r, lvl, x)) + 1) && acc(TLock_TICKET(r, old(TLock_state(r, lvl, x)) + 1), write)
  
  // ------- assert END --------------
  
  
  
  // ------- Stabilising regions TLock (after seq-comp@194.3) BEGIN 
  
  
  label pre_stabilize26
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(23, $r, $lvl, $x)) } none < old[pre_stabilize26](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(23, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize26](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize26](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  ___silicon_hack407_havoc_all_TLock()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize26](perm(TLock($r, $lvl, $x))) ==> (TLock_state($r, $lvl, $x) in TLock_interferenceSet_hf(23, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize26](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(23, $r, $lvl, $x) == old[pre_stabilize26](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after seq-comp@194.3) END 
  
  
}

method CAS(x: Ref, now: Int, thn: Int) returns (ret: Bool)
  requires acc(x.$memcell_$next, write) && true
  ensures (old(x.$memcell_$next) == now ? ret && (acc(x.$memcell_$next, write) && x.$memcell_$next == thn) : !ret && (acc(x.$memcell_$next, write) && x.$memcell_$next == old(x.$memcell_$next)))


method $_TLock_interpretation_stability_check(r: Ref, lvl: Int, x: Ref)
{
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  inhale acc(x.$memcell_$owner, write) && true && (acc(x.$memcell_$next, write) && true) && ((forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_21_190(x.$memcell_$next)) } ($a in comprehension_21_190(x.$memcell_$next)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_21_190(x.$memcell_$next)) } ($a in comprehension_21_190(x.$memcell_$next)) ==> acc(TLock_TICKET(r, $a), write)))
  
  // ------- Stabilising regions TLock (check stability of region interpretation) BEGIN 
  
  
  label pre_stabilize27
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize27](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize27](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize27](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (check stability of region interpretation) END 
  
  
  assert acc(x.$memcell_$owner, write) && true && (acc(x.$memcell_$next, write) && true) && ((forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_21_190(x.$memcell_$next)) } ($a in comprehension_21_190(x.$memcell_$next)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_21_190(x.$memcell_$next)) } ($a in comprehension_21_190(x.$memcell_$next)) ==> acc(TLock_TICKET(r, $a), write)))
}

method $_TLock_action_transitivity_check()
{
  var TICKET: Set[Int]
  var $_action_n_0_x: Int
  var $_action_m_0_x: Int
  var $_action_n_0_y: Int
  var $_action_m_0_y: Int
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState || $_action_n_0_x == aState && $_action_m_0_x == bState && $_action_n_0_x < $_action_m_0_x && (comprehension_180_190($_action_n_0_x, $_action_m_0_x) subset TICKET)
  inhale bState == cState || $_action_n_0_y == bState && $_action_m_0_y == cState && $_action_n_0_y < $_action_m_0_y && (comprehension_180_190($_action_n_0_y, $_action_m_0_y) subset TICKET)
  assert aState == cState || aState == aState && cState == cState && aState < cState && (comprehension_180_190(aState, cState) subset TICKET)
}

method $_test_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && ((forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_21_190(TLock_out0(r, lvl, x))) } ($a in comprehension_21_190(TLock_out0(r, lvl, x))) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_21_190(TLock_out0(r, lvl, x))) } ($a in comprehension_21_190(TLock_out0(r, lvl, x))) ==> acc(TLock_TICKET(r, $a), write)))
{
  var $_levelVar_35: Int
  inhale $_levelVar_35 >= 0 && $_levelVar_35 > lvl
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer11
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(25, $r, $lvl, $x)) } none < old[pre_infer11](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(25, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer11](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer11](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer11](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(25, $r, $lvl, $x) == old[pre_infer11](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions TLock (check stability of method condition) BEGIN 
  
  
  label pre_stabilize28
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize28](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize28](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize28](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (check stability of method condition) END 
  
  
  assert acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && ((forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_21_190(TLock_out0(r, lvl, x))) } ($a in comprehension_21_190(TLock_out0(r, lvl, x))) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_21_190(TLock_out0(r, lvl, x))) } ($a in comprehension_21_190(TLock_out0(r, lvl, x))) ==> acc(TLock_TICKET(r, $a), write)))
}

method $_test2_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref, ret1: Int, ret2: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && (TLock_TICKET_T(r, TLock_state(r, lvl, x)) && acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write))
{
  var $_levelVar_36: Int
  inhale $_levelVar_36 >= 0 && $_levelVar_36 > lvl
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer12
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(26, $r, $lvl, $x)) } none < old[pre_infer12](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(26, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer12](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer12](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer12](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(26, $r, $lvl, $x) == old[pre_infer12](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions TLock (check stability of method condition) BEGIN 
  
  
  label pre_stabilize29
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize29](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize29](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize29](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (check stability of method condition) END 
  
  
  assert acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && (TLock_TICKET_T(r, TLock_state(r, lvl, x)) && acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write))
}

method $_test3_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref, ret: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && (TLock_TICKET_T(r, TLock_state(r, lvl, x)) && acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write))
{
  var $_levelVar_37: Int
  var z: Int
  var q: Int
  inhale $_levelVar_37 >= 0 && $_levelVar_37 > lvl
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer13
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(27, $r, $lvl, $x)) } none < old[pre_infer13](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(27, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer13](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer13](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer13](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(27, $r, $lvl, $x) == old[pre_infer13](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions TLock (check stability of method condition) BEGIN 
  
  
  label pre_stabilize30
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize30](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize30](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize30](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (check stability of method condition) END 
  
  
  assert acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && (TLock_TICKET_T(r, TLock_state(r, lvl, x)) && acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write))
}

method $_test4_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref, ret: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && (TLock_TICKET_T(r, TLock_state(r, lvl, x)) && acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write)) && (TLock_TICKET_T(r, TLock_state(r, lvl, x) + 1) && acc(TLock_TICKET(r, TLock_state(r, lvl, x) + 1), write))
{
  var $_levelVar_38: Int
  var z: Int
  inhale $_levelVar_38 >= 0 && $_levelVar_38 > lvl
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer14
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(28, $r, $lvl, $x)) } none < old[pre_infer14](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(28, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer14](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer14](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer14](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(28, $r, $lvl, $x) == old[pre_infer14](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions TLock (check stability of method condition) BEGIN 
  
  
  label pre_stabilize31
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize31](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize31](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize31](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (check stability of method condition) END 
  
  
  assert acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && (TLock_TICKET_T(r, TLock_state(r, lvl, x)) && acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write)) && (TLock_TICKET_T(r, TLock_state(r, lvl, x) + 1) && acc(TLock_TICKET(r, TLock_state(r, lvl, x) + 1), write))
}

method $_test5_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref, d: Int, ret: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  requires TLock_state(r, lvl, x) < d
  requires (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> acc(TLock_TICKET(r, $a), write))
{
  var $_levelVar_39: Int
  inhale $_levelVar_39 >= 0 && $_levelVar_39 > lvl
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer15
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(29, $r, $lvl, $x)) } none < old[pre_infer15](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(29, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer15](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer15](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer15](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(29, $r, $lvl, $x) == old[pre_infer15](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions TLock (check stability of method condition) BEGIN 
  
  
  label pre_stabilize32
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize32](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize32](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize32](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (check stability of method condition) END 
  
  
  assert acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && TLock_state(r, lvl, x) < d && ((forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> acc(TLock_TICKET(r, $a), write)))
}

method $_test6_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref, d: Int, ret: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  requires TLock_state(r, lvl, x) < d
  requires (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> acc(TLock_TICKET(r, $a), write))
{
  var $_levelVar_40: Int
  var z: Int
  var q: Int
  inhale $_levelVar_40 >= 0 && $_levelVar_40 > lvl
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer16
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(30, $r, $lvl, $x)) } none < old[pre_infer16](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(30, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer16](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer16](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer16](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(30, $r, $lvl, $x) == old[pre_infer16](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions TLock (check stability of method condition) BEGIN 
  
  
  label pre_stabilize33
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize33](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize33](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize33](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (check stability of method condition) END 
  
  
  assert acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && TLock_state(r, lvl, x) < d && ((forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> acc(TLock_TICKET(r, $a), write)))
}

method $_test7_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref, d: Int, ret: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  requires TLock_state(r, lvl, x) < d
  requires (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> acc(TLock_TICKET(r, $a), write))
{
  var $_levelVar_41: Int
  var z: Int
  var q: Int
  inhale $_levelVar_41 >= 0 && $_levelVar_41 > lvl
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer17
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(31, $r, $lvl, $x)) } none < old[pre_infer17](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(31, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer17](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer17](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer17](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(31, $r, $lvl, $x) == old[pre_infer17](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions TLock (check stability of method condition) BEGIN 
  
  
  label pre_stabilize34
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize34](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize34](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize34](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (check stability of method condition) END 
  
  
  assert acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && TLock_state(r, lvl, x) < d && ((forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> acc(TLock_TICKET(r, $a), write)))
}

method $_test8_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref, d: Int, ret: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && (TLock_TICKET_T(r, d) && acc(TLock_TICKET(r, d), write))
  requires TLock_state(r, lvl, x) < d
{
  var $_levelVar_42: Int
  inhale $_levelVar_42 >= 0 && $_levelVar_42 > lvl
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer18
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(32, $r, $lvl, $x)) } none < old[pre_infer18](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(32, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer18](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer18](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer18](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(32, $r, $lvl, $x) == old[pre_infer18](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions TLock (check stability of method condition) BEGIN 
  
  
  label pre_stabilize35
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize35](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize35](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize35](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (check stability of method condition) END 
  
  
  assert acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && (TLock_TICKET_T(r, d) && acc(TLock_TICKET(r, d), write)) && TLock_state(r, lvl, x) < d
}

method $_test9_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref, d: Int, ret: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  requires TLock_state(r, lvl, x) < d
  requires (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> acc(TLock_TICKET(r, $a), write))
{
  var $_levelVar_43: Int
  var z: Int
  inhale $_levelVar_43 >= 0 && $_levelVar_43 > lvl
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer19
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(33, $r, $lvl, $x)) } none < old[pre_infer19](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(33, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer19](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer19](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer19](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(33, $r, $lvl, $x) == old[pre_infer19](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions TLock (check stability of method condition) BEGIN 
  
  
  label pre_stabilize36
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize36](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize36](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize36](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (check stability of method condition) END 
  
  
  assert acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && TLock_state(r, lvl, x) < d && ((forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> acc(TLock_TICKET(r, $a), write)))
}

method $_test10_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref, d: Int, ret: Int)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  requires TLock_state(r, lvl, x) + 1 < d
  requires (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> acc(TLock_TICKET(r, $a), write))
{
  var $_levelVar_44: Int
  var z: Int
  var q: Int
  inhale $_levelVar_44 >= 0 && $_levelVar_44 > lvl
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(TLock_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer20
  
  // Inferring interference all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in TLock_interferenceSet_df(34, $r, $lvl, $x)) } none < old[pre_infer20](perm(TLock($r, $lvl, $x))) ==> ($$_m in TLock_interferenceSet_hf(34, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer20](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_infer20](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == $$_m && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_infer20](perm(TLock($r, $lvl, $x))) ==> TLock_interferenceReference_hf(34, $r, $lvl, $x) == old[pre_infer20](TLock_state($r, $lvl, $x)))
  
  // ------- Inferring interference context TLock (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions TLock (check stability of method condition) BEGIN 
  
  
  label pre_stabilize37
  
  // Stabilising all instances of region TLock
  
  ___silicon_hack407_havoc_all_TLock()
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none < old[pre_stabilize37](perm(TLock($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==> (TLock_state($r, $lvl, $x) in TLock_atomicity_context_hf($r, $lvl, $x))) && (TLock_state($r, $lvl, $x) == old[pre_stabilize37](TLock_state($r, $lvl, $x)) || TLock_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize37](TLock_state($r, $lvl, $x)) && TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) && TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) && (forall $$a: Int :: { TLock_TICKET_T($r, $$a) } { ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) } ($$a in comprehension_180_190(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r, $lvl, $x))) ==> perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (check stability of method condition) END 
  
  
  assert acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) && TLock_state(r, lvl, x) + 1 < d && ((forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> TLock_TICKET_T(r, $a)) && (forall $a: Int :: { TLock_TICKET_T(r, $a) } { ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) } ($a in comprehension_180_190(TLock_state(r, lvl, x), d)) ==> acc(TLock_TICKET(r, $a), write)))
}