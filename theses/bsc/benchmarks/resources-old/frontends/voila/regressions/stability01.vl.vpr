domain Map[U, V] {
  
  function Map_keys(m: Map[U, V]): Set[U]
  
  function Map_card(m: Map[U, V]): Int
  
  function Map_lookup(m: Map[U, V], u: U): V
  
  function Map_values(m: Map[U, V]): Set[V]
  
  function Map_empty(): Map[U, V]
  
  function Map_build(m: Map[U, V], u: U, v: V): Map[U, V]
  
  function Map_equal(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_disjoint(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_union(m1: Map[U, V], m2: Map[U, V]): Map[U, V]
  
  axiom Map_card_non_neg {
    (forall m: Map[U, V] :: { Map_card(m) } 0 <= Map_card(m))
  }
  
  axiom Map_card_domain {
    (forall m: Map[U, V] :: { |Map_keys(m)| } |Map_keys(m)| == Map_card(m))
  }
  
  axiom Map_values_def {
    (forall m: Map[U, V], v: V :: { (v in Map_values(m)) } (v in Map_values(m)) == (exists u: U :: (u in Map_keys(m)) && v == Map_lookup(m, u)))
  }
  
  axiom Map_empty_1 {
    (forall u: U :: { (u in Map_keys(Map_empty())) } !((u in Map_keys(Map_empty()))))
  }
  
  axiom Map_empty_2 {
    (forall m: Map[U, V] :: { Map_card(m) } (Map_card(m) == 0) == (m == Map_empty()) && (Map_card(m) != 0 ==> (exists u: U :: (u in Map_keys(m)))))
  }
  
  axiom Map_build_1 {
    (forall m: Map[U, V], u1: U, u2: U, v: V :: { (u2 in Map_keys(Map_build(m, u1, v))) } (u2 == u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) && Map_lookup(Map_build(m, u1, v), u1) == v) && (u2 != u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) == (u2 in Map_keys(m)) && Map_lookup(Map_build(m, u1, v), u2) == Map_lookup(m, u2)))
  }
  
  axiom Map_build_2 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } (u in Map_keys(m)) ==> Map_card(Map_build(m, u, v)) == Map_card(m))
  }
  
  axiom Map_build_3 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } !((u in Map_keys(m))) ==> Map_card(Map_build(m, u, v)) == Map_card(m) + 1)
  }
  
  axiom Map_equality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } (u in Map_keys(m1)) == (u in Map_keys(m2))))
  }
  
  axiom Map_extensionality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) ==> m1 == m2)
  }
  
  axiom Map_disjoint_def {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_disjoint(m1, m2) } Map_disjoint(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } !((u in Map_keys(m1))) || !((u in Map_keys(m2)))))
  }
  
  axiom Map_union_1 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { (u in Map_keys(Map_union(m1, m2))) } { (u in (Map_keys(m1) union Map_keys(m2))) } Map_disjoint(m1, m2) ==> (u in Map_keys(Map_union(m1, m2))) == (u in (Map_keys(m1) union Map_keys(m2))))
  }
  
  axiom Map_union_2 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m1)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m1, u))
  }
  
  axiom Map_union_3 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m2)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m2, u))
  }
}

domain trigger_functions {
  
  function Triple_state_T(r: Ref, lvl: Int, t: Ref): Bool
}

domain interferenceReference_Domain {
  
  function Triple_interferenceReference_df($p0: Int, r: Ref, lvl: Int, t: Ref): Bool
}

domain interferenceSet_Domain {
  
  function Triple_interferenceSet_df($p0: Int, r: Ref, lvl: Int, t: Ref): Set[Int]
}

domain atomicity_context_Domain {
  
  function Triple_atomicity_context_df(r: Ref, lvl: Int, t: Ref): Bool
}

field $diamond: Int

field $stepFrom_int: Int

field $stepTo_int: Int

field $triple_$f1: Int

field $triple_$f2: Int

field $triple_$f3: Int

function IntSet(): Set[Int]
  ensures (forall n: Int :: (n in result))


function NatSet(): Set[Int]
  ensures (forall n: Int :: 0 <= n == (n in result))


function Triple_atomicity_context_hf(r: Ref, lvl: Int, t: Ref): Set[Int]
  requires acc(Triple_atomicity_context_fp(r, lvl, t), write)
  ensures [Triple_atomicity_context_df(r, lvl, t), true]


function Triple_interferenceSet_hf($p0: Int, r: Ref, lvl: Int, t: Ref): Set[Int]
  requires acc(Triple_interferenceContext_fp(r, lvl, t), write)
  ensures [(forall $_m: Int :: { ($_m in result) } ($_m in result) ==> ($_m in Triple_interferenceSet_df($p0, r, lvl, t))), true]


function Triple_interferenceReference_hf($p0: Int, r: Ref, lvl: Int, t: Ref): Int
  requires acc(Triple_interferenceContext_fp(r, lvl, t), write)
  ensures [Triple_interferenceReference_df($p0, r, lvl, t), true]


function Triple_sk_$_action_n(r: Ref, lvl: Int, t: Ref): Int
  requires acc(Triple_sk_fp(), write)


function Triple_sk_$_action_m(r: Ref, lvl: Int, t: Ref): Int
  requires acc(Triple_sk_fp(), write)


function Triple_out0(r: Ref, lvl: Int, t: Ref): Int
  requires acc(Triple(r, lvl, t), write)
{
  (unfolding acc(Triple(r, lvl, t), write) in t.$triple_$f2)
}

function Triple_out1(r: Ref, lvl: Int, t: Ref): Int
  requires acc(Triple(r, lvl, t), write)
{
  (unfolding acc(Triple(r, lvl, t), write) in t.$triple_$f3)
}

function Triple_state(r: Ref, lvl: Int, t: Ref): Int
  requires acc(Triple(r, lvl, t), write)
  ensures [Triple_state_T(r, lvl, t), true]
{
  (unfolding acc(Triple(r, lvl, t), write) in t.$triple_$f1)
}

predicate Triple_G($r: Ref) 

predicate Triple_atomicity_context_fp(r: Ref, lvl: Int, t: Ref) 

predicate Triple_interferenceContext_fp(r: Ref, lvl: Int, t: Ref) 

predicate Triple_sk_fp() 

predicate Triple(r: Ref, lvl: Int, t: Ref) {
  acc(t.$triple_$f1, write) && true && (acc(t.$triple_$f2, write) && true) && (acc(t.$triple_$f3, write) && true)
}

method havoc_Bool() returns ($r: Bool)


method havoc_Ref() returns ($r: Ref)


method havoc_Int() returns ($r: Int)


method ___silicon_hack407_havoc_all_Triple()


method ___silicon_hack407_havoc_all_Triple_interferenceContext_fp()


method test01(r: Ref, lvl: Int, t: Ref)
  requires acc(Triple(r, lvl, t), write) && (lvl >= 0 && true) && acc(Triple_G(r), write)
{
  var $_levelVar_0: Int
  inhale $_levelVar_0 >= 0 && $_levelVar_0 > lvl
  assert $_levelVar_0 >= 0
  inhale acc(Triple_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $t: Ref :: acc(Triple_interferenceContext_fp($r, $lvl, $t), write))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer0
  
  // Inferring interference all instances of region Triple
  
  ___silicon_hack407_havoc_all_Triple_interferenceContext_fp()
  exhale acc(Triple_sk_fp(), write)
  inhale acc(Triple_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: (forall $$_m: Int :: { ($$_m in Triple_interferenceSet_df(1, $r, $lvl, $t)) } none < old[pre_infer0](perm(Triple($r, $lvl, $t))) ==> ($$_m in Triple_interferenceSet_hf(1, $r, $lvl, $t)) == ((none < perm($r.$diamond) && none < perm(Triple_atomicity_context_fp($r, $lvl, $t)) ==> ($$_m in Triple_atomicity_context_hf($r, $lvl, $t))) && ($$_m == old[pre_infer0](Triple_state($r, $lvl, $t)) || Triple_sk_$_action_n($r, $lvl, $t) == old[pre_infer0](Triple_state($r, $lvl, $t)) && Triple_sk_$_action_m($r, $lvl, $t) == $$_m && true && perm(Triple_G($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: none < old[pre_infer0](perm(Triple($r, $lvl, $t))) ==> Triple_interferenceReference_hf(1, $r, $lvl, $t) == old[pre_infer0](Triple_state($r, $lvl, $t)))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) END 
  
  
  inhale false
}

method test02(r: Ref, lvl: Int, t: Ref, abs: Int)
  requires acc(Triple(r, lvl, t), write) && (lvl >= 0 && Triple_state(r, lvl, t) == abs) && acc(Triple_G(r), write)
{
  var $_levelVar_1: Int
  inhale $_levelVar_1 >= 0 && $_levelVar_1 > lvl
  assert $_levelVar_1 >= 0
  inhale acc(Triple_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $t: Ref :: acc(Triple_interferenceContext_fp($r, $lvl, $t), write))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer
  
  // Inferring interference all instances of region Triple
  
  ___silicon_hack407_havoc_all_Triple_interferenceContext_fp()
  exhale acc(Triple_sk_fp(), write)
  inhale acc(Triple_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: (forall $$_m: Int :: { ($$_m in Triple_interferenceSet_df(2, $r, $lvl, $t)) } none < old[pre_infer](perm(Triple($r, $lvl, $t))) ==> ($$_m in Triple_interferenceSet_hf(2, $r, $lvl, $t)) == ((none < perm($r.$diamond) && none < perm(Triple_atomicity_context_fp($r, $lvl, $t)) ==> ($$_m in Triple_atomicity_context_hf($r, $lvl, $t))) && ($$_m == old[pre_infer](Triple_state($r, $lvl, $t)) || Triple_sk_$_action_n($r, $lvl, $t) == old[pre_infer](Triple_state($r, $lvl, $t)) && Triple_sk_$_action_m($r, $lvl, $t) == $$_m && true && perm(Triple_G($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: none < old[pre_infer](perm(Triple($r, $lvl, $t))) ==> Triple_interferenceReference_hf(2, $r, $lvl, $t) == old[pre_infer](Triple_state($r, $lvl, $t)))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) END 
  
  
  inhale false
}

method test03(r: Ref, lvl: Int, t: Ref, abs: Int)
  requires acc(Triple(r, lvl, t), write) && (lvl >= 0 && Triple_state(r, lvl, t) == abs)
{
  var $_levelVar_2: Int
  inhale $_levelVar_2 >= 0 && $_levelVar_2 > lvl
  assert $_levelVar_2 >= 0
  inhale acc(Triple_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $t: Ref :: acc(Triple_interferenceContext_fp($r, $lvl, $t), write))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer2
  
  // Inferring interference all instances of region Triple
  
  ___silicon_hack407_havoc_all_Triple_interferenceContext_fp()
  exhale acc(Triple_sk_fp(), write)
  inhale acc(Triple_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: (forall $$_m: Int :: { ($$_m in Triple_interferenceSet_df(3, $r, $lvl, $t)) } none < old[pre_infer2](perm(Triple($r, $lvl, $t))) ==> ($$_m in Triple_interferenceSet_hf(3, $r, $lvl, $t)) == ((none < perm($r.$diamond) && none < perm(Triple_atomicity_context_fp($r, $lvl, $t)) ==> ($$_m in Triple_atomicity_context_hf($r, $lvl, $t))) && ($$_m == old[pre_infer2](Triple_state($r, $lvl, $t)) || Triple_sk_$_action_n($r, $lvl, $t) == old[pre_infer2](Triple_state($r, $lvl, $t)) && Triple_sk_$_action_m($r, $lvl, $t) == $$_m && true && perm(Triple_G($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: none < old[pre_infer2](perm(Triple($r, $lvl, $t))) ==> Triple_interferenceReference_hf(3, $r, $lvl, $t) == old[pre_infer2](Triple_state($r, $lvl, $t)))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) END 
  
  
  inhale false
}

method test04(r: Ref, lvl: Int, t: Ref, out1: Int)
  requires acc(Triple(r, lvl, t), write) && (lvl >= 0 && Triple_out0(r, lvl, t) == out1) && acc(Triple_G(r), write)
{
  var $_levelVar_3: Int
  inhale $_levelVar_3 >= 0 && $_levelVar_3 > lvl
  assert $_levelVar_3 >= 0
  inhale acc(Triple_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $t: Ref :: acc(Triple_interferenceContext_fp($r, $lvl, $t), write))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer3
  
  // Inferring interference all instances of region Triple
  
  ___silicon_hack407_havoc_all_Triple_interferenceContext_fp()
  exhale acc(Triple_sk_fp(), write)
  inhale acc(Triple_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: (forall $$_m: Int :: { ($$_m in Triple_interferenceSet_df(4, $r, $lvl, $t)) } none < old[pre_infer3](perm(Triple($r, $lvl, $t))) ==> ($$_m in Triple_interferenceSet_hf(4, $r, $lvl, $t)) == ((none < perm($r.$diamond) && none < perm(Triple_atomicity_context_fp($r, $lvl, $t)) ==> ($$_m in Triple_atomicity_context_hf($r, $lvl, $t))) && ($$_m == old[pre_infer3](Triple_state($r, $lvl, $t)) || Triple_sk_$_action_n($r, $lvl, $t) == old[pre_infer3](Triple_state($r, $lvl, $t)) && Triple_sk_$_action_m($r, $lvl, $t) == $$_m && true && perm(Triple_G($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: none < old[pre_infer3](perm(Triple($r, $lvl, $t))) ==> Triple_interferenceReference_hf(4, $r, $lvl, $t) == old[pre_infer3](Triple_state($r, $lvl, $t)))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) END 
  
  
  inhale false
}

method test05(r: Ref, lvl: Int, t: Ref, out2: Int)
  requires acc(Triple(r, lvl, t), write) && (lvl >= 0 && Triple_out1(r, lvl, t) == out2) && acc(Triple_G(r), write)
{
  var $_levelVar_4: Int
  inhale $_levelVar_4 >= 0 && $_levelVar_4 > lvl
  assert $_levelVar_4 >= 0
  inhale acc(Triple_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $t: Ref :: acc(Triple_interferenceContext_fp($r, $lvl, $t), write))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer4
  
  // Inferring interference all instances of region Triple
  
  ___silicon_hack407_havoc_all_Triple_interferenceContext_fp()
  exhale acc(Triple_sk_fp(), write)
  inhale acc(Triple_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: (forall $$_m: Int :: { ($$_m in Triple_interferenceSet_df(5, $r, $lvl, $t)) } none < old[pre_infer4](perm(Triple($r, $lvl, $t))) ==> ($$_m in Triple_interferenceSet_hf(5, $r, $lvl, $t)) == ((none < perm($r.$diamond) && none < perm(Triple_atomicity_context_fp($r, $lvl, $t)) ==> ($$_m in Triple_atomicity_context_hf($r, $lvl, $t))) && ($$_m == old[pre_infer4](Triple_state($r, $lvl, $t)) || Triple_sk_$_action_n($r, $lvl, $t) == old[pre_infer4](Triple_state($r, $lvl, $t)) && Triple_sk_$_action_m($r, $lvl, $t) == $$_m && true && perm(Triple_G($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: none < old[pre_infer4](perm(Triple($r, $lvl, $t))) ==> Triple_interferenceReference_hf(5, $r, $lvl, $t) == old[pre_infer4](Triple_state($r, $lvl, $t)))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) END 
  
  
  inhale false
}

method $_Triple_interpretation_stability_check(r: Ref, lvl: Int, t: Ref)
{
  inhale acc(Triple_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $t: Ref :: acc(Triple_interferenceContext_fp($r, $lvl, $t), write))
  inhale acc(t.$triple_$f1, write) && true && (acc(t.$triple_$f2, write) && true) && (acc(t.$triple_$f3, write) && true)
  
  // ------- Stabilising regions Triple (check stability of region interpretation) BEGIN 
  
  
  label pre_stabilize0
  
  // Stabilising all instances of region Triple
  
  ___silicon_hack407_havoc_all_Triple()
  exhale acc(Triple_sk_fp(), write)
  inhale acc(Triple_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: none < old[pre_stabilize0](perm(Triple($r, $lvl, $t))) ==> (none < perm($r.$diamond) && none < perm(Triple_atomicity_context_fp($r, $lvl, $t)) ==> (Triple_state($r, $lvl, $t) in Triple_atomicity_context_hf($r, $lvl, $t))) && (Triple_state($r, $lvl, $t) == old[pre_stabilize0](Triple_state($r, $lvl, $t)) || Triple_sk_$_action_n($r, $lvl, $t) == old[pre_stabilize0](Triple_state($r, $lvl, $t)) && Triple_sk_$_action_m($r, $lvl, $t) == Triple_state($r, $lvl, $t) && true && perm(Triple_G($r)) == none))
  
  // ------- Stabilising regions Triple (check stability of region interpretation) END 
  
  
  assert acc(t.$triple_$f1, write) && true && (acc(t.$triple_$f2, write) && true) && (acc(t.$triple_$f3, write) && true)
}

method $_Triple_action_transitivity_check()
{
  var G: Bool
  var $_action_n_0_x: Int
  var $_action_m_0_x: Int
  var $_action_n_0_y: Int
  var $_action_m_0_y: Int
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState || $_action_n_0_x == aState && $_action_m_0_x == bState && true && G
  inhale bState == cState || $_action_n_0_y == bState && $_action_m_0_y == cState && true && G
  assert aState == cState || aState == aState && cState == cState && true && G
}

method $_test01_condition_stability_precondition_check(r: Ref, lvl: Int, t: Ref)
  requires acc(Triple(r, lvl, t), write) && (lvl >= 0 && true) && acc(Triple_G(r), write)
{
  var $_levelVar_5: Int
  inhale $_levelVar_5 >= 0 && $_levelVar_5 > lvl
  inhale acc(Triple_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $t: Ref :: acc(Triple_interferenceContext_fp($r, $lvl, $t), write))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer5
  
  // Inferring interference all instances of region Triple
  
  ___silicon_hack407_havoc_all_Triple_interferenceContext_fp()
  exhale acc(Triple_sk_fp(), write)
  inhale acc(Triple_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: (forall $$_m: Int :: { ($$_m in Triple_interferenceSet_df(6, $r, $lvl, $t)) } none < old[pre_infer5](perm(Triple($r, $lvl, $t))) ==> ($$_m in Triple_interferenceSet_hf(6, $r, $lvl, $t)) == ((none < perm($r.$diamond) && none < perm(Triple_atomicity_context_fp($r, $lvl, $t)) ==> ($$_m in Triple_atomicity_context_hf($r, $lvl, $t))) && ($$_m == old[pre_infer5](Triple_state($r, $lvl, $t)) || Triple_sk_$_action_n($r, $lvl, $t) == old[pre_infer5](Triple_state($r, $lvl, $t)) && Triple_sk_$_action_m($r, $lvl, $t) == $$_m && true && perm(Triple_G($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: none < old[pre_infer5](perm(Triple($r, $lvl, $t))) ==> Triple_interferenceReference_hf(6, $r, $lvl, $t) == old[pre_infer5](Triple_state($r, $lvl, $t)))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Triple (check stability of method condition) BEGIN 
  
  
  label pre_stabilize
  
  // Stabilising all instances of region Triple
  
  ___silicon_hack407_havoc_all_Triple()
  exhale acc(Triple_sk_fp(), write)
  inhale acc(Triple_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: none < old[pre_stabilize](perm(Triple($r, $lvl, $t))) ==> (none < perm($r.$diamond) && none < perm(Triple_atomicity_context_fp($r, $lvl, $t)) ==> (Triple_state($r, $lvl, $t) in Triple_atomicity_context_hf($r, $lvl, $t))) && (Triple_state($r, $lvl, $t) == old[pre_stabilize](Triple_state($r, $lvl, $t)) || Triple_sk_$_action_n($r, $lvl, $t) == old[pre_stabilize](Triple_state($r, $lvl, $t)) && Triple_sk_$_action_m($r, $lvl, $t) == Triple_state($r, $lvl, $t) && true && perm(Triple_G($r)) == none))
  
  // ------- Stabilising regions Triple (check stability of method condition) END 
  
  
  assert acc(Triple(r, lvl, t), write) && (lvl >= 0 && true) && acc(Triple_G(r), write)
}

method $_test02_condition_stability_precondition_check(r: Ref, lvl: Int, t: Ref, abs: Int)
  requires acc(Triple(r, lvl, t), write) && (lvl >= 0 && Triple_state(r, lvl, t) == abs) && acc(Triple_G(r), write)
{
  var $_levelVar_6: Int
  inhale $_levelVar_6 >= 0 && $_levelVar_6 > lvl
  inhale acc(Triple_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $t: Ref :: acc(Triple_interferenceContext_fp($r, $lvl, $t), write))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer6
  
  // Inferring interference all instances of region Triple
  
  ___silicon_hack407_havoc_all_Triple_interferenceContext_fp()
  exhale acc(Triple_sk_fp(), write)
  inhale acc(Triple_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: (forall $$_m: Int :: { ($$_m in Triple_interferenceSet_df(7, $r, $lvl, $t)) } none < old[pre_infer6](perm(Triple($r, $lvl, $t))) ==> ($$_m in Triple_interferenceSet_hf(7, $r, $lvl, $t)) == ((none < perm($r.$diamond) && none < perm(Triple_atomicity_context_fp($r, $lvl, $t)) ==> ($$_m in Triple_atomicity_context_hf($r, $lvl, $t))) && ($$_m == old[pre_infer6](Triple_state($r, $lvl, $t)) || Triple_sk_$_action_n($r, $lvl, $t) == old[pre_infer6](Triple_state($r, $lvl, $t)) && Triple_sk_$_action_m($r, $lvl, $t) == $$_m && true && perm(Triple_G($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: none < old[pre_infer6](perm(Triple($r, $lvl, $t))) ==> Triple_interferenceReference_hf(7, $r, $lvl, $t) == old[pre_infer6](Triple_state($r, $lvl, $t)))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Triple (check stability of method condition) BEGIN 
  
  
  label pre_stabilize2
  
  // Stabilising all instances of region Triple
  
  ___silicon_hack407_havoc_all_Triple()
  exhale acc(Triple_sk_fp(), write)
  inhale acc(Triple_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: none < old[pre_stabilize2](perm(Triple($r, $lvl, $t))) ==> (none < perm($r.$diamond) && none < perm(Triple_atomicity_context_fp($r, $lvl, $t)) ==> (Triple_state($r, $lvl, $t) in Triple_atomicity_context_hf($r, $lvl, $t))) && (Triple_state($r, $lvl, $t) == old[pre_stabilize2](Triple_state($r, $lvl, $t)) || Triple_sk_$_action_n($r, $lvl, $t) == old[pre_stabilize2](Triple_state($r, $lvl, $t)) && Triple_sk_$_action_m($r, $lvl, $t) == Triple_state($r, $lvl, $t) && true && perm(Triple_G($r)) == none))
  
  // ------- Stabilising regions Triple (check stability of method condition) END 
  
  
  assert acc(Triple(r, lvl, t), write) && (lvl >= 0 && Triple_state(r, lvl, t) == abs) && acc(Triple_G(r), write)
}

method $_test03_condition_stability_precondition_check(r: Ref, lvl: Int, t: Ref, abs: Int)
  requires acc(Triple(r, lvl, t), write) && (lvl >= 0 && Triple_state(r, lvl, t) == abs)
{
  var $_levelVar_7: Int
  inhale $_levelVar_7 >= 0 && $_levelVar_7 > lvl
  inhale acc(Triple_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $t: Ref :: acc(Triple_interferenceContext_fp($r, $lvl, $t), write))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer7
  
  // Inferring interference all instances of region Triple
  
  ___silicon_hack407_havoc_all_Triple_interferenceContext_fp()
  exhale acc(Triple_sk_fp(), write)
  inhale acc(Triple_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: (forall $$_m: Int :: { ($$_m in Triple_interferenceSet_df(8, $r, $lvl, $t)) } none < old[pre_infer7](perm(Triple($r, $lvl, $t))) ==> ($$_m in Triple_interferenceSet_hf(8, $r, $lvl, $t)) == ((none < perm($r.$diamond) && none < perm(Triple_atomicity_context_fp($r, $lvl, $t)) ==> ($$_m in Triple_atomicity_context_hf($r, $lvl, $t))) && ($$_m == old[pre_infer7](Triple_state($r, $lvl, $t)) || Triple_sk_$_action_n($r, $lvl, $t) == old[pre_infer7](Triple_state($r, $lvl, $t)) && Triple_sk_$_action_m($r, $lvl, $t) == $$_m && true && perm(Triple_G($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: none < old[pre_infer7](perm(Triple($r, $lvl, $t))) ==> Triple_interferenceReference_hf(8, $r, $lvl, $t) == old[pre_infer7](Triple_state($r, $lvl, $t)))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Triple (check stability of method condition) BEGIN 
  
  
  label pre_stabilize3
  
  // Stabilising all instances of region Triple
  
  ___silicon_hack407_havoc_all_Triple()
  exhale acc(Triple_sk_fp(), write)
  inhale acc(Triple_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: none < old[pre_stabilize3](perm(Triple($r, $lvl, $t))) ==> (none < perm($r.$diamond) && none < perm(Triple_atomicity_context_fp($r, $lvl, $t)) ==> (Triple_state($r, $lvl, $t) in Triple_atomicity_context_hf($r, $lvl, $t))) && (Triple_state($r, $lvl, $t) == old[pre_stabilize3](Triple_state($r, $lvl, $t)) || Triple_sk_$_action_n($r, $lvl, $t) == old[pre_stabilize3](Triple_state($r, $lvl, $t)) && Triple_sk_$_action_m($r, $lvl, $t) == Triple_state($r, $lvl, $t) && true && perm(Triple_G($r)) == none))
  
  // ------- Stabilising regions Triple (check stability of method condition) END 
  
  
  assert acc(Triple(r, lvl, t), write) && (lvl >= 0 && Triple_state(r, lvl, t) == abs)
}

method $_test04_condition_stability_precondition_check(r: Ref, lvl: Int, t: Ref, out1: Int)
  requires acc(Triple(r, lvl, t), write) && (lvl >= 0 && Triple_out0(r, lvl, t) == out1) && acc(Triple_G(r), write)
{
  var $_levelVar_8: Int
  inhale $_levelVar_8 >= 0 && $_levelVar_8 > lvl
  inhale acc(Triple_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $t: Ref :: acc(Triple_interferenceContext_fp($r, $lvl, $t), write))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer8
  
  // Inferring interference all instances of region Triple
  
  ___silicon_hack407_havoc_all_Triple_interferenceContext_fp()
  exhale acc(Triple_sk_fp(), write)
  inhale acc(Triple_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: (forall $$_m: Int :: { ($$_m in Triple_interferenceSet_df(9, $r, $lvl, $t)) } none < old[pre_infer8](perm(Triple($r, $lvl, $t))) ==> ($$_m in Triple_interferenceSet_hf(9, $r, $lvl, $t)) == ((none < perm($r.$diamond) && none < perm(Triple_atomicity_context_fp($r, $lvl, $t)) ==> ($$_m in Triple_atomicity_context_hf($r, $lvl, $t))) && ($$_m == old[pre_infer8](Triple_state($r, $lvl, $t)) || Triple_sk_$_action_n($r, $lvl, $t) == old[pre_infer8](Triple_state($r, $lvl, $t)) && Triple_sk_$_action_m($r, $lvl, $t) == $$_m && true && perm(Triple_G($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: none < old[pre_infer8](perm(Triple($r, $lvl, $t))) ==> Triple_interferenceReference_hf(9, $r, $lvl, $t) == old[pre_infer8](Triple_state($r, $lvl, $t)))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Triple (check stability of method condition) BEGIN 
  
  
  label pre_stabilize4
  
  // Stabilising all instances of region Triple
  
  ___silicon_hack407_havoc_all_Triple()
  exhale acc(Triple_sk_fp(), write)
  inhale acc(Triple_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: none < old[pre_stabilize4](perm(Triple($r, $lvl, $t))) ==> (none < perm($r.$diamond) && none < perm(Triple_atomicity_context_fp($r, $lvl, $t)) ==> (Triple_state($r, $lvl, $t) in Triple_atomicity_context_hf($r, $lvl, $t))) && (Triple_state($r, $lvl, $t) == old[pre_stabilize4](Triple_state($r, $lvl, $t)) || Triple_sk_$_action_n($r, $lvl, $t) == old[pre_stabilize4](Triple_state($r, $lvl, $t)) && Triple_sk_$_action_m($r, $lvl, $t) == Triple_state($r, $lvl, $t) && true && perm(Triple_G($r)) == none))
  
  // ------- Stabilising regions Triple (check stability of method condition) END 
  
  
  assert acc(Triple(r, lvl, t), write) && (lvl >= 0 && Triple_out0(r, lvl, t) == out1) && acc(Triple_G(r), write)
}

method $_test05_condition_stability_precondition_check(r: Ref, lvl: Int, t: Ref, out2: Int)
  requires acc(Triple(r, lvl, t), write) && (lvl >= 0 && Triple_out1(r, lvl, t) == out2) && acc(Triple_G(r), write)
{
  var $_levelVar_9: Int
  inhale $_levelVar_9 >= 0 && $_levelVar_9 > lvl
  inhale acc(Triple_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $t: Ref :: acc(Triple_interferenceContext_fp($r, $lvl, $t), write))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer9
  
  // Inferring interference all instances of region Triple
  
  ___silicon_hack407_havoc_all_Triple_interferenceContext_fp()
  exhale acc(Triple_sk_fp(), write)
  inhale acc(Triple_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: (forall $$_m: Int :: { ($$_m in Triple_interferenceSet_df(10, $r, $lvl, $t)) } none < old[pre_infer9](perm(Triple($r, $lvl, $t))) ==> ($$_m in Triple_interferenceSet_hf(10, $r, $lvl, $t)) == ((none < perm($r.$diamond) && none < perm(Triple_atomicity_context_fp($r, $lvl, $t)) ==> ($$_m in Triple_atomicity_context_hf($r, $lvl, $t))) && ($$_m == old[pre_infer9](Triple_state($r, $lvl, $t)) || Triple_sk_$_action_n($r, $lvl, $t) == old[pre_infer9](Triple_state($r, $lvl, $t)) && Triple_sk_$_action_m($r, $lvl, $t) == $$_m && true && perm(Triple_G($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: none < old[pre_infer9](perm(Triple($r, $lvl, $t))) ==> Triple_interferenceReference_hf(10, $r, $lvl, $t) == old[pre_infer9](Triple_state($r, $lvl, $t)))
  
  // ------- Inferring interference context Triple (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Triple (check stability of method condition) BEGIN 
  
  
  label pre_stabilize5
  
  // Stabilising all instances of region Triple
  
  ___silicon_hack407_havoc_all_Triple()
  exhale acc(Triple_sk_fp(), write)
  inhale acc(Triple_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $t: Ref [Triple($r, $lvl, $t)] :: none < old[pre_stabilize5](perm(Triple($r, $lvl, $t))) ==> (none < perm($r.$diamond) && none < perm(Triple_atomicity_context_fp($r, $lvl, $t)) ==> (Triple_state($r, $lvl, $t) in Triple_atomicity_context_hf($r, $lvl, $t))) && (Triple_state($r, $lvl, $t) == old[pre_stabilize5](Triple_state($r, $lvl, $t)) || Triple_sk_$_action_n($r, $lvl, $t) == old[pre_stabilize5](Triple_state($r, $lvl, $t)) && Triple_sk_$_action_m($r, $lvl, $t) == Triple_state($r, $lvl, $t) && true && perm(Triple_G($r)) == none))
  
  // ------- Stabilising regions Triple (check stability of method condition) END 
  
  
  assert acc(Triple(r, lvl, t), write) && (lvl >= 0 && Triple_out1(r, lvl, t) == out2) && acc(Triple_G(r), write)
}