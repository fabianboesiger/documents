// Generated on 2021-03-23 at 23:42:21
domain TYPE {
  
  unique function class_Main(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_Worker(): TYPE
  
  unique function class_Queue(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Main_directSuperclass {
    directSuperclass(class_Main()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Worker_directSuperclass {
    directSuperclass(class_Worker()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Queue_directSuperclass {
    directSuperclass(class_Queue()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field Main_q1: Ref

//  a field 
field Main_q2: Ref

//  a field 
field Worker_q1: Ref

//  a field 
field Worker_q2: Ref

//  a field 
field Queue_data: Int

//  a field 
field Queue_used: Bool

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


predicate Worker_joinToken_EncodedGlobalVariables(diz: Ref, globals: Ref) 

predicate Worker_idleToken_EncodedGlobalVariables(diz: Ref, globals: Ref) 

predicate Queue_lock_held_EncodedGlobalVariables(diz: Ref, globals: Ref) 

predicate Queue_lock_invariant_EncodedGlobalVariables(diz: Ref, globals: Ref) {
  diz != null && (acc(diz.Queue_used, write) && acc(diz.Queue_data, write))
}

method Main___contract_unsatisfiable__Main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Main_Main_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Main()
  ensures acc(sys__result.Main_q1, wildcard)
  ensures sys__result.Main_q1 != null
  ensures acc(sys__result.Main_q2, wildcard)
  ensures sys__result.Main_q2 != null
{
  var __flatten_3__3: Ref
  var __flatten_1__2: Ref
  var diz__1: Ref
  diz__1 := new(Main_q1, Main_q2)
  inhale type_of(diz__1) == class_Main()
  __flatten_1__2 := Queue_Queue_EncodedGlobalVariables(globals)
  diz__1.Main_q1 := __flatten_1__2
  __flatten_3__3 := Queue_Queue_EncodedGlobalVariables(globals)
  diz__1.Main_q2 := __flatten_3__3
  Queue_put_EncodedGlobalVariables_Integer(diz__1.Main_q1, globals, 1)
  Queue_put_EncodedGlobalVariables_Integer(diz__1.Main_q2, globals, 2)
  sys__result := diz__1
  // assert
  assert sys__result != null && type_of(sys__result) == class_Main() && acc(sys__result.Main_q1, wildcard) && sys__result.Main_q1 != null && acc(sys__result.Main_q2, wildcard) && sys__result.Main_q2 != null
  inhale false
}

method Main___contract_unsatisfiable__main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && (acc(diz.Main_q1, wildcard) && diz.Main_q1 != null && acc(diz.Main_q2, wildcard) && diz.Main_q2 != null)
  // assert
  assert false
  inhale false
}

method Main_main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.Main_q1, wildcard)
  requires diz.Main_q1 != null
  requires acc(diz.Main_q2, wildcard)
  requires diz.Main_q2 != null
{
  var w1__4: Ref
  var w2__5: Ref
  w1__4 := Worker_Worker_EncodedGlobalVariables_Queue_Queue(globals, diz.Main_q1, diz.Main_q2)
  w2__5 := Worker_Worker_EncodedGlobalVariables_Queue_Queue(globals, diz.Main_q2, diz.Main_q1)
  Worker_forkOperator_EncodedGlobalVariables(w1__4, globals)
  Worker_forkOperator_EncodedGlobalVariables(w2__5, globals)
  Worker_joinOperator_EncodedGlobalVariables(w1__4, globals)
  Worker_joinOperator_EncodedGlobalVariables(w2__5, globals)
}

method Worker___contract_unsatisfiable__Worker_EncodedGlobalVariables_Queue_Queue(diz: Ref, globals: Ref, q1: Ref, q2: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Worker_Worker_EncodedGlobalVariables_Queue_Queue(globals: Ref, q1: Ref, q2: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Worker()
  ensures acc(Worker_idleToken_EncodedGlobalVariables(sys__result, globals), write)
  ensures acc(sys__result.Worker_q1, wildcard)
  ensures sys__result.Worker_q1 == q1
  ensures acc(sys__result.Worker_q2, wildcard)
  ensures sys__result.Worker_q2 == q2
{
  var diz__6: Ref
  diz__6 := new(Worker_q1, Worker_q2)
  inhale type_of(diz__6) == class_Worker()
  diz__6.Worker_q1 := q1
  diz__6.Worker_q2 := q2
  inhale acc(Worker_idleToken_EncodedGlobalVariables(diz__6, globals), write)
  sys__result := diz__6
  // assert
  assert sys__result != null && type_of(sys__result) == class_Worker() && acc(Worker_idleToken_EncodedGlobalVariables(sys__result, globals), write) && acc(sys__result.Worker_q1, wildcard) && sys__result.Worker_q1 == q1 && acc(sys__result.Worker_q2, wildcard) && sys__result.Worker_q2 == q2
  inhale false
}

method Worker_forkOperator_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.Worker_q1, wildcard)
  requires diz.Worker_q1 != null
  requires acc(diz.Worker_q2, wildcard)
  requires diz.Worker_q2 != null
  requires acc(Worker_idleToken_EncodedGlobalVariables(diz, globals), write)
  ensures acc(Worker_joinToken_EncodedGlobalVariables(diz, globals), write)
{
  inhale false
}

method Worker_joinOperator_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(Worker_joinToken_EncodedGlobalVariables(diz, globals), write)
  ensures acc(Worker_idleToken_EncodedGlobalVariables(diz, globals), write)
{
  inhale false
}

method Worker___contract_unsatisfiable__run_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && (acc(diz.Worker_q1, wildcard) && diz.Worker_q1 != null && acc(diz.Worker_q2, wildcard) && diz.Worker_q2 != null)
  // assert
  assert false
  inhale false
}

method Worker_run_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.Worker_q1, wildcard)
  requires diz.Worker_q1 != null
  requires acc(diz.Worker_q2, wildcard)
  requires diz.Worker_q2 != null
{
  var tmp__7: Int
  var i__8: Int
  i__8 := 0
  while (i__8 < 4)
    invariant 0 <= i__8 && i__8 <= 4
    invariant acc(diz.Worker_q1, wildcard)
    invariant diz.Worker_q1 != null
    invariant acc(diz.Worker_q2, wildcard)
    invariant diz.Worker_q2 != null 
  {
    tmp__7 := Queue_take_EncodedGlobalVariables(diz.Worker_q1, globals)
    tmp__7 := tmp__7 + 2
    Queue_put_EncodedGlobalVariables_Integer(diz.Worker_q2, globals, tmp__7)
    i__8 := i__8 + 1
  }
}

method Queue___contract_unsatisfiable__Queue_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Queue_Queue_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Queue()
{
  var diz__9: Ref
  diz__9 := new(Queue_data, Queue_used)
  inhale type_of(diz__9) == class_Queue()
  diz__9.Queue_data := 37
  diz__9.Queue_used := false
  fold acc(Queue_lock_invariant_EncodedGlobalVariables(diz__9, globals), write)
  exhale acc(Queue_lock_invariant_EncodedGlobalVariables(diz__9, globals), write)
  sys__result := diz__9
  // assert
  assert sys__result != null && type_of(sys__result) == class_Queue()
  inhale false
}

method Queue___contract_unsatisfiable__put_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, x: Int)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Queue_put_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, x: Int)
  requires diz != null
{
  inhale acc(Queue_lock_invariant_EncodedGlobalVariables(diz, globals), write)
  unfold acc(Queue_lock_invariant_EncodedGlobalVariables(diz, globals), write)
  inhale acc(Queue_lock_held_EncodedGlobalVariables(diz, globals), write)
  while (diz.Queue_used)
    invariant acc(diz.Queue_used, write)
    invariant acc(diz.Queue_data, write)
    invariant acc(Queue_lock_held_EncodedGlobalVariables(diz, globals), write) 
  {
    fold acc(Queue_lock_invariant_EncodedGlobalVariables(diz, globals), write)
    exhale acc(Queue_lock_invariant_EncodedGlobalVariables(diz, globals), write)
    // assert
    assert acc(Queue_lock_held_EncodedGlobalVariables(diz, globals), write)
    inhale acc(Queue_lock_invariant_EncodedGlobalVariables(diz, globals), write)
    unfold acc(Queue_lock_invariant_EncodedGlobalVariables(diz, globals), write)
  }
  diz.Queue_used := true
  diz.Queue_data := x
  // assert
  assert acc(Queue_lock_held_EncodedGlobalVariables(diz, globals), write)
  exhale acc(Queue_lock_held_EncodedGlobalVariables(diz, globals), write)
  fold acc(Queue_lock_invariant_EncodedGlobalVariables(diz, globals), write)
  exhale acc(Queue_lock_invariant_EncodedGlobalVariables(diz, globals), write)
}

method Queue___contract_unsatisfiable__take_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Int)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Queue_take_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Int)
  requires diz != null
{
  var res__10: Int
  inhale acc(Queue_lock_invariant_EncodedGlobalVariables(diz, globals), write)
  unfold acc(Queue_lock_invariant_EncodedGlobalVariables(diz, globals), write)
  inhale acc(Queue_lock_held_EncodedGlobalVariables(diz, globals), write)
  while (!diz.Queue_used)
    invariant acc(diz.Queue_used, write)
    invariant acc(diz.Queue_data, write)
    invariant acc(Queue_lock_held_EncodedGlobalVariables(diz, globals), write) 
  {
    fold acc(Queue_lock_invariant_EncodedGlobalVariables(diz, globals), write)
    exhale acc(Queue_lock_invariant_EncodedGlobalVariables(diz, globals), write)
    // assert
    assert acc(Queue_lock_held_EncodedGlobalVariables(diz, globals), write)
    inhale acc(Queue_lock_invariant_EncodedGlobalVariables(diz, globals), write)
    unfold acc(Queue_lock_invariant_EncodedGlobalVariables(diz, globals), write)
  }
  res__10 := diz.Queue_data
  diz.Queue_used := false
  // assert
  assert acc(Queue_lock_held_EncodedGlobalVariables(diz, globals), write)
  exhale acc(Queue_lock_held_EncodedGlobalVariables(diz, globals), write)
  fold acc(Queue_lock_invariant_EncodedGlobalVariables(diz, globals), write)
  exhale acc(Queue_lock_invariant_EncodedGlobalVariables(diz, globals), write)
  sys__result := res__10
  // assert
  assert true
  inhale false
}