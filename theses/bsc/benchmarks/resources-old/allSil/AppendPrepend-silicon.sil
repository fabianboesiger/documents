// Generated on 2021-03-23 at 23:28:36
domain TYPE {
  
  unique function class_AppendPrepend(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom AppendPrepend_directSuperclass {
    directSuperclass(class_AppendPrepend()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


method AppendPrepend___contract_unsatisfiable__main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method AppendPrepend_main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var a__1: Seq[Int]
  var __flatten_1__2: Seq[Int]
  var b__3: Int
  __flatten_1__2 := Seq(1, 8, 7, 5, 9)
  a__1 := __flatten_1__2
  b__3 := 17
  // assert
  assert a__1 ++ Seq(20) == Seq(1, 8, 7, 5, 9, 20)
  // assert
  assert Seq(b__3) ++ a__1 == Seq(17, 1, 8, 7, 5, 9)
}

method AppendPrepend___contract_unsatisfiable__cubed_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, N: Int) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale true && 0 <= N
  // assert
  assert false
  inhale false
}

method AppendPrepend_cubed_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, N: Int) returns (sys__result: Seq[Int])
  requires diz != null
  requires 0 <= N
  ensures (forall k: Int :: { sys__result[k] } 0 <= k && k < |sys__result| ==> sys__result[k] == k * k * k)
{
  var sys__local__result__4: Seq[Int]
  var i__5: Int
  var result__6: Seq[Int]
  var __flatten_2__7: Seq[Int]
  var __flatten_3__8: Seq[Int]
  i__5 := 0
  __flatten_2__7 := Seq[Int]()
  result__6 := __flatten_2__7
  while (i__5 < N)
    invariant 0 <= i__5 && i__5 <= N
    invariant i__5 == |result__6|
    invariant (forall k__9: Int :: { result__6[k__9] } 0 <= k__9 && k__9 < i__5 ==> result__6[k__9] == k__9 * k__9 * k__9) 
  {
    __flatten_3__8 := Seq(i__5 * i__5 * i__5)
    result__6 := result__6 ++ __flatten_3__8
    i__5 := i__5 + 1
  }
  sys__local__result__4 := result__6
  // assert
  assert (forall k__10: Int :: { sys__local__result__4[k__10] } 0 <= k__10 && k__10 < |sys__local__result__4| ==> sys__local__result__4[k__10] == k__10 * k__10 * k__10)
  goto __return_cubed
  label __return_cubed
  sys__result := sys__local__result__4
  // assert
  assert (forall k__11: Int :: { sys__result[k__11] } 0 <= k__11 && k__11 < |sys__result| ==> sys__result[k__11] == k__11 * k__11 * k__11)
  inhale false
}

method AppendPrepend___contract_unsatisfiable__reversefib_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, N: Int) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale true && 0 <= N
  // assert
  assert false
  inhale false
}

method AppendPrepend_reversefib_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, N: Int) returns (sys__result: Seq[Int])
  requires diz != null
  requires 0 <= N
  ensures (forall k: Int :: { sys__result[k] } 0 <= k && k < |sys__result| - 2 ==> sys__result[k] == sys__result[k + 1] + sys__result[k + 2])
{
  var sys__local__result__12: Seq[Int]
  var __flatten_4__13: Seq[Int]
  var __flatten_5__14: Seq[Int]
  var fibonacci__17: Seq[Int]
  var __flatten_6__18: Seq[Int]
  var i__19: Int
  var __flatten_7__20: Seq[Int]
  if (N == 0) {
    __flatten_4__13 := Seq[Int]()
    sys__local__result__12 := __flatten_4__13
    // assert
    assert (forall k__15: Int :: { sys__local__result__12[k__15] } 0 <= k__15 && k__15 < |sys__local__result__12| - 2 ==> sys__local__result__12[k__15] == sys__local__result__12[k__15 + 1] + sys__local__result__12[k__15 + 2])
    goto __return_reversefib
  } elseif (N == 1) {
    __flatten_5__14 := Seq(0)
    sys__local__result__12 := __flatten_5__14
    // assert
    assert (forall k__16: Int :: { sys__local__result__12[k__16] } 0 <= k__16 && k__16 < |sys__local__result__12| - 2 ==> sys__local__result__12[k__16] == sys__local__result__12[k__16 + 1] + sys__local__result__12[k__16 + 2])
    goto __return_reversefib
  }
  __flatten_6__18 := Seq(1, 0)
  fibonacci__17 := __flatten_6__18
  i__19 := 2
  while (i__19 < N)
    invariant 2 <= i__19 && i__19 <= N
    invariant i__19 == |fibonacci__17|
    invariant (forall k__21: Int :: { fibonacci__17[k__21] } 0 <= k__21 && k__21 < i__19 - 2 ==> fibonacci__17[k__21] == fibonacci__17[k__21 + 1] + fibonacci__17[k__21 + 2]) 
  {
    __flatten_7__20 := Seq(fibonacci__17[0] + fibonacci__17[1])
    fibonacci__17 := __flatten_7__20 ++ fibonacci__17
    i__19 := i__19 + 1
  }
  sys__local__result__12 := fibonacci__17
  // assert
  assert (forall k__22: Int :: { sys__local__result__12[k__22] } 0 <= k__22 && k__22 < |sys__local__result__12| - 2 ==> sys__local__result__12[k__22] == sys__local__result__12[k__22 + 1] + sys__local__result__12[k__22 + 2])
  goto __return_reversefib
  label __return_reversefib
  sys__result := sys__local__result__12
  // assert
  assert (forall k__23: Int :: { sys__result[k__23] } 0 <= k__23 && k__23 < |sys__result| - 2 ==> sys__result[k__23] == sys__result[k__23 + 1] + sys__result[k__23 + 2])
  inhale false
}