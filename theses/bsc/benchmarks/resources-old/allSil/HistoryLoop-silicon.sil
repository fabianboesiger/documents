// Generated on 2021-03-23 at 23:32:44
domain Process {
  
  function p_is_choice(p1: Process, p2: Process): Bool
  
  function p_empty(): Process
  
  function p_merge(p1: Process, p2: Process): Process
  
  function p_choice(p1: Process, p2: Process): Process
  
  function p_seq(p1: Process, p2: Process): Process
  
  function p_incr(): Process
  
  function p_single(n: Int): Process
  
  function p_dual(n: Int, m: Int): Process
  
  axiom empty_1L {
    (forall p: Process :: { p_merge(p_empty(), p) } p_merge(p_empty(), p) == p)
  }
  
  axiom empty_2L {
    (forall p: Process :: { p_seq(p_empty(), p) } p_seq(p_empty(), p) == p)
  }
  
  axiom empty_2R {
    (forall p: Process :: { p_seq(p, p_empty()) } p_seq(p, p_empty()) == p)
  }
  
  axiom choice_L {
    (forall p1: Process, p2: Process :: { p_is_choice(p_choice(p1, p2), p1) } p_is_choice(p_choice(p1, p2), p1))
  }
  
  axiom choice_R {
    (forall p1: Process, p2: Process :: { p_is_choice(p_choice(p1, p2), p2) } p_is_choice(p_choice(p1, p2), p2))
  }
  
  axiom choice_dist {
    (forall p1: Process, p2: Process, p3: Process :: { p_seq(p_choice(p1, p2), p3) } p_seq(p_choice(p1, p2), p3) == p_choice(p_seq(p1, p3), p_seq(p2, p3)))
  }
  
  axiom seq_assoc {
    (forall p1: Process, p2: Process, p3: Process :: { p_seq(p_seq(p1, p2), p3) } p_seq(p_seq(p1, p2), p3) == p_seq(p1, p_seq(p2, p3)))
  }
  
  axiom incr_def_2 {
    (forall p: Process :: { p_seq(p, p_incr()) } p_seq(p, p_incr()) == p_seq(p, p_seq(p_incr(), p_empty())))
  }
  
  axiom single_def_1 {
    (forall n: Int :: { p_single(n) } (0 < n ? p_seq(p_incr(), p_single(n - 1)) : p_empty()) == p_single(n))
  }
  
  axiom single_def_2 {
    (forall p: Process, n: Int :: { p_seq(p, p_single(n)) } p_seq(p, p_single(n)) == p_seq(p, p_seq(p_single(n), p_empty())))
  }
  
  axiom dual_def_1 {
    (forall n: Int, m: Int :: { p_dual(n, m) } p_merge(p_single(n), p_single(m)) == p_dual(n, m))
  }
  
  axiom dual_def_2 {
    (forall p: Process, n: Int, m: Int :: { p_seq(p, p_dual(n, m)) } p_seq(p, p_dual(n, m)) == p_seq(p, p_seq(p_dual(n, m), p_empty())))
  }
  
  axiom lemma_post {
    (forall p: Process, n: Int :: { p_seq(p_single(n), p) } p_seq(p_single(n), p) == p_seq((0 < n ? p_seq(p_single(n - 1), p_incr()) : p_empty()), p))
  }
  
  axiom single_axiom_post {
    (forall p: Process, m: Int, n: Int :: { p_seq(p_single(m), p_seq(p_single(n), p)) } p_seq(p_single(m), p_seq(p_single(n), p)) == p_seq(p_single(m + n), p))
  }
}

domain TYPE {
  
  unique function class_History(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_Application(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom History_directSuperclass {
    directSuperclass(class_History()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Application_directSuperclass {
    directSuperclass(class_Application()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field History_x_hist_value: Int

//  a field 
field History_x_hist_init: Int

//  a field 
field History_x_hist_act: Int

//  a field 
field History_x_hist_write: Int

//  a field 
field History_x_hist_free: Int

//  a field 
field History_x_hist_hist: Int

//  a field 
field History_x_hist_action: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


predicate History_hist_do_incr_Fraction_Process(diz: Ref, fr: frac, proc: Process) 

predicate History_hist_idle_Fraction_Process(diz: Ref, fr: frac, proc: Process) 

method History_incr_begin_Fraction_Process(diz: Ref, fr: frac, proc: Process)
  requires diz != null
  requires frac_val(fr) != none
  requires acc(History_hist_idle_Fraction_Process(diz, fr, proc), write)
  requires write != none
  requires acc(diz.History_x_hist_value, write)
  requires acc(diz.History_x_hist_hist, write)
  ensures frac_val(fr) != none
  ensures acc(History_hist_do_incr_Fraction_Process(diz, fr, proc), write)
  ensures acc(diz.History_x_hist_act, write)
  ensures acc(diz.History_x_hist_value, write)
  ensures acc(diz.History_x_hist_write, write)
  ensures acc(diz.History_x_hist_action, write)
  ensures diz.History_x_hist_value == diz.History_x_hist_act
  ensures diz.History_x_hist_value == old(diz.History_x_hist_value)
{
  inhale false
}

method History_incr_commit_Fraction_Process(diz: Ref, fr: frac, proc: Process)
  requires diz != null
  requires frac_val(fr) != none
  requires acc(History_hist_do_incr_Fraction_Process(diz, fr, proc), write)
  requires write != none
  requires acc(diz.History_x_hist_act, write)
  requires acc(diz.History_x_hist_value, write)
  requires acc(diz.History_x_hist_write, write)
  requires acc(diz.History_x_hist_action, write)
  requires diz.History_x_hist_value == diz.History_x_hist_act + 1
  ensures frac_val(fr) != none
  ensures acc(History_hist_idle_Fraction_Process(diz, fr, p_seq(proc, p_incr())), write)
  ensures acc(diz.History_x_hist_value, write)
  ensures acc(diz.History_x_hist_hist, write)
  ensures diz.History_x_hist_value == old(diz.History_x_hist_value)
{
  inhale false
}

method History_hist_set_x_Integer(diz: Ref, value: Int)
  requires diz != null
  requires acc(diz.History_x_hist_value, write)
  requires acc(diz.History_x_hist_write, write)
  ensures acc(diz.History_x_hist_value, write) && diz.History_x_hist_value == value
  ensures acc(diz.History_x_hist_write, write)
{
  inhale false
}

method History_begin_hist(diz: Ref)
  requires diz != null
  requires acc(diz.History_x_hist_value, write)
  requires acc(diz.History_x_hist_write, write)
  requires acc(diz.History_x_hist_free, write)
  ensures acc(diz.History_x_hist_value, write)
  ensures acc(diz.History_x_hist_hist, write)
  ensures acc(diz.History_x_hist_init, write)
  ensures diz.History_x_hist_value == old(diz.History_x_hist_value)
  ensures diz.History_x_hist_init == old(diz.History_x_hist_value)
  ensures acc(History_hist_idle_Fraction_Process(diz, new_frac(write), p_empty()), write)
{
  inhale false
}

method History_split_Fraction_Process_Fraction_Process(diz: Ref, frac1: frac, proc1: Process, frac2: frac, proc2: Process)
  requires diz != null
  requires frac_val(frac1) + frac_val(frac2) <= write
  requires acc(History_hist_idle_Fraction_Process(diz, new_frac(frac_val(frac1) + frac_val(frac2)), p_merge(proc1, proc2)), write)
  ensures acc(History_hist_idle_Fraction_Process(diz, frac1, proc1), write)
  ensures acc(History_hist_idle_Fraction_Process(diz, frac2, proc2), write)
{
  inhale false
}

method History_merge_Fraction_Process_Fraction_Process(diz: Ref, frac1: frac, proc1: Process, frac2: frac, proc2: Process)
  requires diz != null
  requires frac_val(frac1) + frac_val(frac2) <= write
  requires acc(History_hist_idle_Fraction_Process(diz, frac1, proc1), write)
  requires acc(History_hist_idle_Fraction_Process(diz, frac2, proc2), write)
  ensures acc(History_hist_idle_Fraction_Process(diz, new_frac(frac_val(frac1) + frac_val(frac2)), p_merge(proc1, proc2)), write)
{
  inhale false
}

method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method Application_do_incr_loop_EncodedGlobalVariables_History_Integer_Process_Fraction(diz: Ref, globals: Ref, h: Ref, n: Int, p: Process, q: frac)
  requires diz != null
  requires 0 <= n
  requires frac_val(q) != none
  requires acc(History_hist_idle_Fraction_Process(h, q, p), write)
  requires acc(h.History_x_hist_value, write)
  requires acc(h.History_x_hist_hist, write)
  ensures acc(h.History_x_hist_value, write)
  ensures acc(h.History_x_hist_hist, write)
  ensures acc(History_hist_idle_Fraction_Process(h, q, p_seq(p, p_single(n))), write)
{
  inhale false
}

method Application___contract_unsatisfiable__internal_do_incr_loop_EncodedGlobalVariables_History_Integer_Process_Fraction(diz: Ref, globals: Ref, h: Ref, n: Int, p: Process, q: frac)
  requires diz != null
{
  inhale true && (0 <= n && frac_val(q) != none && acc(History_hist_idle_Fraction_Process(h, q, p), write) && (acc(h.History_x_hist_value, write) && acc(h.History_x_hist_hist, write)))
  // assert
  assert false
  inhale false
}

method Application_internal_do_incr_loop_EncodedGlobalVariables_History_Integer_Process_Fraction(diz: Ref, globals: Ref, h: Ref, n: Int, p: Process, q: frac)
  requires diz != null
  requires 0 <= n
  requires frac_val(q) != none
  requires acc(History_hist_idle_Fraction_Process(h, q, p), write)
  requires acc(h.History_x_hist_value, write)
  requires acc(h.History_x_hist_hist, write)
  ensures acc(h.History_x_hist_value, write)
  ensures acc(h.History_x_hist_hist, write)
  ensures acc(History_hist_idle_Fraction_Process(h, q, p_seq(p, p_single(n))), write)
{
  var i__1: Int
  var __flatten_1__2: Process
  var __flatten_2__3: Process
  var __flatten_5__4: Process
  var __flatten_6__5: Process
  i__1 := 0
  while (i__1 < n)
    invariant 0 <= i__1
    invariant i__1 <= n
    invariant frac_val(q) != none
    invariant acc(h.History_x_hist_value, write)
    invariant acc(h.History_x_hist_hist, write)
    invariant acc(History_hist_idle_Fraction_Process(h, q, p_seq(p, p_single(i__1))), write) 
  {
    __flatten_1__2 := p_single(i__1)
    __flatten_2__3 := p_seq(p, __flatten_1__2)
    History_incr_begin_Fraction_Process(h, q, __flatten_2__3)
    History_hist_set_x_Integer(h, h.History_x_hist_value + 1)
    __flatten_5__4 := p_single(i__1)
    __flatten_6__5 := p_seq(p, __flatten_5__4)
    History_incr_commit_Fraction_Process(h, q, __flatten_6__5)
    i__1 := i__1 + 1
  }
}

method Application_do_loop_twice_EncodedGlobalVariables_History_Integer_Integer_Fraction(diz: Ref, globals: Ref, h: Ref, m: Int, n: Int, q: frac)
  requires diz != null
  requires 0 <= m
  requires 0 <= n
  requires frac_val(q) != none
  requires acc(History_hist_idle_Fraction_Process(h, q, p_empty()), write)
  requires acc(h.History_x_hist_value, write)
  requires acc(h.History_x_hist_hist, write)
  ensures acc(h.History_x_hist_value, write)
  ensures acc(h.History_x_hist_hist, write)
  ensures acc(History_hist_idle_Fraction_Process(h, q, p_single(m + n)), write)
{
  inhale false
}

method Application___contract_unsatisfiable__internal_do_loop_twice_EncodedGlobalVariables_History_Integer_Integer_Fraction(diz: Ref, globals: Ref, h: Ref, m: Int, n: Int, q: frac)
  requires diz != null
{
  inhale true && (0 <= m && 0 <= n && frac_val(q) != none && acc(History_hist_idle_Fraction_Process(h, q, p_empty()), write) && (acc(h.History_x_hist_value, write) && acc(h.History_x_hist_hist, write)))
  // assert
  assert false
  inhale false
}

method Application_internal_do_loop_twice_EncodedGlobalVariables_History_Integer_Integer_Fraction(diz: Ref, globals: Ref, h: Ref, m: Int, n: Int, q: frac)
  requires diz != null
  requires 0 <= m
  requires 0 <= n
  requires frac_val(q) != none
  requires acc(History_hist_idle_Fraction_Process(h, q, p_empty()), write)
  requires acc(h.History_x_hist_value, write)
  requires acc(h.History_x_hist_hist, write)
  ensures acc(h.History_x_hist_value, write)
  ensures acc(h.History_x_hist_hist, write)
  ensures acc(History_hist_idle_Fraction_Process(h, q, p_single(m + n)), write)
{
  var __flatten_8__6: Process
  var __flatten_10__7: Process
  __flatten_8__6 := p_empty()
  Application_do_incr_loop_EncodedGlobalVariables_History_Integer_Process_Fraction(diz, globals, h, m, __flatten_8__6, q)
  __flatten_10__7 := p_single(m)
  Application_do_incr_loop_EncodedGlobalVariables_History_Integer_Process_Fraction(diz, globals, h, n, __flatten_10__7, q)
}