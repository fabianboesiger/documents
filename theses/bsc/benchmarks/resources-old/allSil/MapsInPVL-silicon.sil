// Generated on 2021-03-23 at 23:35:08
domain TYPE {
  
  unique function class_MapsInPVL(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom MapsInPVL_directSuperclass {
    directSuperclass(class_MapsInPVL()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain VCTTuple[F, S] {
  
  function vcttuple_tuple(f: F, s: S): VCTTuple[F, S]
  
  function vcttuple_fst(t: VCTTuple[F, S]): F
  
  function vcttuple_snd(t: VCTTuple[F, S]): S
  
  axiom vctTupleFstAx {
    (forall f1: F, s1: S :: { (vcttuple_fst((vcttuple_tuple(f1, s1): VCTTuple[F, S])): F) } (vcttuple_fst((vcttuple_tuple(f1, s1): VCTTuple[F, S])): F) == f1)
  }
  
  axiom vctTupleSndAx {
    (forall f1: F, s1: S :: { (vcttuple_snd((vcttuple_tuple(f1, s1): VCTTuple[F, S])): S) } (vcttuple_snd((vcttuple_tuple(f1, s1): VCTTuple[F, S])): S) == s1)
  }
}

domain VCTMap[K, V] {
  
  function vctmap_keys(m: VCTMap[K, V]): Set[K]
  
  function vctmap_card(m: VCTMap[K, V]): Int
  
  function vctmap_values(m: VCTMap[K, V]): Set[V]
  
  function vctmap_get(m: VCTMap[K, V], k: K): V
  
  function vctmap_items(m: VCTMap[K, V]): Set[VCTTuple[K, V]]
  
  function vctmap_empty(): VCTMap[K, V]
  
  function vctmap_build(m: VCTMap[K, V], k: K, v: V): VCTMap[K, V]
  
  function vctmap_equals(m1: VCTMap[K, V], m2: VCTMap[K, V]): Bool
  
  function vctmap_disjoint(m1: VCTMap[K, V], m2: VCTMap[K, V]): Bool
  
  function vctmap_remove(m: VCTMap[K, V], k: K): VCTMap[K, V]
  
  axiom vctMapCardAx1 {
    (forall m1: VCTMap[K, V] :: { (vctmap_card(m1): Int) } (vctmap_card(m1): Int) >= 0)
  }
  
  axiom vctMapCardAx2 {
    (forall m1: VCTMap[K, V] :: { (vctmap_card(m1): Int) } { |(vctmap_keys(m1): Set[K])| } (vctmap_card(m1): Int) == |(vctmap_keys(m1): Set[K])|)
  }
  
  axiom vctMapValuesAx {
    (forall v1: V, m1: VCTMap[K, V] :: { (v1 in (vctmap_values(m1): Set[V])) } (v1 in (vctmap_values(m1): Set[V])) == (exists k1: K :: true && ((k1 in (vctmap_keys(m1): Set[K])) && (vctmap_get(m1, k1): V) == v1)))
  }
  
  axiom vctMapItemsSizeAx {
    (forall m1: VCTMap[K, V] :: { (vctmap_card(m1): Int) } { |(vctmap_items(m1): Set[VCTTuple[K, V]])| } |(vctmap_items(m1): Set[VCTTuple[K, V]])| == (vctmap_card(m1): Int))
  }
  
  axiom vctMapItemsKeysAx {
    (forall t1: VCTTuple[K, V], m1: VCTMap[K, V] :: { (vctmap_get(m1, (vcttuple_fst(t1): K)): V) } { (t1 in (vctmap_items(m1): Set[VCTTuple[K, V]])) } (t1 in (vctmap_items(m1): Set[VCTTuple[K, V]])) == (((vcttuple_fst(t1): K) in (vctmap_keys(m1): Set[K])) && (vctmap_get(m1, (vcttuple_fst(t1): K)): V) == (vcttuple_snd(t1): V)))
  }
  
  axiom vctMapEmptyKeyAx {
    (forall k1: K :: { (k1 in (vctmap_keys((vctmap_empty(): VCTMap[K, Int])): Set[K])) } !((k1 in (vctmap_keys((vctmap_empty(): VCTMap[K, Int])): Set[K]))) && |(vctmap_keys((vctmap_empty(): VCTMap[Int, Int])): Set[Int])| == 0)
  }
  
  axiom vctMapEmptyValueAx {
    (forall v1: V :: { (v1 in (vctmap_values((vctmap_empty(): VCTMap[Int, V])): Set[V])) } !((v1 in (vctmap_values((vctmap_empty(): VCTMap[Int, V])): Set[V]))) && |(vctmap_values((vctmap_empty(): VCTMap[Int, Int])): Set[Int])| == 0)
  }
  
  axiom vctMapEmptyCardAx1 {
    (forall m1: VCTMap[K, V] :: { (vctmap_card(m1): Int) } ((vctmap_card(m1): Int) == 0) == (m1 == (vctmap_empty(): VCTMap[K, V])))
  }
  
  axiom vctMapEmptyCardAx2 {
    (forall m1: VCTMap[K, V] :: { (vctmap_card(m1): Int) } (vctmap_card(m1): Int) != 0 ==> (exists k1: K :: true && (k1 in (vctmap_keys(m1): Set[K]))))
  }
  
  axiom vctMapBuildAx0 {
    (forall k1: K, v1: V, m1: VCTMap[K, V] :: { (vctmap_build(m1, k1, v1): VCTMap[K, V]) } (k1 in (vctmap_keys((vctmap_build(m1, k1, v1): VCTMap[K, V])): Set[K])) && (vctmap_get((vctmap_build(m1, k1, v1): VCTMap[K, V]), k1): V) == v1)
  }
  
  axiom vctMapBuildAx1 {
    (forall k1: K, k2: K, v1: V, m1: VCTMap[K, V] :: { (k2 in (vctmap_keys((vctmap_build(m1, k1, v1): VCTMap[K, V])): Set[K])) } { (vctmap_get((vctmap_build(m1, k1, v1): VCTMap[K, V]), k2): V) } k1 == k2 ==> (k2 in (vctmap_keys((vctmap_build(m1, k1, v1): VCTMap[K, V])): Set[K])) && (vctmap_get((vctmap_build(m1, k1, v1): VCTMap[K, V]), k2): V) == v1)
  }
  
  axiom vctMapBuild1Dot5Ax {
    (forall k1: K, k2: K, v1: V, m1: VCTMap[K, V] :: { (k2 in (vctmap_keys((vctmap_build(m1, k1, v1): VCTMap[K, V])): Set[K])) } { (vctmap_get((vctmap_build(m1, k1, v1): VCTMap[K, V]), k1): V),(vctmap_get(m1, k2): V) } k1 != k2 ==> (k2 in (vctmap_keys((vctmap_build(m1, k1, v1): VCTMap[K, V])): Set[K])) == (k2 in (vctmap_keys(m1): Set[K])) && (vctmap_get((vctmap_build(m1, k1, v1): VCTMap[K, V]), k2): V) == (vctmap_get(m1, k2): V))
  }
  
  axiom vctMapBuildAx2 {
    (forall k1: K, v1: V, m1: VCTMap[K, V] :: { (vctmap_card((vctmap_build(m1, k1, v1): VCTMap[K, V])): Int) } (k1 in (vctmap_keys(m1): Set[K])) ==> (vctmap_card((vctmap_build(m1, k1, v1): VCTMap[K, V])): Int) == (vctmap_card(m1): Int))
  }
  
  axiom vctMapBuildAx3 {
    (forall k1: K, v1: V, m1: VCTMap[K, V] :: { (vctmap_card((vctmap_build(m1, k1, v1): VCTMap[K, V])): Int) } !((k1 in (vctmap_keys(m1): Set[K]))) ==> (vctmap_card((vctmap_build(m1, k1, v1): VCTMap[K, V])): Int) == (vctmap_card(m1): Int) + 1)
  }
  
  axiom vctMapEqualsAx1 {
    (forall m1: VCTMap[K, V], m2: VCTMap[K, V] :: { (vctmap_equals(m1, m2): Bool) } (vctmap_equals(m1, m2): Bool) == ((vctmap_keys(m1): Set[K]) == (vctmap_keys(m2): Set[K]) && (forall k: K :: { (vctmap_get(m1, k): V),(vctmap_get(m2, k): V) } (k in (vctmap_keys(m1): Set[K])) ==> (vctmap_get(m1, k): V) == (vctmap_get(m2, k): V))))
  }
  
  axiom vctMapEqualsAx2 {
    (forall m1: VCTMap[K, V], m2: VCTMap[K, V] :: { (vctmap_equals(m1, m2): Bool) } (vctmap_equals(m1, m2): Bool) == (m1 == m2))
  }
  
  axiom vctMapDisjointAx1 {
    (forall m1: VCTMap[K, V], m2: VCTMap[K, V] :: { (vctmap_disjoint(m1, m2): Bool) } (vctmap_disjoint(m1, m2): Bool) == (forall k: K :: { (k in (vctmap_keys(m1): Set[K])) } { (k in (vctmap_keys(m2): Set[K])) } !((k in (vctmap_keys(m1): Set[K]))) || !((k in (vctmap_keys(m2): Set[K])))))
  }
  
  axiom vctMapRemoveAx1 {
    (forall m: VCTMap[K, V], k: K :: { (vctmap_remove(m, k): VCTMap[K, V]) } !((k in (vctmap_keys((vctmap_remove(m, k): VCTMap[K, V])): Set[K]))))
  }
  
  axiom vctMapRemoveAx2 {
    (forall m: VCTMap[K, V], k: K :: { (vctmap_remove(m, k): VCTMap[K, V]) } (k in (vctmap_keys(m): Set[K])) ==> (vctmap_get((vctmap_remove(m, k): VCTMap[K, V]), k): V) != (vctmap_get(m, k): V))
  }
  
  axiom vctMapRemoveAx3 {
    (forall m: VCTMap[K, V], k1: K, k2: K :: { (k2 in (vctmap_keys((vctmap_remove(m, k1): VCTMap[K, V])): Set[K])) } { (vctmap_get((vctmap_remove(m, k1): VCTMap[K, V]), k2): V) } k1 != k2 ==> (k2 in (vctmap_keys((vctmap_remove(m, k1): VCTMap[K, V])): Set[K])) == (k2 in (vctmap_keys(m): Set[K])) && (vctmap_get((vctmap_remove(m, k1): VCTMap[K, V]), k2): V) == (vctmap_get(m, k2): V))
  }
  
  axiom vctMapRemoveAx4 {
    (forall m: VCTMap[K, V], k: K :: { (vctmap_remove(m, k): VCTMap[K, V]) } (k in (vctmap_keys(m): Set[K])) ==> (vctmap_card(m): Int) - 1 == (vctmap_card((vctmap_remove(m, k): VCTMap[K, V])): Int))
  }
  
  axiom vctMapRemoveAx5 {
    (forall m: VCTMap[K, V], k: K :: { (vctmap_remove(m, k): VCTMap[K, V]) } !((k in (vctmap_keys(m): Set[K]))) ==> (vctmap_card(m): Int) == (vctmap_card((vctmap_remove(m, k): VCTMap[K, V])): Int))
  }
  
  axiom vctMapRemoveAx6 {
    (forall m: VCTMap[K, V], k: K :: { (vctmap_remove(m, k): VCTMap[K, V]) } !((k in (vctmap_keys(m): Set[K]))) ==> (vctmap_equals(m, (vctmap_remove(m, k): VCTMap[K, V])): Bool))
  }
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


method MapsInPVL___contract_unsatisfiable__main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method MapsInPVL_main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var m1__1: VCTMap[Int, Bool]
  var __flatten_1__2: VCTMap[Int, Bool]
  var items__3: Set[VCTTuple[Int, Bool]]
  var m2__4: VCTMap[Int, Bool]
  var __flatten_2__5: VCTMap[Int, Bool]
  var m3__6: VCTMap[Int, Bool]
  var __flatten_3__7: VCTMap[Int, Bool]
  var m4__8: VCTMap[Int, Bool]
  __flatten_1__2 := (vctmap_build((vctmap_build((vctmap_build((vctmap_empty(): VCTMap[Int, Bool]), 1, true): VCTMap[Int, Bool]), 2, true): VCTMap[Int, Bool]), 0, false): VCTMap[Int, Bool])
  m1__1 := __flatten_1__2
  // assert
  assert (vctmap_equals(m1__1, (vctmap_build((vctmap_build((vctmap_build((vctmap_build((vctmap_build((vctmap_empty(): VCTMap[Int, Bool]), 1, true): VCTMap[Int, Bool]), 2, true): VCTMap[Int, Bool]), 0, false): VCTMap[Int, Bool]), 1, false): VCTMap[Int, Bool]), 1, true): VCTMap[Int, Bool])): Bool)
  // assert
  assert (vctmap_get(m1__1, 1): Bool) && !(vctmap_get(m1__1, 0): Bool)
  // assert
  assert !(0 == (vctmap_card(m1__1): Int))
  // assert
  assert (vctmap_card((vctmap_build(m1__1, 1, false): VCTMap[Int, Bool])): Int) == 3
  // assert
  assert (vctmap_get(m1__1, 1): Bool)
  // assert
  assert (vctmap_card(m1__1): Int) == 3
  // assert
  assert (vctmap_get((vctmap_build((vctmap_build((vctmap_build((vctmap_empty(): VCTMap[Int, Bool]), 1, true): VCTMap[Int, Bool]), 2, true): VCTMap[Int, Bool]), 0, false): VCTMap[Int, Bool]), 1): Bool)
  m1__1 := (vctmap_build(m1__1, 1, true): VCTMap[Int, Bool])
  // assert
  assert !(vctmap_disjoint(m1__1, (vctmap_build((vctmap_empty(): VCTMap[Int, Bool]), 1, true): VCTMap[Int, Bool])): Bool)
  // assert
  assert (vctmap_disjoint(m1__1, (vctmap_build((vctmap_build((vctmap_empty(): VCTMap[Int, Bool]), 3, false): VCTMap[Int, Bool]), 4, true): VCTMap[Int, Bool])): Bool)
  items__3 := (vctmap_items(m1__1): Set[VCTTuple[Int, Bool]])
  // assert
  assert ((vcttuple_tuple(1, true): VCTTuple[Int, Bool]) in items__3)
  __flatten_2__5 := (vctmap_empty(): VCTMap[Int, Bool])
  m2__4 := __flatten_2__5
  m2__4 := (vctmap_build(m2__4, 1, true): VCTMap[Int, Bool])
  // assert
  assert (vctmap_equals((vctmap_build((vctmap_empty(): VCTMap[Int, Bool]), 1, true): VCTMap[Int, Bool]), m2__4): Bool)
  // assert
  assert (vctmap_equals((vctmap_remove((vctmap_build((vctmap_empty(): VCTMap[Int, Bool]), 0, true): VCTMap[Int, Bool]), 0): VCTMap[Int, Bool]), (vctmap_empty(): VCTMap[Int, Bool])): Bool)
  // assert
  assert 0 == |(vctmap_keys((vctmap_empty(): VCTMap[Int, Bool])): Set[Int])|
  // assert
  assert (vctmap_keys((vctmap_build((vctmap_empty(): VCTMap[Int, Bool]), 123, false): VCTMap[Int, Bool])): Set[Int]) == Set(123)
  // assert
  assert (vctmap_values((vctmap_build((vctmap_empty(): VCTMap[Int, Bool]), 123, false): VCTMap[Int, Bool])): Set[Bool]) == Set(false)
  // assert
  assert (vctmap_values((vctmap_build((vctmap_build((vctmap_build((vctmap_empty(): VCTMap[Int, Bool]), 123, false): VCTMap[Int, Bool]), 2, false): VCTMap[Int, Bool]), 84368, true): VCTMap[Int, Bool])): Set[Bool]) == Set(false, true)
  // assert
  assert (vctmap_keys((vctmap_build((vctmap_build((vctmap_build((vctmap_empty(): VCTMap[Int, Bool]), 123, false): VCTMap[Int, Bool]), 2, false): VCTMap[Int, Bool]), 84368, true): VCTMap[Int, Bool])): Set[Int]) == Set(123, 2, 84368)
  __flatten_3__7 := (vctmap_build((vctmap_build((vctmap_build((vctmap_empty(): VCTMap[Int, Bool]), 1, true): VCTMap[Int, Bool]), 2, true): VCTMap[Int, Bool]), 0, false): VCTMap[Int, Bool])
  m3__6 := __flatten_3__7
  m4__8 := (vctmap_remove(m3__6, 1): VCTMap[Int, Bool])
  // assert
  assert (vctmap_get(m3__6, 2): Bool)
  // assert
  assert (0 in (vctmap_keys(m4__8): Set[Int]))
  // assert
  assert (false in (vctmap_values(m4__8): Set[Bool]))
  // assert
  assert (vctmap_get(m4__8, 2): Bool)
  // assert
  assert (true in (vctmap_values(m4__8): Set[Bool]))
  // assert
  assert (vctmap_equals((vctmap_remove((vctmap_build((vctmap_empty(): VCTMap[Int, Bool]), 0, true): VCTMap[Int, Bool]), 0): VCTMap[Int, Bool]), (vctmap_empty(): VCTMap[Int, Bool])): Bool)
}