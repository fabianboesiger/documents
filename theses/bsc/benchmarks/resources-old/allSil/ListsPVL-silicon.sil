// Generated on 2021-03-23 at 23:34:49
domain TYPE {
  
  unique function class_node(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom node_directSuperclass {
    directSuperclass(class_node()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field node_val: Int

//  a field 
field node_next: Ref

function node_contents_EncodedGlobalVariables(diz: Ref, globals: Ref): Seq[Int]
  requires diz != null
  requires acc(node_state_EncodedGlobalVariables(diz, globals), write)
{
  (unfolding acc(node_state_EncodedGlobalVariables(diz, globals), write) in (diz.node_next == null ? Seq(diz.node_val) : Seq(diz.node_val) ++ node_contents_EncodedGlobalVariables(diz.node_next, globals)))
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


predicate node_state_EncodedGlobalVariables(diz: Ref, globals: Ref) {
  diz != null && (acc(diz.node_val, write) && acc(diz.node_next, write) && (diz.node_next != null ==> acc(node_state_EncodedGlobalVariables(diz.node_next, globals), write)))
}

method node___contract_unsatisfiable__node_EncodedGlobalVariables_Integer_node(diz: Ref, globals: Ref, v: Int, n: Ref)
  requires diz != null
{
  inhale true && (n != null ==> acc(node_state_EncodedGlobalVariables(n, globals), write))
  // assert
  assert false
  inhale false
}

method node_node_EncodedGlobalVariables_Integer_node(globals: Ref, v: Int, n: Ref) returns (sys__result: Ref)
  requires n != null ==> acc(node_state_EncodedGlobalVariables(n, globals), write)
  ensures sys__result != null
  ensures type_of(sys__result) == class_node()
  ensures acc(node_state_EncodedGlobalVariables(sys__result, globals), write)
  ensures node_contents_EncodedGlobalVariables(sys__result, globals) == (n == null ? Seq(v) : Seq(v) ++ old(node_contents_EncodedGlobalVariables(n, globals)))
{
  var diz__1: Ref
  diz__1 := new(node_val, node_next)
  inhale type_of(diz__1) == class_node()
  diz__1.node_val := v
  diz__1.node_next := n
  fold acc(node_state_EncodedGlobalVariables(diz__1, globals), write)
  sys__result := diz__1
  // assert
  assert sys__result != null && type_of(sys__result) == class_node() && acc(node_state_EncodedGlobalVariables(sys__result, globals), write) && node_contents_EncodedGlobalVariables(sys__result, globals) == (n == null ? Seq(v) : Seq(v) ++ old(node_contents_EncodedGlobalVariables(n, globals)))
  inhale false
}

method node___contract_unsatisfiable__main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method node_main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var tmp__2: Seq[Int]
  var __flatten_1__3: Seq[Int]
  var l__4: Ref
  __flatten_1__3 := Seq(1, 2, 3)
  tmp__2 := __flatten_1__3
  // assert
  assert tmp__2 == Seq(1) ++ Seq(2, 3)
  // assert
  assert tmp__2[0] == 1
  // assert
  assert tmp__2[1..] == Seq(2, 3)
  l__4 := node_node_EncodedGlobalVariables_Integer_node(globals, 37, null)
  // assert
  assert node_contents_EncodedGlobalVariables(l__4, globals) == Seq(37)
  // assert
  assert (37 in node_contents_EncodedGlobalVariables(l__4, globals))
}