// Generated on 2021-03-23 at 23:29:06
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_Counter(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Counter_directSuperclass {
    directSuperclass(class_Counter()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field Counter_val: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method Counter_incr_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, n: Int)
  requires diz != null
  requires acc(diz.Counter_val, write)
  requires 0 <= n
  ensures acc(diz.Counter_val, write)
  ensures diz.Counter_val == old(diz.Counter_val) + n
{
  inhale false
}

method Counter___contract_unsatisfiable__internal_incr_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, n: Int)
  requires diz != null
{
  inhale true && (acc(diz.Counter_val, write) && 0 <= n)
  // assert
  assert false
  inhale false
}

method Counter_internal_incr_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, n: Int)
  requires diz != null
  requires acc(diz.Counter_val, write)
  requires 0 <= n
  ensures acc(diz.Counter_val, write)
  ensures diz.Counter_val == old(diz.Counter_val) + n
{
  var tmp__1: Int
  var __flatten_1__2: Int
  tmp__1 := n
  while (0 < tmp__1)
    invariant diz.Counter_val + tmp__1 == old(diz.Counter_val) + n && 0 <= tmp__1 
  {
    __flatten_1__2 := diz.Counter_val + 1
    diz.Counter_val := __flatten_1__2
    tmp__1 := tmp__1 - 1
  }
}