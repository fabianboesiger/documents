// Generated on 2021-03-23 at 23:44:03
domain TYPE {
  
  unique function class_Ref(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Ref_directSuperclass {
    directSuperclass(class_Ref()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

domain VCTArray[CT] {
  
  function loc(a: VCTArray[CT], i: Int): CT
  
  function alen(a: VCTArray[CT]): Int
  
  function second(r: CT): Int
  
  axiom good_name_here {
    (forall a: VCTArray[CT], i: Int :: { (loc(a, i): CT) } (second((loc(a, i): CT)): Int) == (second((loc(a, 0): CT)): Int) + i)
  }
  
  axiom second_injectivity {
    (forall a: VCTArray[CT], b: VCTArray[CT], i: Int, j: Int :: { (loc(a, i): CT),(loc(b, j): CT) } (second((loc(a, i): CT)): Int) == (second((loc(b, j): CT)): Int) ==> (loc(a, i): CT) == (loc(b, j): CT))
  }
  
  axiom len_nonneg {
    (forall a: VCTArray[CT] :: { (alen(a): Int) } (alen(a): Int) >= 0)
  }
}

domain VCTOption[T] {
  
  function VCTNone(): VCTOption[T]
  
  function VCTSome(t: T): VCTOption[T]
  
  function getVCTOption(o: VCTOption[T]): T
  
  axiom not_equal_vct {
    (forall x: T :: { (VCTSome(x): VCTOption[T]) } (VCTNone(): VCTOption[T]) != (VCTSome(x): VCTOption[T]))
  }
  
  axiom get_axiom_vct {
    (forall x: T :: { (getVCTOption((VCTSome(x): VCTOption[T])): T) } (getVCTOption((VCTSome(x): VCTOption[T])): T) == x)
  }
  
  axiom get_axiom_vct_2 {
    (forall x: VCTOption[T] :: { (VCTSome((getVCTOption(x): T)): VCTOption[T]) } (VCTSome((getVCTOption(x): T)): VCTOption[T]) == x)
  }
}

//  a field 
field Integer__item: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


function getVCTOption1(x: VCTOption[VCTArray[Ref]]): VCTArray[Ref]
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
{
  (getVCTOption(x): VCTArray[Ref])
}

method Ref___contract_unsatisfiable__zero_array_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Integer(diz: Ref, globals: Ref, ar: VCTOption[VCTArray[Ref]], len: Int)
  requires diz != null
{
  inhale true && (ar != (VCTNone(): VCTOption[VCTArray[Ref]]) && len <= (alen(getVCTOption1(ar)): Int) && (forall __i__1: Int :: { (loc(getVCTOption1(ar), __i__1): Ref).Integer__item } 0 <= __i__1 && __i__1 < len ==> acc((loc(getVCTOption1(ar), __i__1): Ref).Integer__item, write)))
  // assert
  assert false
  inhale false
}

method Ref_loop_body_4_Option$Array$Cell$Integer$$$_Integer_Integer(diz: Ref, ar: VCTOption[VCTArray[Ref]], i: Int, len: Int)
  requires diz != null
  requires 0 <= i && i < len
  requires ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires acc((loc(getVCTOption1(ar), i): Ref).Integer__item, write)
  ensures 0 <= i && i < len
  ensures ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures acc((loc(getVCTOption1(ar), i): Ref).Integer__item, write)
  ensures (loc(getVCTOption1(ar), i): Ref).Integer__item == 0
{
  var __flatten_1__2: Ref
  __flatten_1__2 := (loc(getVCTOption1(ar), i): Ref)
  __flatten_1__2.Integer__item := 0
}

method Ref_parrallel_region_main_1_Integer_Option$Array$Cell$Integer$$$(diz: Ref, len: Int, ar: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires 0 < len ==> ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (forall i: Int :: { (loc(getVCTOption1(ar), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(ar), i): Ref).Integer__item, write))
  ensures 0 < len ==> ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (forall i: Int :: { (loc(getVCTOption1(ar), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(ar), i): Ref).Integer__item, write))
  ensures (forall i: Int :: { (loc(getVCTOption1(ar), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(ar), i): Ref).Integer__item == 0)
{
  inhale false
}

method Ref_zero_array_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Integer(diz: Ref, globals: Ref, ar: VCTOption[VCTArray[Ref]], len: Int)
  requires diz != null
  requires ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires len <= (alen(getVCTOption1(ar)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(ar), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(ar), __i): Ref).Integer__item, write))
  ensures ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures len <= (alen(getVCTOption1(ar)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(ar), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(ar), __i): Ref).Integer__item, write))
  ensures (forall k: Int :: { (loc(getVCTOption1(ar), k): Ref) } 0 <= k && k < len ==> (loc(getVCTOption1(ar), k): Ref).Integer__item == 0)
{
  Ref_parrallel_region_main_1_Integer_Option$Array$Cell$Integer$$$(diz, len, ar)
}

method Ref___contract_unsatisfiable__copy_array_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Integer(diz: Ref, globals: Ref, a: VCTOption[VCTArray[Ref]], len: Int)
  requires diz != null
{
  inhale true && (a != (VCTNone(): VCTOption[VCTArray[Ref]]) && len <= (alen(getVCTOption1(a)): Int) && (forall __i__3: Int :: { (loc(getVCTOption1(a), __i__3): Ref).Integer__item } 0 <= __i__3 && __i__3 < len ==> acc((loc(getVCTOption1(a), __i__3): Ref).Integer__item, write)))
  // assert
  assert false
  inhale false
}

method Ref_loop_body_8_Option$Array$Cell$Integer$$$_Integer_Integer(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, len: Int)
  requires diz != null
  requires 0 <= i && i < len
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires acc((loc(getVCTOption1(a), i): Ref).Integer__item, write)
  ensures 0 <= i && i < len
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures acc((loc(getVCTOption1(a), i): Ref).Integer__item, write)
  ensures (loc(getVCTOption1(a), i): Ref).Integer__item == old((loc(getVCTOption1(a), i): Ref).Integer__item)
{
  var __flatten_3__4: Ref
  var __flatten_4__5: Ref
  __flatten_3__4 := (loc(getVCTOption1(a), i): Ref)
  __flatten_4__5 := (loc(getVCTOption1(a), i): Ref)
  __flatten_3__4.Integer__item := __flatten_4__5.Integer__item
}

method Ref_parrallel_region_main_2_Integer_Option$Array$Cell$Integer$$$(diz: Ref, len: Int, a: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires 0 < len ==> a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, write))
  ensures 0 < len ==> a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, write))
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(a), i): Ref).Integer__item == old((loc(getVCTOption1(a), i): Ref).Integer__item))
{
  inhale false
}

method Ref_copy_array_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Integer(diz: Ref, globals: Ref, a: VCTOption[VCTArray[Ref]], len: Int)
  requires diz != null
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires len <= (alen(getVCTOption1(a)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(a), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(a), __i): Ref).Integer__item, write))
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures len <= (alen(getVCTOption1(a)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(a), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(a), __i): Ref).Integer__item, write))
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(a), i): Ref).Integer__item == old((loc(getVCTOption1(a), i): Ref).Integer__item))
{
  Ref_parrallel_region_main_2_Integer_Option$Array$Cell$Integer$$$(diz, len, a)
}

method Ref___contract_unsatisfiable__vector_add_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, globals: Ref, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], len: Int)
  requires diz != null
{
  inhale true && (a != (VCTNone(): VCTOption[VCTArray[Ref]]) && len <= (alen(getVCTOption1(a)): Int) && (forall __i__6: Int :: { (loc(getVCTOption1(a), __i__6): Ref).Integer__item } 0 <= __i__6 && __i__6 < len ==> acc((loc(getVCTOption1(a), __i__6): Ref).Integer__item, write)) && (b != (VCTNone(): VCTOption[VCTArray[Ref]]) && len <= (alen(getVCTOption1(b)): Int) && (forall __i__7: Int :: { (loc(getVCTOption1(b), __i__7): Ref).Integer__item } 0 <= __i__7 && __i__7 < len ==> acc((loc(getVCTOption1(b), __i__7): Ref).Integer__item, 1 / 2))) && (c != (VCTNone(): VCTOption[VCTArray[Ref]]) && len <= (alen(getVCTOption1(c)): Int) && (forall __i__8: Int :: { (loc(getVCTOption1(c), __i__8): Ref).Integer__item } 0 <= __i__8 && __i__8 < len ==> acc((loc(getVCTOption1(c), __i__8): Ref).Integer__item, 1 / 2))))
  // assert
  assert false
  inhale false
}

method Ref_loop_body_12_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], len: Int)
  requires diz != null
  requires 0 <= i && i < len
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires acc((loc(getVCTOption1(a), i): Ref).Integer__item, write)
  requires acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2)
  requires acc((loc(getVCTOption1(c), i): Ref).Integer__item, 1 / 2)
  ensures 0 <= i && i < len
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures acc((loc(getVCTOption1(a), i): Ref).Integer__item, write)
  ensures acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2)
  ensures acc((loc(getVCTOption1(c), i): Ref).Integer__item, 1 / 2)
  ensures (loc(getVCTOption1(b), i): Ref).Integer__item == old((loc(getVCTOption1(b), i): Ref).Integer__item)
  ensures (loc(getVCTOption1(c), i): Ref).Integer__item == old((loc(getVCTOption1(c), i): Ref).Integer__item)
  ensures (loc(getVCTOption1(a), i): Ref).Integer__item == (loc(getVCTOption1(b), i): Ref).Integer__item + (loc(getVCTOption1(c), i): Ref).Integer__item
{
  var __flatten_6__9: Ref
  var __flatten_7__10: Ref
  var __flatten_8__11: Ref
  __flatten_6__9 := (loc(getVCTOption1(a), i): Ref)
  __flatten_7__10 := (loc(getVCTOption1(b), i): Ref)
  __flatten_8__11 := (loc(getVCTOption1(c), i): Ref)
  __flatten_6__9.Integer__item := __flatten_7__10.Integer__item + __flatten_8__11.Integer__item
}

method Ref_parrallel_region_main_3_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, len: Int, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires (0 < len ==> a != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < len ==> b != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < len ==> c != (VCTNone(): VCTOption[VCTArray[Ref]]))
  requires (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2))
  requires (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(c), i): Ref).Integer__item, 1 / 2))
  ensures (0 < len ==> a != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < len ==> b != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < len ==> c != (VCTNone(): VCTOption[VCTArray[Ref]]))
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, write))
  ensures (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2))
  ensures (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(c), i): Ref).Integer__item, 1 / 2))
  ensures (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(b), i): Ref).Integer__item == old((loc(getVCTOption1(b), i): Ref).Integer__item))
  ensures (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(c), i): Ref).Integer__item == old((loc(getVCTOption1(c), i): Ref).Integer__item))
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(a), i): Ref).Integer__item == (loc(getVCTOption1(b), i): Ref).Integer__item + (loc(getVCTOption1(c), i): Ref).Integer__item)
{
  inhale false
}

method Ref_vector_add_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, globals: Ref, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], len: Int)
  requires diz != null
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires len <= (alen(getVCTOption1(a)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(a), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(a), __i): Ref).Integer__item, write))
  requires b != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires len <= (alen(getVCTOption1(b)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(b), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(b), __i): Ref).Integer__item, 1 / 2))
  requires c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires len <= (alen(getVCTOption1(c)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(c), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(c), __i): Ref).Integer__item, 1 / 2))
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures len <= (alen(getVCTOption1(a)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(a), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(a), __i): Ref).Integer__item, write))
  ensures b != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures len <= (alen(getVCTOption1(b)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(b), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(b), __i): Ref).Integer__item, 1 / 2))
  ensures c != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures len <= (alen(getVCTOption1(c)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(c), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(c), __i): Ref).Integer__item, 1 / 2))
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(a), i): Ref).Integer__item == (loc(getVCTOption1(b), i): Ref).Integer__item + (loc(getVCTOption1(c), i): Ref).Integer__item)
  ensures (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(b), i): Ref).Integer__item == old((loc(getVCTOption1(b), i): Ref).Integer__item))
  ensures (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(c), i): Ref).Integer__item == old((loc(getVCTOption1(c), i): Ref).Integer__item))
{
  Ref_parrallel_region_main_3_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz, len, a, b, c)
}

method Ref___contract_unsatisfiable__indep_drf_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, globals: Ref, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], N: Int)
  requires diz != null
{
  inhale true && (a != (VCTNone(): VCTOption[VCTArray[Ref]]) && N <= (alen(getVCTOption1(a)): Int) && (forall __i__12: Int :: { (loc(getVCTOption1(a), __i__12): Ref).Integer__item } 0 <= __i__12 && __i__12 < N ==> acc((loc(getVCTOption1(a), __i__12): Ref).Integer__item, write)) && (b != (VCTNone(): VCTOption[VCTArray[Ref]]) && N <= (alen(getVCTOption1(b)): Int) && (forall __i__13: Int :: { (loc(getVCTOption1(b), __i__13): Ref).Integer__item } 0 <= __i__13 && __i__13 < N ==> acc((loc(getVCTOption1(b), __i__13): Ref).Integer__item, 1 / 2))) && (c != (VCTNone(): VCTOption[VCTArray[Ref]]) && N <= (alen(getVCTOption1(c)): Int) && (forall __i__14: Int :: { (loc(getVCTOption1(c), __i__14): Ref).Integer__item } 0 <= __i__14 && __i__14 < N ==> acc((loc(getVCTOption1(c), __i__14): Ref).Integer__item, write))))
  // assert
  assert false
  inhale false
}

method Ref_loop_body_16_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], N: Int)
  requires diz != null
  requires 0 <= i && i < N
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires acc((loc(getVCTOption1(a), i): Ref).Integer__item, write)
  requires acc((loc(getVCTOption1(c), i): Ref).Integer__item, write)
  requires acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2)
  ensures 0 <= i && i < N
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures acc((loc(getVCTOption1(a), i): Ref).Integer__item, write)
  ensures acc((loc(getVCTOption1(c), i): Ref).Integer__item, write)
  ensures acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2)
{
  var __flatten_10__15: Ref
  var __flatten_11__16: Ref
  var __flatten_12__17: Ref
  var __flatten_13__18: Ref
  __flatten_10__15 := (loc(getVCTOption1(a), i): Ref)
  __flatten_11__16 := (loc(getVCTOption1(b), i): Ref)
  __flatten_10__15.Integer__item := __flatten_11__16.Integer__item + 1
  __flatten_12__17 := (loc(getVCTOption1(c), i): Ref)
  __flatten_13__18 := (loc(getVCTOption1(a), i): Ref)
  __flatten_12__17.Integer__item := __flatten_13__18.Integer__item + 2
}

method Ref_parrallel_region_main_4_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, N: Int, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires (0 < N ==> a != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < N ==> b != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < N ==> c != (VCTNone(): VCTOption[VCTArray[Ref]]))
  requires (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(c), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2))
  ensures (0 < N ==> a != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < N ==> b != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < N ==> c != (VCTNone(): VCTOption[VCTArray[Ref]]))
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, write))
  ensures (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(c), i): Ref).Integer__item, write))
  ensures (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2))
{
  inhale false
}

method Ref_indep_drf_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, globals: Ref, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], N: Int)
  requires diz != null
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires N <= (alen(getVCTOption1(a)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(a), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(a), __i): Ref).Integer__item, write))
  requires b != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires N <= (alen(getVCTOption1(b)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(b), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(b), __i): Ref).Integer__item, 1 / 2))
  requires c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires N <= (alen(getVCTOption1(c)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(c), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(c), __i): Ref).Integer__item, write))
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures N <= (alen(getVCTOption1(a)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(a), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(a), __i): Ref).Integer__item, write))
  ensures b != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures N <= (alen(getVCTOption1(b)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(b), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(b), __i): Ref).Integer__item, 1 / 2))
  ensures c != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures N <= (alen(getVCTOption1(c)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(c), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(c), __i): Ref).Integer__item, write))
{
  Ref_parrallel_region_main_4_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz, N, a, b, c)
}

method Ref___contract_unsatisfiable__forward_drf_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, globals: Ref, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], N: Int)
  requires diz != null
{
  inhale true && (a != (VCTNone(): VCTOption[VCTArray[Ref]]) && N <= (alen(getVCTOption1(a)): Int) && (forall __i__19: Int :: { (loc(getVCTOption1(a), __i__19): Ref).Integer__item } 0 <= __i__19 && __i__19 < N ==> acc((loc(getVCTOption1(a), __i__19): Ref).Integer__item, write)) && (b != (VCTNone(): VCTOption[VCTArray[Ref]]) && N <= (alen(getVCTOption1(b)): Int) && (forall __i__20: Int :: { (loc(getVCTOption1(b), __i__20): Ref).Integer__item } 0 <= __i__20 && __i__20 < N ==> acc((loc(getVCTOption1(b), __i__20): Ref).Integer__item, 1 / 2))) && (c != (VCTNone(): VCTOption[VCTArray[Ref]]) && N <= (alen(getVCTOption1(c)): Int) && (forall __i__21: Int :: { (loc(getVCTOption1(c), __i__21): Ref).Integer__item } 0 <= __i__21 && __i__21 < N ==> acc((loc(getVCTOption1(c), __i__21): Ref).Integer__item, write))))
  // assert
  assert false
  inhale false
}

method Ref_send_body_21_Option$Array$Cell$Integer$$$_Integer_Integer(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, N: Int)
  requires diz != null
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 <= i
  requires i < N - 1
  requires acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2)
{
  inhale false
}

method Ref_recv_body_22_Option$Array$Cell$Integer$$$_Integer_Integer(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, N: Int)
  requires diz != null
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures 0 < i
  ensures i < N
  ensures acc((loc(getVCTOption1(a), i - 1): Ref).Integer__item, 1 / 2)
{
  inhale false
}

method Ref_loop_body_20_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, b: VCTOption[VCTArray[Ref]], N: Int, c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires 0 <= i && i < N
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires acc((loc(getVCTOption1(a), i): Ref).Integer__item, write)
  requires acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2)
  requires acc((loc(getVCTOption1(c), i): Ref).Integer__item, write)
  ensures 0 <= i && i < N
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2)
  ensures acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2)
  ensures acc((loc(getVCTOption1(c), i): Ref).Integer__item, write)
  ensures 0 < i ==> acc((loc(getVCTOption1(a), i - 1): Ref).Integer__item, 1 / 2)
  ensures i == N - 1 ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2)
{
  var __flatten_15__22: Ref
  var __flatten_16__23: Ref
  var __flatten_19__24: Ref
  var __flatten_20__25: Ref
  __flatten_15__22 := (loc(getVCTOption1(a), i): Ref)
  __flatten_16__23 := (loc(getVCTOption1(b), i): Ref)
  __flatten_15__22.Integer__item := __flatten_16__23.Integer__item + 1
  if (i < N - 1) {
    Ref_send_body_21_Option$Array$Cell$Integer$$$_Integer_Integer(diz, a, i, N)
  }
  if (0 < i) {
    Ref_recv_body_22_Option$Array$Cell$Integer$$$_Integer_Integer(diz, a, i, N)
    __flatten_19__24 := (loc(getVCTOption1(c), i): Ref)
    __flatten_20__25 := (loc(getVCTOption1(a), i - 1): Ref)
    __flatten_19__24.Integer__item := __flatten_20__25.Integer__item + 2
  }
}

method Ref_guard_check_S1_S2_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, b: VCTOption[VCTArray[Ref]], N: Int, c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires 0 <= i && i < N
  requires 0 < i
  ensures 1 <= i
  ensures i - 1 < N - 1
{
  
}

method Ref_resource_check_S1_S2_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, b: VCTOption[VCTArray[Ref]], N: Int, c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires 0 <= i && i < N
  requires i - 1 < N - 1
  requires 0 < i
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 <= i - 1
  requires i - 1 < N - 1
  requires acc((loc(getVCTOption1(a), i - 1): Ref).Integer__item, 1 / 2)
  ensures i - 1 < N - 1
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures 0 < i
  ensures i < N
  ensures acc((loc(getVCTOption1(a), i - 1): Ref).Integer__item, 1 / 2)
{
  
}

method Ref_parrallel_region_main_5_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, N: Int, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires (0 < N ==> a != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < N ==> b != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < N ==> c != (VCTNone(): VCTOption[VCTArray[Ref]]))
  requires (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2))
  requires (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(c), i): Ref).Integer__item, write))
  ensures (0 < N ==> a != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < N ==> b != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < N ==> c != (VCTNone(): VCTOption[VCTArray[Ref]]))
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2))
  ensures (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2))
  ensures (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(c), i): Ref).Integer__item, write))
  ensures (forall k_fresh_rw_0: Int :: { (loc(getVCTOption1(a), k_fresh_rw_0): Ref) } 0 <= k_fresh_rw_0 + 1 && k_fresh_rw_0 + 1 < N && 0 < k_fresh_rw_0 + 1 ==> acc((loc(getVCTOption1(a), k_fresh_rw_0): Ref).Integer__item, 1 / 2))
  ensures 0 <= N - 1 && N - 1 < N ==> acc((loc(getVCTOption1(a), N - 1): Ref).Integer__item, 1 / 2)
{
  inhale false
}

method Ref_forward_drf_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, globals: Ref, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], N: Int)
  requires diz != null
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires N <= (alen(getVCTOption1(a)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(a), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(a), __i): Ref).Integer__item, write))
  requires b != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires N <= (alen(getVCTOption1(b)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(b), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(b), __i): Ref).Integer__item, 1 / 2))
  requires c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires N <= (alen(getVCTOption1(c)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(c), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(c), __i): Ref).Integer__item, write))
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures N <= (alen(getVCTOption1(a)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(a), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(a), __i): Ref).Integer__item, write))
  ensures b != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures N <= (alen(getVCTOption1(b)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(b), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(b), __i): Ref).Integer__item, 1 / 2))
  ensures c != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures N <= (alen(getVCTOption1(c)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(c), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(c), __i): Ref).Integer__item, write))
{
  Ref_parrallel_region_main_5_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz, N, a, b, c)
}

method Ref___contract_unsatisfiable__forward_full_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, globals: Ref, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], len: Int)
  requires diz != null
{
  inhale true && (a != (VCTNone(): VCTOption[VCTArray[Ref]]) && len <= (alen(getVCTOption1(a)): Int) && (forall __i__26: Int :: { (loc(getVCTOption1(a), __i__26): Ref).Integer__item } 0 <= __i__26 && __i__26 < len ==> acc((loc(getVCTOption1(a), __i__26): Ref).Integer__item, write)) && (b != (VCTNone(): VCTOption[VCTArray[Ref]]) && len <= (alen(getVCTOption1(b)): Int) && (forall __i__27: Int :: { (loc(getVCTOption1(b), __i__27): Ref).Integer__item } 0 <= __i__27 && __i__27 < len ==> acc((loc(getVCTOption1(b), __i__27): Ref).Integer__item, 1 / 2))) && (c != (VCTNone(): VCTOption[VCTArray[Ref]]) && len <= (alen(getVCTOption1(c)): Int) && (forall __i__28: Int :: { (loc(getVCTOption1(c), __i__28): Ref).Integer__item } 0 <= __i__28 && __i__28 < len ==> acc((loc(getVCTOption1(c), __i__28): Ref).Integer__item, write))) && (forall i__29: Int :: { (loc(getVCTOption1(b), i__29): Ref) } 0 <= i__29 && i__29 < len ==> (loc(getVCTOption1(b), i__29): Ref).Integer__item == i__29))
  // assert
  assert false
  inhale false
}

method Ref_send_body_27_Option$Array$Cell$Integer$$$_Integer_Integer(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, len: Int)
  requires diz != null
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 <= i
  requires i < len - 1
  requires acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2)
  requires (loc(getVCTOption1(a), i): Ref).Integer__item == i + 1
{
  inhale false
}

method Ref_recv_body_28_Option$Array$Cell$Integer$$$_Integer_Integer(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, len: Int)
  requires diz != null
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures 0 < i
  ensures i < len
  ensures acc((loc(getVCTOption1(a), i - 1): Ref).Integer__item, 1 / 2)
  ensures (loc(getVCTOption1(a), i - 1): Ref).Integer__item == i
{
  inhale false
}

method Ref_loop_body_26_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, b: VCTOption[VCTArray[Ref]], len: Int, c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires 0 <= i && i < len
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires acc((loc(getVCTOption1(a), i): Ref).Integer__item, write)
  requires acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2)
  requires acc((loc(getVCTOption1(c), i): Ref).Integer__item, write)
  requires (loc(getVCTOption1(b), i): Ref).Integer__item == i
  ensures 0 <= i && i < len
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2)
  ensures acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2)
  ensures acc((loc(getVCTOption1(c), i): Ref).Integer__item, write)
  ensures 0 < i ==> acc((loc(getVCTOption1(a), i - 1): Ref).Integer__item, 1 / 2)
  ensures i == len - 1 ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2)
  ensures (loc(getVCTOption1(a), i): Ref).Integer__item == i + 1 && (loc(getVCTOption1(b), i): Ref).Integer__item == i && (0 < i ==> (loc(getVCTOption1(c), i): Ref).Integer__item == i + 2)
{
  var __flatten_22__30: Ref
  var __flatten_23__31: Ref
  var __flatten_26__32: Ref
  var __flatten_27__33: Ref
  __flatten_22__30 := (loc(getVCTOption1(a), i): Ref)
  __flatten_23__31 := (loc(getVCTOption1(b), i): Ref)
  __flatten_22__30.Integer__item := __flatten_23__31.Integer__item + 1
  if (i < len - 1) {
    Ref_send_body_27_Option$Array$Cell$Integer$$$_Integer_Integer(diz, a, i, len)
  }
  if (0 < i) {
    Ref_recv_body_28_Option$Array$Cell$Integer$$$_Integer_Integer(diz, a, i, len)
    __flatten_26__32 := (loc(getVCTOption1(c), i): Ref)
    __flatten_27__33 := (loc(getVCTOption1(a), i - 1): Ref)
    __flatten_26__32.Integer__item := __flatten_27__33.Integer__item + 2
  }
}

method Ref_guard_check_FS1_FS2_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, b: VCTOption[VCTArray[Ref]], len: Int, c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires 0 <= i && i < len
  requires 0 < i
  ensures 1 <= i
  ensures i - 1 < len - 1
{
  
}

method Ref_resource_check_FS1_FS2_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, b: VCTOption[VCTArray[Ref]], len: Int, c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires 0 <= i && i < len
  requires i - 1 < len - 1
  requires 0 < i
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 <= i - 1
  requires i - 1 < len - 1
  requires acc((loc(getVCTOption1(a), i - 1): Ref).Integer__item, 1 / 2)
  requires (loc(getVCTOption1(a), i - 1): Ref).Integer__item == i - 1 + 1
  ensures i - 1 < len - 1
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures 0 < i
  ensures i < len
  ensures acc((loc(getVCTOption1(a), i - 1): Ref).Integer__item, 1 / 2)
  ensures (loc(getVCTOption1(a), i - 1): Ref).Integer__item == i
{
  
}

method Ref_parrallel_region_main_6_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, len: Int, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires (0 < len ==> a != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < len ==> b != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < len ==> c != (VCTNone(): VCTOption[VCTArray[Ref]]))
  requires (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2))
  requires (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(c), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(b), i): Ref).Integer__item == i)
  ensures (0 < len ==> a != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < len ==> b != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < len ==> c != (VCTNone(): VCTOption[VCTArray[Ref]]))
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2))
  ensures (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2))
  ensures (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(c), i): Ref).Integer__item, write))
  ensures (forall k_fresh_rw_0: Int :: { (loc(getVCTOption1(a), k_fresh_rw_0): Ref) } 0 <= k_fresh_rw_0 + 1 && k_fresh_rw_0 + 1 < len && 0 < k_fresh_rw_0 + 1 ==> acc((loc(getVCTOption1(a), k_fresh_rw_0): Ref).Integer__item, 1 / 2))
  ensures 0 <= len - 1 && len - 1 < len ==> acc((loc(getVCTOption1(a), len - 1): Ref).Integer__item, 1 / 2)
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(a), i): Ref).Integer__item == i + 1) && (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(b), i): Ref).Integer__item == i) && (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < len && 0 < i ==> (loc(getVCTOption1(c), i): Ref).Integer__item == i + 2)
{
  inhale false
}

method Ref_forward_full_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, globals: Ref, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], len: Int)
  requires diz != null
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires len <= (alen(getVCTOption1(a)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(a), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(a), __i): Ref).Integer__item, write))
  requires b != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires len <= (alen(getVCTOption1(b)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(b), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(b), __i): Ref).Integer__item, 1 / 2))
  requires c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires len <= (alen(getVCTOption1(c)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(c), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(c), __i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(b), i): Ref).Integer__item == i)
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures len <= (alen(getVCTOption1(a)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(a), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(a), __i): Ref).Integer__item, write))
  ensures b != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures len <= (alen(getVCTOption1(b)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(b), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(b), __i): Ref).Integer__item, 1 / 2))
  ensures c != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures len <= (alen(getVCTOption1(c)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(c), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(c), __i): Ref).Integer__item, write))
  ensures (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(b), i): Ref).Integer__item == i)
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(a), i): Ref).Integer__item == i + 1)
  ensures (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 < i && i < len ==> (loc(getVCTOption1(c), i): Ref).Integer__item == i + 2)
{
  Ref_parrallel_region_main_6_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz, len, a, b, c)
}

method Ref___contract_unsatisfiable__backward_drf_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, globals: Ref, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], N: Int)
  requires diz != null
{
  inhale true && (a != (VCTNone(): VCTOption[VCTArray[Ref]]) && N <= (alen(getVCTOption1(a)): Int) && (forall __i__34: Int :: { (loc(getVCTOption1(a), __i__34): Ref).Integer__item } 0 <= __i__34 && __i__34 < N ==> acc((loc(getVCTOption1(a), __i__34): Ref).Integer__item, write)) && (b != (VCTNone(): VCTOption[VCTArray[Ref]]) && N <= (alen(getVCTOption1(b)): Int) && (forall __i__35: Int :: { (loc(getVCTOption1(b), __i__35): Ref).Integer__item } 0 <= __i__35 && __i__35 < N ==> acc((loc(getVCTOption1(b), __i__35): Ref).Integer__item, 1 / 2))) && (c != (VCTNone(): VCTOption[VCTArray[Ref]]) && N <= (alen(getVCTOption1(c)): Int) && (forall __i__36: Int :: { (loc(getVCTOption1(c), __i__36): Ref).Integer__item } 0 <= __i__36 && __i__36 < N ==> acc((loc(getVCTOption1(c), __i__36): Ref).Integer__item, write))))
  // assert
  assert false
  inhale false
}

method Ref_recv_body_33_Option$Array$Cell$Integer$$$_Integer_Integer(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, N: Int)
  requires diz != null
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures 0 < i
  ensures i < N
  ensures acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2)
{
  inhale false
}

method Ref_send_body_34_Option$Array$Cell$Integer$$$_Integer_Integer(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, N: Int)
  requires diz != null
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 <= i
  requires i < N - 1
  requires acc((loc(getVCTOption1(a), i + 1): Ref).Integer__item, 1 / 2)
{
  inhale false
}

method Ref_loop_body_32_Integer_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, i: Int, a: VCTOption[VCTArray[Ref]], N: Int, b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires 0 <= i && i < N
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2)
  requires acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2)
  requires acc((loc(getVCTOption1(c), i): Ref).Integer__item, write)
  requires i == 0 ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2)
  requires i < N - 1 ==> acc((loc(getVCTOption1(a), i + 1): Ref).Integer__item, 1 / 2)
  ensures 0 <= i && i < N
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2)
  ensures acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2)
  ensures acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2)
  ensures acc((loc(getVCTOption1(c), i): Ref).Integer__item, write)
{
  var __flatten_30__37: Ref
  var __flatten_31__38: Ref
  var __flatten_32__39: Ref
  var __flatten_33__40: Ref
  if (0 < i) {
    Ref_recv_body_33_Option$Array$Cell$Integer$$$_Integer_Integer(diz, a, i, N)
  }
  __flatten_30__37 := (loc(getVCTOption1(a), i): Ref)
  __flatten_31__38 := (loc(getVCTOption1(b), i): Ref)
  __flatten_30__37.Integer__item := __flatten_31__38.Integer__item + 1
  if (i < N - 1) {
    __flatten_32__39 := (loc(getVCTOption1(c), i): Ref)
    __flatten_33__40 := (loc(getVCTOption1(a), i + 1): Ref)
    __flatten_32__39.Integer__item := __flatten_33__40.Integer__item + 2
    Ref_send_body_34_Option$Array$Cell$Integer$$$_Integer_Integer(diz, a, i, N)
  }
}

method Ref_guard_check_T2_T1_Integer_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, i: Int, a: VCTOption[VCTArray[Ref]], N: Int, b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires 0 <= i && i < N
  requires 0 < i
  ensures 1 <= i
  ensures i - 1 < N - 1
{
  
}

method Ref_resource_check_T2_T1_Integer_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, i: Int, a: VCTOption[VCTArray[Ref]], N: Int, b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires 0 <= i && i < N
  requires i - 1 < N - 1
  requires 0 < i
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 <= i - 1
  requires i - 1 < N - 1
  requires acc((loc(getVCTOption1(a), i - 1 + 1): Ref).Integer__item, 1 / 2)
  ensures i - 1 < N - 1
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures 0 < i
  ensures i < N
  ensures acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2)
{
  
}

method Ref_parrallel_region_main_7_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, N: Int, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires (0 < N ==> a != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < N ==> b != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < N ==> c != (VCTNone(): VCTOption[VCTArray[Ref]]))
  requires (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2))
  requires (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2))
  requires (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(c), i): Ref).Integer__item, write))
  requires 0 <= 0 && 0 < N ==> acc((loc(getVCTOption1(a), 0): Ref).Integer__item, 1 / 2)
  requires (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 1 <= i && i < (N - 1 < N ? N - 1 : N) + 1 ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2))
  ensures (0 < N ==> a != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < N ==> b != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < N ==> c != (VCTNone(): VCTOption[VCTArray[Ref]]))
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2))
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2))
  ensures (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2))
  ensures (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < N ==> acc((loc(getVCTOption1(c), i): Ref).Integer__item, write))
{
  inhale false
}

method Ref_backward_drf_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, globals: Ref, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], N: Int)
  requires diz != null
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires N <= (alen(getVCTOption1(a)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(a), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(a), __i): Ref).Integer__item, write))
  requires b != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires N <= (alen(getVCTOption1(b)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(b), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(b), __i): Ref).Integer__item, 1 / 2))
  requires c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires N <= (alen(getVCTOption1(c)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(c), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(c), __i): Ref).Integer__item, write))
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures N <= (alen(getVCTOption1(a)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(a), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(a), __i): Ref).Integer__item, write))
  ensures b != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures N <= (alen(getVCTOption1(b)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(b), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(b), __i): Ref).Integer__item, 1 / 2))
  ensures c != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures N <= (alen(getVCTOption1(c)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(c), __i): Ref).Integer__item } 0 <= __i && __i < N ==> acc((loc(getVCTOption1(c), __i): Ref).Integer__item, write))
{
  Ref_parrallel_region_main_7_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz, N, a, b, c)
}

method Ref___contract_unsatisfiable__backward_full_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, globals: Ref, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], len: Int)
  requires diz != null
{
  inhale true && (a != (VCTNone(): VCTOption[VCTArray[Ref]]) && len <= (alen(getVCTOption1(a)): Int) && (forall __i__41: Int :: { (loc(getVCTOption1(a), __i__41): Ref).Integer__item } 0 <= __i__41 && __i__41 < len ==> acc((loc(getVCTOption1(a), __i__41): Ref).Integer__item, write)) && (b != (VCTNone(): VCTOption[VCTArray[Ref]]) && len <= (alen(getVCTOption1(b)): Int) && (forall __i__42: Int :: { (loc(getVCTOption1(b), __i__42): Ref).Integer__item } 0 <= __i__42 && __i__42 < len ==> acc((loc(getVCTOption1(b), __i__42): Ref).Integer__item, 1 / 2))) && (c != (VCTNone(): VCTOption[VCTArray[Ref]]) && len <= (alen(getVCTOption1(c)): Int) && (forall __i__43: Int :: { (loc(getVCTOption1(c), __i__43): Ref).Integer__item } 0 <= __i__43 && __i__43 < len ==> acc((loc(getVCTOption1(c), __i__43): Ref).Integer__item, write))) && (forall tid__44: Int :: { (loc(getVCTOption1(a), tid__44): Ref) } 0 <= tid__44 && tid__44 < len ==> (loc(getVCTOption1(a), tid__44): Ref).Integer__item == 0) && (forall tid__45: Int :: { (loc(getVCTOption1(b), tid__45): Ref) } 0 <= tid__45 && tid__45 < len ==> (loc(getVCTOption1(b), tid__45): Ref).Integer__item == tid__45))
  // assert
  assert false
  inhale false
}

method Ref_recv_body_39_Option$Array$Cell$Integer$$$_Integer_Integer(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, len: Int)
  requires diz != null
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures 0 < i
  ensures i < len
  ensures i == i - 1 + 1
  ensures acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2)
{
  inhale false
}

method Ref_send_body_40_Option$Array$Cell$Integer$$$_Integer_Integer(diz: Ref, a: VCTOption[VCTArray[Ref]], i: Int, len: Int)
  requires diz != null
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 <= i
  requires i < len - 1
  requires acc((loc(getVCTOption1(a), i + 1): Ref).Integer__item, 1 / 2)
{
  inhale false
}

method Ref_loop_body_38_Integer_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, i: Int, a: VCTOption[VCTArray[Ref]], len: Int, b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires 0 <= i && i < len
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2)
  requires i == 0 ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2)
  requires i < len - 1 ==> acc((loc(getVCTOption1(a), i + 1): Ref).Integer__item, 1 / 2)
  requires acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2)
  requires acc((loc(getVCTOption1(c), i): Ref).Integer__item, write)
  requires i < len - 1 ==> (loc(getVCTOption1(a), i + 1): Ref).Integer__item == 0
  requires (loc(getVCTOption1(b), i): Ref).Integer__item == i
  ensures 0 <= i && i < len
  ensures acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2)
  ensures acc((loc(getVCTOption1(c), i): Ref).Integer__item, write)
  ensures (loc(getVCTOption1(b), i): Ref).Integer__item == i
  ensures acc((loc(getVCTOption1(a), i): Ref).Integer__item, write)
  ensures (loc(getVCTOption1(a), i): Ref).Integer__item == i + 1
  ensures i < len - 1 ==> (loc(getVCTOption1(c), i): Ref).Integer__item == 2
{
  var __flatten_37__46: Ref
  var __flatten_38__47: Ref
  var __flatten_39__48: Ref
  var __flatten_40__49: Ref
  if (0 < i) {
    Ref_recv_body_39_Option$Array$Cell$Integer$$$_Integer_Integer(diz, a, i, len)
  }
  __flatten_37__46 := (loc(getVCTOption1(a), i): Ref)
  __flatten_38__47 := (loc(getVCTOption1(b), i): Ref)
  __flatten_37__46.Integer__item := __flatten_38__47.Integer__item + 1
  if (i < len - 1) {
    __flatten_39__48 := (loc(getVCTOption1(c), i): Ref)
    __flatten_40__49 := (loc(getVCTOption1(a), i + 1): Ref)
    __flatten_39__48.Integer__item := __flatten_40__49.Integer__item + 2
    Ref_send_body_40_Option$Array$Cell$Integer$$$_Integer_Integer(diz, a, i, len)
  }
}

method Ref_guard_check_FT2_FT1_Integer_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, i: Int, a: VCTOption[VCTArray[Ref]], len: Int, b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires 0 <= i && i < len
  requires 0 < i
  ensures 1 <= i
  ensures i - 1 < len - 1
{
  
}

method Ref_resource_check_FT2_FT1_Integer_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, i: Int, a: VCTOption[VCTArray[Ref]], len: Int, b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires 0 <= i && i < len
  requires i - 1 < len - 1
  requires 0 < i
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 <= i - 1
  requires i - 1 < len - 1
  requires acc((loc(getVCTOption1(a), i - 1 + 1): Ref).Integer__item, 1 / 2)
  ensures i - 1 < len - 1
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures 0 < i
  ensures i < len
  ensures i == i - 1 + 1
  ensures acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2)
{
  
}

method Ref_parrallel_region_main_8_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, len: Int, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires (0 < len ==> a != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < len ==> b != (VCTNone(): VCTOption[VCTArray[Ref]])) && (0 < len ==> c != (VCTNone(): VCTOption[VCTArray[Ref]]))
  requires (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2))
  requires 0 <= 0 && 0 < len ==> acc((loc(getVCTOption1(a), 0): Ref).Integer__item, 1 / 2)
  requires (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 1 <= i && i < (len - 1 < len ? len - 1 : len) + 1 ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2))
  requires (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2))
  requires (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(c), i): Ref).Integer__item, write))
  requires (forall i: Int :: 0 <= i && i < (len - 1 < len ? len - 1 : len) ==> (loc(getVCTOption1(a), i + 1): Ref).Integer__item == 0)
  requires (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(b), i): Ref).Integer__item == i)
  ensures (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(b), i): Ref).Integer__item, 1 / 2))
  ensures (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(c), i): Ref).Integer__item, write))
  ensures (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(b), i): Ref).Integer__item == i)
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < len ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, write))
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(a), i): Ref).Integer__item == i + 1)
  ensures (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < (len - 1 < len ? len - 1 : len) ==> (loc(getVCTOption1(c), i): Ref).Integer__item == 2)
{
  inhale false
}

method Ref_backward_full_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, globals: Ref, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], len: Int)
  requires diz != null
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires len <= (alen(getVCTOption1(a)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(a), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(a), __i): Ref).Integer__item, write))
  requires b != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires len <= (alen(getVCTOption1(b)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(b), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(b), __i): Ref).Integer__item, 1 / 2))
  requires c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires len <= (alen(getVCTOption1(c)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(c), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(c), __i): Ref).Integer__item, write))
  requires (forall tid: Int :: { (loc(getVCTOption1(a), tid): Ref) } 0 <= tid && tid < len ==> (loc(getVCTOption1(a), tid): Ref).Integer__item == 0)
  requires (forall tid: Int :: { (loc(getVCTOption1(b), tid): Ref) } 0 <= tid && tid < len ==> (loc(getVCTOption1(b), tid): Ref).Integer__item == tid)
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures len <= (alen(getVCTOption1(a)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(a), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(a), __i): Ref).Integer__item, write))
  ensures b != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures len <= (alen(getVCTOption1(b)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(b), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(b), __i): Ref).Integer__item, 1 / 2))
  ensures c != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures len <= (alen(getVCTOption1(c)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(c), __i): Ref).Integer__item } 0 <= __i && __i < len ==> acc((loc(getVCTOption1(c), __i): Ref).Integer__item, write))
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(a), i): Ref).Integer__item == i + 1)
  ensures (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < len ==> (loc(getVCTOption1(b), i): Ref).Integer__item == i)
  ensures (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < len - 1 ==> (loc(getVCTOption1(c), i): Ref).Integer__item == 2)
{
  Ref_parrallel_region_main_8_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz, len, a, b, c)
}