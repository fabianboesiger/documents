// Generated on 2021-03-23 at 23:42:48
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_ZeroArray(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom ZeroArray_directSuperclass {
    directSuperclass(class_ZeroArray()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

domain VCTArray[CT] {
  
  function loc(a: VCTArray[CT], i: Int): CT
  
  function alen(a: VCTArray[CT]): Int
  
  function first(r: CT): VCTArray[CT]
  
  function second(r: CT): Int
  
  axiom all_diff {
    (forall a: VCTArray[CT], i: Int :: { (loc(a, i): CT) } (first((loc(a, i): CT)): VCTArray[CT]) == a && (second((loc(a, i): CT)): Int) == i)
  }
  
  axiom len_nonneg {
    (forall a: VCTArray[CT] :: { (alen(a): Int) } (alen(a): Int) >= 0)
  }
}

domain VCTOption[T] {
  
  function VCTNone(): VCTOption[T]
  
  function VCTSome(t: T): VCTOption[T]
  
  function getVCTOption(o: VCTOption[T]): T
  
  function getVCTOptionOrElse(o: VCTOption[T], default: T): T
  
  axiom not_equal_vct {
    (forall x: T :: { (VCTSome(x): VCTOption[T]) } (VCTNone(): VCTOption[T]) != (VCTSome(x): VCTOption[T]))
  }
  
  axiom get_axiom_vct {
    (forall x: T :: { (getVCTOption((VCTSome(x): VCTOption[T])): T) } (getVCTOption((VCTSome(x): VCTOption[T])): T) == x)
  }
  
  axiom get_axiom_vct_2 {
    (forall x: VCTOption[T] :: { (VCTSome((getVCTOption(x): T)): VCTOption[T]) } (VCTSome((getVCTOption(x): T)): VCTOption[T]) == x)
  }
  
  axiom get_or_else_axiom_1 {
    (forall val: T, default: T :: { (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) == val)
  }
  
  axiom get_or_else_axiom_2 {
    (forall default: T :: { (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) == default)
  }
}

//  a field 
field Integer__item: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


function getVCTOption1(x: VCTOption[VCTArray[Ref]]): VCTArray[Ref]
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
{
  (getVCTOption(x): VCTArray[Ref])
}

method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method ZeroArray_zero_array_EncodedGlobalVariables_Option$Array$Cell$Integer$$$(diz: Ref, globals: Ref, ar: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (forall i_fresh_rw_0: Int :: { (loc(getVCTOption1(ar), i_fresh_rw_0): Ref) } 0 <= i_fresh_rw_0 && i_fresh_rw_0 < (alen(getVCTOption1(ar)): Int) ==> acc((loc(getVCTOption1(ar), i_fresh_rw_0): Ref).Integer__item, write))
  ensures ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (forall i_fresh_rw_0: Int :: { (loc(getVCTOption1(ar), i_fresh_rw_0): Ref) } 0 <= i_fresh_rw_0 && i_fresh_rw_0 < (alen(getVCTOption1(ar)): Int) ==> acc((loc(getVCTOption1(ar), i_fresh_rw_0): Ref).Integer__item, write))
  ensures (forall k: Int :: { (loc(getVCTOption1(ar), k): Ref) } 0 <= k && k < (alen(getVCTOption1(ar)): Int) ==> (loc(getVCTOption1(ar), k): Ref).Integer__item == 0)
{
  inhale false
}

method ZeroArray___contract_unsatisfiable__internal_zero_array_EncodedGlobalVariables_Option$Array$Cell$Integer$$$(diz: Ref, globals: Ref, ar: VCTOption[VCTArray[Ref]])
  requires diz != null
{
  inhale ar != (VCTNone(): VCTOption[VCTArray[Ref]]) && (forall i_fresh_rw_0__1: Int :: { (loc(getVCTOption1(ar), i_fresh_rw_0__1): Ref) } 0 <= i_fresh_rw_0__1 && i_fresh_rw_0__1 < (alen(getVCTOption1(ar)): Int) ==> acc((loc(getVCTOption1(ar), i_fresh_rw_0__1): Ref).Integer__item, write))
  // assert
  assert false
  inhale false
}

method ZeroArray_loop_body_4_Option$Array$Cell$Integer$$$_Integer(diz: Ref, ar: VCTOption[VCTArray[Ref]], i: Int)
  requires diz != null
  requires ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 <= i && i < (alen(getVCTOption1(ar)): Int)
  requires acc((loc(getVCTOption1(ar), i): Ref).Integer__item, write)
  ensures ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures 0 <= i && i < (alen(getVCTOption1(ar)): Int)
  ensures acc((loc(getVCTOption1(ar), i): Ref).Integer__item, write)
  ensures (loc(getVCTOption1(ar), i): Ref).Integer__item == 0
{
  var __flatten_1__2: Ref
  __flatten_1__2 := (loc(getVCTOption1(ar), i): Ref)
  __flatten_1__2.Integer__item := 0
}

method ZeroArray_parrallel_region_main_1_Option$Array$Cell$Integer$$$(diz: Ref, ar: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (forall i: Int :: { (loc(getVCTOption1(ar), i): Ref) } 0 <= i && i < (alen(getVCTOption1(ar)): Int) ==> acc((loc(getVCTOption1(ar), i): Ref).Integer__item, write))
  ensures ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (forall i: Int :: { (loc(getVCTOption1(ar), i): Ref) } 0 <= i && i < (alen(getVCTOption1(ar)): Int) ==> acc((loc(getVCTOption1(ar), i): Ref).Integer__item, write))
  ensures (forall i: Int :: { (loc(getVCTOption1(ar), i): Ref) } 0 <= i && i < (alen(getVCTOption1(ar)): Int) ==> (loc(getVCTOption1(ar), i): Ref).Integer__item == 0)
{
  inhale false
}

method ZeroArray_internal_zero_array_EncodedGlobalVariables_Option$Array$Cell$Integer$$$(diz: Ref, globals: Ref, ar: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (forall i_fresh_rw_0: Int :: { (loc(getVCTOption1(ar), i_fresh_rw_0): Ref) } 0 <= i_fresh_rw_0 && i_fresh_rw_0 < (alen(getVCTOption1(ar)): Int) ==> acc((loc(getVCTOption1(ar), i_fresh_rw_0): Ref).Integer__item, write))
  ensures ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (forall i_fresh_rw_0: Int :: { (loc(getVCTOption1(ar), i_fresh_rw_0): Ref) } 0 <= i_fresh_rw_0 && i_fresh_rw_0 < (alen(getVCTOption1(ar)): Int) ==> acc((loc(getVCTOption1(ar), i_fresh_rw_0): Ref).Integer__item, write))
  ensures (forall k: Int :: { (loc(getVCTOption1(ar), k): Ref) } 0 <= k && k < (alen(getVCTOption1(ar)): Int) ==> (loc(getVCTOption1(ar), k): Ref).Integer__item == 0)
{
  ZeroArray_parrallel_region_main_1_Option$Array$Cell$Integer$$$(diz, ar)
}