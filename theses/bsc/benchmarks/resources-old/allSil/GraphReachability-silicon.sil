// Generated on 2021-03-23 at 23:32:33
domain TYPE {
  
  unique function class_Graph(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Graph_directSuperclass {
    directSuperclass(class_Graph()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

domain VCTArray[CT] {
  
  function loc(a: VCTArray[CT], i: Int): CT
  
  function alen(a: VCTArray[CT]): Int
  
  function first(r: CT): VCTArray[CT]
  
  function second(r: CT): Int
  
  axiom all_diff {
    (forall a: VCTArray[CT], i: Int :: { (loc(a, i): CT) } (first((loc(a, i): CT)): VCTArray[CT]) == a && (second((loc(a, i): CT)): Int) == i)
  }
  
  axiom len_nonneg {
    (forall a: VCTArray[CT] :: { (alen(a): Int) } (alen(a): Int) >= 0)
  }
}

domain VCTOption[T] {
  
  function VCTNone(): VCTOption[T]
  
  function VCTSome(t: T): VCTOption[T]
  
  function getVCTOption(o: VCTOption[T]): T
  
  function getVCTOptionOrElse(o: VCTOption[T], default: T): T
  
  axiom not_equal_vct {
    (forall x: T :: { (VCTSome(x): VCTOption[T]) } (VCTNone(): VCTOption[T]) != (VCTSome(x): VCTOption[T]))
  }
  
  axiom get_axiom_vct {
    (forall x: T :: { (getVCTOption((VCTSome(x): VCTOption[T])): T) } (getVCTOption((VCTSome(x): VCTOption[T])): T) == x)
  }
  
  axiom get_axiom_vct_2 {
    (forall x: VCTOption[T] :: { (VCTSome((getVCTOption(x): T)): VCTOption[T]) } (VCTSome((getVCTOption(x): T)): VCTOption[T]) == x)
  }
  
  axiom get_or_else_axiom_1 {
    (forall val: T, default: T :: { (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) == val)
  }
  
  axiom get_or_else_axiom_2 {
    (forall default: T :: { (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) == default)
  }
}

//  a field 
field Boolean__item: Bool

function Graph_graph_Integer_Sequence$Sequence$Boolean$$(diz: Ref, n: Int, G: Seq[Seq[Bool]]): Bool
  requires diz != null
{
  |G| == n && (forall e: Seq[Bool] :: { |e| } (e in G) ==> |e| == n)
}

function Graph_Path_Integer_Sequence$Sequence$Boolean$$_Sequence$Integer$(diz: Ref, n: Int, G: Seq[Seq[Bool]], P: Seq[Int]): Bool
  requires diz != null
  requires Graph_graph_Integer_Sequence$Sequence$Boolean$$(diz, n, G)
{
  (forall j: Int :: { P[j] } 0 <= j && j < |P| ==> 0 <= P[j] && P[j] < n) && (forall j: Int :: 0 <= j && j < |P| - 1 ==> G[P[j]][P[j + 1]])
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


function getVCTOption1(x: VCTOption[VCTArray[Ref]]): VCTArray[Ref]
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
{
  (getVCTOption(x): VCTArray[Ref])
}

method Graph___contract_unsatisfiable__search_EncodedGlobalVariables_Integer_Sequence$Sequence$Boolean$$_Integer_Integer_Sequence$Integer$(diz: Ref, globals: Ref, n: Int, G: Seq[Seq[Bool]], x: Int, y: Int) returns (sys__result: Bool, P: Seq[Int])
  requires diz != null
{
  inhale true && (0 < n && Graph_graph_Integer_Sequence$Sequence$Boolean$$(diz, n, G) && (0 <= x && x < n && 0 <= y && y < n))
  // assert
  assert false
  inhale false
}

method Graph_search_EncodedGlobalVariables_Integer_Sequence$Sequence$Boolean$$_Integer_Integer_Sequence$Integer$(diz: Ref, globals: Ref, n: Int, G: Seq[Seq[Bool]], x: Int, y: Int) returns (sys__result: Bool, P: Seq[Int])
  requires diz != null
  requires 0 < n && Graph_graph_Integer_Sequence$Sequence$Boolean$$(diz, n, G)
  requires 0 <= x && x < n && 0 <= y && y < n
  ensures sys__result ==> 0 < |P|
  ensures sys__result ==> P[0] == x && P[|P| - 1] == y
  ensures sys__result ==> Graph_Path_Integer_Sequence$Sequence$Boolean$$_Sequence$Integer$(diz, n, G, P)
{
  var sys__local__result__1: Bool
  var marked__2: VCTOption[VCTArray[Ref]]
  var i__3: Int
  var __flatten_2__4: Ref
  marked__2 := array_new_Option_Array_Cell_Boolean____Integer(n)
  i__3 := 0
  while (i__3 < n)
    invariant 0 <= i__3 && i__3 <= n
    invariant (forall j__5: Int :: { (loc(getVCTOption1(marked__2), j__5): Ref) } 0 <= j__5 && j__5 < n ==> acc((loc(getVCTOption1(marked__2), j__5): Ref).Boolean__item, write))
    invariant (forall j__6: Int :: { (loc(getVCTOption1(marked__2), j__6): Ref) } 0 <= j__6 && j__6 < i__3 ==> !(loc(getVCTOption1(marked__2), j__6): Ref).Boolean__item) 
  {
    __flatten_2__4 := (loc(getVCTOption1(marked__2), i__3): Ref)
    __flatten_2__4.Boolean__item := false
    i__3 := i__3 + 1
  }
  sys__local__result__1, P := Graph_explore_EncodedGlobalVariables_Integer_Sequence$Sequence$Boolean$$_Option$Array$Cell$Boolean$$$_Integer_Integer_Sequence$Integer$(diz, globals, n, G, marked__2, x, y)
  // assert
  assert (sys__local__result__1 ==> 0 < |P|) && (sys__local__result__1 ==> P[0] == x && P[|P| - 1] == y) && (sys__local__result__1 ==> Graph_Path_Integer_Sequence$Sequence$Boolean$$_Sequence$Integer$(diz, n, G, P))
  goto __return_search
  label __return_search
  sys__result := sys__local__result__1
  // assert
  assert (sys__result ==> 0 < |P|) && (sys__result ==> P[0] == x && P[|P| - 1] == y) && (sys__result ==> Graph_Path_Integer_Sequence$Sequence$Boolean$$_Sequence$Integer$(diz, n, G, P))
  inhale false
}

method Graph___contract_unsatisfiable__explore_EncodedGlobalVariables_Integer_Sequence$Sequence$Boolean$$_Option$Array$Cell$Boolean$$$_Integer_Integer_Sequence$Integer$(diz: Ref, globals: Ref, n: Int, G: Seq[Seq[Bool]], marked: VCTOption[VCTArray[Ref]], x: Int, y: Int) returns (sys__result: Bool, P: Seq[Int])
  requires diz != null
{
  inhale marked != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(marked)): Int) == n && (0 <= x && x < n && 0 <= y && y < n) && (0 < n && Graph_graph_Integer_Sequence$Sequence$Boolean$$(diz, n, G) && (forall j__7: Int :: { (loc(getVCTOption1(marked), j__7): Ref) } 0 <= j__7 && j__7 < n ==> acc((loc(getVCTOption1(marked), j__7): Ref).Boolean__item, write)))
  // assert
  assert false
  inhale false
}

method Graph_explore_EncodedGlobalVariables_Integer_Sequence$Sequence$Boolean$$_Option$Array$Cell$Boolean$$$_Integer_Integer_Sequence$Integer$(diz: Ref, globals: Ref, n: Int, G: Seq[Seq[Bool]], marked: VCTOption[VCTArray[Ref]], x: Int, y: Int) returns (sys__result: Bool, P: Seq[Int])
  requires diz != null
  requires marked != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(marked)): Int) == n
  requires 0 <= x && x < n && 0 <= y && y < n
  requires 0 < n && Graph_graph_Integer_Sequence$Sequence$Boolean$$(diz, n, G)
  requires (forall j: Int :: { (loc(getVCTOption1(marked), j): Ref) } 0 <= j && j < n ==> acc((loc(getVCTOption1(marked), j): Ref).Boolean__item, write))
  ensures marked != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(marked)): Int) == n
  ensures 0 <= x && x < n && 0 <= y && y < n
  ensures 0 < n && Graph_graph_Integer_Sequence$Sequence$Boolean$$(diz, n, G)
  ensures (forall j: Int :: { (loc(getVCTOption1(marked), j): Ref) } 0 <= j && j < n ==> acc((loc(getVCTOption1(marked), j): Ref).Boolean__item, write))
  ensures sys__result ==> 0 < |P|
  ensures sys__result ==> P[0] == x && P[|P| - 1] == y
  ensures sys__result ==> Graph_Path_Integer_Sequence$Sequence$Boolean$$_Sequence$Integer$(diz, n, G, P)
{
  var rec__16: Bool
  var sys__local__result__8: Bool
  var __flatten_4__9: Seq[Int]
  var __flatten_5__11: Ref
  var next__12: Int
  var __flatten_6__13: Ref
  var __flatten_8__14: Seq[Int]
  if (x == y) {
    __flatten_4__9 := Seq(x)
    P := __flatten_4__9
    sys__local__result__8 := true
    // assert
    assert 0 < n && Graph_graph_Integer_Sequence$Sequence$Boolean$$(diz, n, G) && (forall j__10: Int :: { (loc(getVCTOption1(marked), j__10): Ref) } 0 <= j__10 && j__10 < n ==> acc((loc(getVCTOption1(marked), j__10): Ref).Boolean__item, write)) && (sys__local__result__8 ==> 0 < |P|) && (sys__local__result__8 ==> P[0] == x && P[|P| - 1] == y) && (sys__local__result__8 ==> Graph_Path_Integer_Sequence$Sequence$Boolean$$_Sequence$Integer$(diz, n, G, P))
    goto __return_explore
  }
  __flatten_5__11 := (loc(getVCTOption1(marked), x): Ref)
  __flatten_5__11.Boolean__item := true
  next__12 := 0
  while (next__12 < n)
    invariant marked != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(marked)): Int) == n
    invariant 0 <= x && x < n && 0 <= y && y < n
    invariant 0 <= next__12 && next__12 <= n
    invariant (forall j__15: Int :: { (loc(getVCTOption1(marked), j__15): Ref) } 0 <= j__15 && j__15 < n ==> acc((loc(getVCTOption1(marked), j__15): Ref).Boolean__item, write)) 
  {
    __flatten_6__13 := (loc(getVCTOption1(marked), next__12): Ref)
    if (G[x][next__12] && !__flatten_6__13.Boolean__item) {
      rec__16, P := Graph_explore_EncodedGlobalVariables_Integer_Sequence$Sequence$Boolean$$_Option$Array$Cell$Boolean$$$_Integer_Integer_Sequence$Integer$(diz, globals, n, G, marked, next__12, y)
      if (rec__16) {
        __flatten_8__14 := Seq(x)
        P := __flatten_8__14 ++ P
        sys__local__result__8 := true
        // assert
        assert 0 < n && Graph_graph_Integer_Sequence$Sequence$Boolean$$(diz, n, G) && (forall j__17: Int :: { (loc(getVCTOption1(marked), j__17): Ref) } 0 <= j__17 && j__17 < n ==> acc((loc(getVCTOption1(marked), j__17): Ref).Boolean__item, write)) && (sys__local__result__8 ==> 0 < |P|) && (sys__local__result__8 ==> P[0] == x && P[|P| - 1] == y) && (sys__local__result__8 ==> Graph_Path_Integer_Sequence$Sequence$Boolean$$_Sequence$Integer$(diz, n, G, P))
        goto __return_explore
      }
    }
    next__12 := next__12 + 1
  }
  sys__local__result__8 := false
  // assert
  assert 0 < n && Graph_graph_Integer_Sequence$Sequence$Boolean$$(diz, n, G) && (forall j__18: Int :: { (loc(getVCTOption1(marked), j__18): Ref) } 0 <= j__18 && j__18 < n ==> acc((loc(getVCTOption1(marked), j__18): Ref).Boolean__item, write)) && (sys__local__result__8 ==> 0 < |P|) && (sys__local__result__8 ==> P[0] == x && P[|P| - 1] == y) && (sys__local__result__8 ==> Graph_Path_Integer_Sequence$Sequence$Boolean$$_Sequence$Integer$(diz, n, G, P))
  goto __return_explore
  label __return_explore
  sys__result := sys__local__result__8
  // assert
  assert marked != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(marked)): Int) == n && (0 <= x && x < n && 0 <= y && y < n) && (0 < n && Graph_graph_Integer_Sequence$Sequence$Boolean$$(diz, n, G)) && (forall j__19: Int :: { (loc(getVCTOption1(marked), j__19): Ref) } 0 <= j__19 && j__19 < n ==> acc((loc(getVCTOption1(marked), j__19): Ref).Boolean__item, write)) && (sys__result ==> 0 < |P|) && (sys__result ==> P[0] == x && P[|P| - 1] == y) && (sys__result ==> Graph_Path_Integer_Sequence$Sequence$Boolean$$_Sequence$Integer$(diz, n, G, P))
  inhale false
}

method array_new_Option_Array_Cell_Boolean____Integer(size0: Int) returns (sys__result: VCTOption[VCTArray[Ref]])
  ensures sys__result != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(sys__result)): Int) == size0
  ensures (forall i0: Int :: { (loc(getVCTOption1(sys__result), i0): Ref).Boolean__item } 0 <= i0 && i0 < size0 ==> acc((loc(getVCTOption1(sys__result), i0): Ref).Boolean__item, write))
  ensures (forall i0: Int :: { (loc(getVCTOption1(sys__result), i0): Ref).Boolean__item } 0 <= i0 && i0 < size0 ==> (loc(getVCTOption1(sys__result), i0): Ref).Boolean__item == false)
{
  inhale false
}