// Generated on 2021-03-23 at 23:42:13
domain Process {
  
  function p_is_choice(p1: Process, p2: Process): Bool
  
  function p_empty(): Process
  
  function p_merge(p1: Process, p2: Process): Process
  
  function p_choice(p1: Process, p2: Process): Process
  
  function p_seq(p1: Process, p2: Process): Process
  
  function p_plus(n: Int): Process
  
  function p_mult(n: Int): Process
  
  function p_parcount(n: Int): Process
  
  axiom empty_1L {
    (forall p: Process :: { p_merge(p_empty(), p) } p_merge(p_empty(), p) == p)
  }
  
  axiom empty_2L {
    (forall p: Process :: { p_seq(p_empty(), p) } p_seq(p_empty(), p) == p)
  }
  
  axiom empty_2R {
    (forall p: Process :: { p_seq(p, p_empty()) } p_seq(p, p_empty()) == p)
  }
  
  axiom choice_L {
    (forall p1: Process, p2: Process :: { p_is_choice(p_choice(p1, p2), p1) } p_is_choice(p_choice(p1, p2), p1))
  }
  
  axiom choice_R {
    (forall p1: Process, p2: Process :: { p_is_choice(p_choice(p1, p2), p2) } p_is_choice(p_choice(p1, p2), p2))
  }
  
  axiom choice_dist {
    (forall p1: Process, p2: Process, p3: Process :: { p_seq(p_choice(p1, p2), p3) } p_seq(p_choice(p1, p2), p3) == p_choice(p_seq(p1, p3), p_seq(p2, p3)))
  }
  
  axiom seq_assoc {
    (forall p1: Process, p2: Process, p3: Process :: { p_seq(p_seq(p1, p2), p3) } p_seq(p_seq(p1, p2), p3) == p_seq(p1, p_seq(p2, p3)))
  }
  
  axiom plus_def_2 {
    (forall p: Process, n: Int :: { p_seq(p, p_plus(n)) } p_seq(p, p_plus(n)) == p_seq(p, p_seq(p_plus(n), p_empty())))
  }
  
  axiom mult_def_2 {
    (forall p: Process, n: Int :: { p_seq(p, p_mult(n)) } p_seq(p, p_mult(n)) == p_seq(p, p_seq(p_mult(n), p_empty())))
  }
  
  axiom parcount_def_1 {
    (forall n: Int :: { p_parcount(n) } p_merge(p_plus(n), p_mult(n)) == p_parcount(n))
  }
  
  axiom parcount_def_2 {
    (forall p: Process, n: Int :: { p_seq(p, p_parcount(n)) } p_seq(p, p_parcount(n)) == p_seq(p, p_seq(p_parcount(n), p_empty())))
  }
}

domain TYPE {
  
  unique function class_Future(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_Program(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Future_directSuperclass {
    directSuperclass(class_Future()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Program_directSuperclass {
    directSuperclass(class_Program()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field Future_counter_hist_value: Int

//  a field 
field Future_counter_hist_init: Int

//  a field 
field Future_counter_hist_act: Int

//  a field 
field Future_counter_hist_write: Int

//  a field 
field Future_counter_hist_free: Int

//  a field 
field Future_counter_hist_hist: Int

//  a field 
field Future_counter_hist_action: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


predicate Future_hist_do_plus_Fraction_Process(diz: Ref, fr: frac, proc: Process) 

predicate Future_hist_do_mult_Fraction_Process(diz: Ref, fr: frac, proc: Process) 

predicate Future_hist_idle_Fraction_Process(diz: Ref, fr: frac, proc: Process) 

method Future_plus_begin_Fraction_Process_Integer(diz: Ref, fr: frac, proc: Process, n: Int)
  requires diz != null
  requires frac_val(fr) != none
  requires acc(Future_hist_idle_Fraction_Process(diz, fr, p_seq(p_plus(n), proc)), write)
  requires write != none
  requires acc(diz.Future_counter_hist_value, write)
  requires acc(diz.Future_counter_hist_hist, write)
  ensures frac_val(fr) != none
  ensures acc(Future_hist_do_plus_Fraction_Process(diz, fr, proc), write)
  ensures acc(diz.Future_counter_hist_act, write)
  ensures acc(diz.Future_counter_hist_value, write)
  ensures acc(diz.Future_counter_hist_write, write)
  ensures acc(diz.Future_counter_hist_action, write)
  ensures diz.Future_counter_hist_value == diz.Future_counter_hist_act
  ensures diz.Future_counter_hist_value == old(diz.Future_counter_hist_value)
{
  inhale false
}

method Future_plus_commit_Fraction_Process_Integer(diz: Ref, fr: frac, proc: Process, n: Int)
  requires diz != null
  requires frac_val(fr) != none
  requires acc(Future_hist_do_plus_Fraction_Process(diz, fr, proc), write)
  requires write != none
  requires acc(diz.Future_counter_hist_act, write)
  requires acc(diz.Future_counter_hist_value, write)
  requires acc(diz.Future_counter_hist_write, write)
  requires acc(diz.Future_counter_hist_action, write)
  requires diz.Future_counter_hist_value == diz.Future_counter_hist_act + n
  ensures frac_val(fr) != none
  ensures acc(Future_hist_idle_Fraction_Process(diz, fr, proc), write)
  ensures acc(diz.Future_counter_hist_value, write)
  ensures acc(diz.Future_counter_hist_hist, write)
  ensures diz.Future_counter_hist_value == old(diz.Future_counter_hist_value)
{
  inhale false
}

method Future_mult_begin_Fraction_Process_Integer(diz: Ref, fr: frac, proc: Process, n: Int)
  requires diz != null
  requires frac_val(fr) != none
  requires acc(Future_hist_idle_Fraction_Process(diz, fr, p_seq(p_mult(n), proc)), write)
  requires write != none
  requires acc(diz.Future_counter_hist_value, write)
  requires acc(diz.Future_counter_hist_hist, write)
  ensures frac_val(fr) != none
  ensures acc(Future_hist_do_mult_Fraction_Process(diz, fr, proc), write)
  ensures acc(diz.Future_counter_hist_act, write)
  ensures acc(diz.Future_counter_hist_value, write)
  ensures acc(diz.Future_counter_hist_write, write)
  ensures acc(diz.Future_counter_hist_action, write)
  ensures diz.Future_counter_hist_value == diz.Future_counter_hist_act
  ensures diz.Future_counter_hist_value == old(diz.Future_counter_hist_value)
{
  inhale false
}

method Future_mult_commit_Fraction_Process_Integer(diz: Ref, fr: frac, proc: Process, n: Int)
  requires diz != null
  requires frac_val(fr) != none
  requires acc(Future_hist_do_mult_Fraction_Process(diz, fr, proc), write)
  requires write != none
  requires acc(diz.Future_counter_hist_act, write)
  requires acc(diz.Future_counter_hist_value, write)
  requires acc(diz.Future_counter_hist_write, write)
  requires acc(diz.Future_counter_hist_action, write)
  requires diz.Future_counter_hist_value == diz.Future_counter_hist_act * n
  ensures frac_val(fr) != none
  ensures acc(Future_hist_idle_Fraction_Process(diz, fr, proc), write)
  ensures acc(diz.Future_counter_hist_value, write)
  ensures acc(diz.Future_counter_hist_hist, write)
  ensures diz.Future_counter_hist_value == old(diz.Future_counter_hist_value)
{
  inhale false
}

method Future_Future() returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Future()
  ensures acc(sys__result.Future_counter_hist_value, write)
  ensures acc(sys__result.Future_counter_hist_write, write)
  ensures acc(sys__result.Future_counter_hist_free, write)
  ensures sys__result.Future_counter_hist_value == 0
{
  var diz__1: Ref
  diz__1 := new(Future_counter_hist_value, Future_counter_hist_init, Future_counter_hist_act, Future_counter_hist_write, Future_counter_hist_free, Future_counter_hist_hist, Future_counter_hist_action)
  inhale type_of(diz__1) == class_Future()
  Future_hist_set_counter_Integer(diz__1, 0)
  sys__result := diz__1
  // assert
  assert sys__result != null && type_of(sys__result) == class_Future() && acc(sys__result.Future_counter_hist_value, write) && acc(sys__result.Future_counter_hist_write, write) && acc(sys__result.Future_counter_hist_free, write) && sys__result.Future_counter_hist_value == 0
  inhale false
}

method Future_hist_set_counter_Integer(diz: Ref, value: Int)
  requires diz != null
  requires acc(diz.Future_counter_hist_value, write)
  requires acc(diz.Future_counter_hist_write, write)
  ensures acc(diz.Future_counter_hist_value, write) && diz.Future_counter_hist_value == value
  ensures acc(diz.Future_counter_hist_write, write)
{
  inhale false
}

method Future_end_future(diz: Ref)
  requires diz != null
  requires acc(diz.Future_counter_hist_value, write)
  requires acc(diz.Future_counter_hist_hist, write)
  requires acc(diz.Future_counter_hist_init, write)
  requires acc(Future_hist_idle_Fraction_Process(diz, new_frac(write), p_empty()), write)
  ensures acc(diz.Future_counter_hist_value, write)
  ensures acc(diz.Future_counter_hist_write, write)
  ensures acc(diz.Future_counter_hist_free, write)
  ensures diz.Future_counter_hist_value == old(diz.Future_counter_hist_value)
  ensures diz.Future_counter_hist_value == old(diz.Future_counter_hist_init)
{
  inhale false
}

method Future_split_Fraction_Process_Fraction_Process(diz: Ref, frac1: frac, proc1: Process, frac2: frac, proc2: Process)
  requires diz != null
  requires frac_val(frac1) + frac_val(frac2) <= write
  requires acc(Future_hist_idle_Fraction_Process(diz, new_frac(frac_val(frac1) + frac_val(frac2)), p_merge(proc1, proc2)), write)
  ensures acc(Future_hist_idle_Fraction_Process(diz, frac1, proc1), write)
  ensures acc(Future_hist_idle_Fraction_Process(diz, frac2, proc2), write)
{
  inhale false
}

method Future_merge_Fraction_Process_Fraction_Process(diz: Ref, frac1: frac, proc1: Process, frac2: frac, proc2: Process)
  requires diz != null
  requires frac_val(frac1) + frac_val(frac2) <= write
  requires acc(Future_hist_idle_Fraction_Process(diz, frac1, proc1), write)
  requires acc(Future_hist_idle_Fraction_Process(diz, frac2, proc2), write)
  ensures acc(Future_hist_idle_Fraction_Process(diz, new_frac(frac_val(frac1) + frac_val(frac2)), p_merge(proc1, proc2)), write)
{
  inhale false
}

method Future_begin_future_1_Integer(diz: Ref, n: Int)
  requires diz != null
  requires acc(diz.Future_counter_hist_value, write)
  requires acc(diz.Future_counter_hist_write, write)
  requires acc(diz.Future_counter_hist_free, write)
  requires 0 < diz.Future_counter_hist_value && 0 < n
  ensures acc(diz.Future_counter_hist_value, write)
  ensures acc(diz.Future_counter_hist_hist, write)
  ensures acc(diz.Future_counter_hist_init, write)
  ensures diz.Future_counter_hist_value == old(diz.Future_counter_hist_value)
  ensures diz.Future_counter_hist_init == (old(diz.Future_counter_hist_value) + n) * n || diz.Future_counter_hist_init == (old(diz.Future_counter_hist_value) + 1) * n
  ensures acc(Future_hist_idle_Fraction_Process(diz, new_frac(write), p_parcount(n)), write)
{
  inhale false
}

method Program___contract_unsatisfiable__count_EncodedGlobalVariables_Integer_Integer(diz: Ref, globals: Ref, c: Int, n: Int) returns (sys__result: Int)
  requires diz != null
{
  inhale true && (0 < c && 0 < n)
  // assert
  assert false
  inhale false
}

method Program_loop_body_4_Future_Integer(diz: Ref, f: Ref, n: Int)
  requires diz != null
  requires acc(Future_hist_idle_Fraction_Process(f, new_frac(1 / 2), p_plus(n)), write)
  ensures acc(Future_hist_idle_Fraction_Process(f, new_frac(1 / 2), p_empty()), write)
{
  var __flatten_2__2: Process
  var __flatten_5__3: Process
  inhale acc(f.Future_counter_hist_value, write) && acc(f.Future_counter_hist_hist, write)
  __flatten_2__2 := p_empty()
  Future_plus_begin_Fraction_Process_Integer(f, new_frac(1 / 2), __flatten_2__2, n)
  Future_hist_set_counter_Integer(f, f.Future_counter_hist_value + n)
  __flatten_5__3 := p_empty()
  Future_plus_commit_Fraction_Process_Integer(f, new_frac(1 / 2), __flatten_5__3, n)
  exhale acc(f.Future_counter_hist_value, write) && acc(f.Future_counter_hist_hist, write)
}

method Program_loop_body_7_Future_Integer(diz: Ref, f: Ref, n: Int)
  requires diz != null
  requires acc(Future_hist_idle_Fraction_Process(f, new_frac(1 / 2), p_mult(n)), write)
  ensures acc(Future_hist_idle_Fraction_Process(f, new_frac(1 / 2), p_empty()), write)
{
  var __flatten_7__4: Process
  var __flatten_10__5: Process
  inhale acc(f.Future_counter_hist_value, write) && acc(f.Future_counter_hist_hist, write)
  __flatten_7__4 := p_empty()
  Future_mult_begin_Fraction_Process_Integer(f, new_frac(1 / 2), __flatten_7__4, n)
  Future_hist_set_counter_Integer(f, f.Future_counter_hist_value * n)
  __flatten_10__5 := p_empty()
  Future_mult_commit_Fraction_Process_Integer(f, new_frac(1 / 2), __flatten_10__5, n)
  exhale acc(f.Future_counter_hist_value, write) && acc(f.Future_counter_hist_hist, write)
}

method Program_parrallel_region_main_1_Future_Integer(diz: Ref, f: Ref, n: Int)
  requires diz != null
  requires true ==> acc(Future_hist_idle_Fraction_Process(f, new_frac(1 / 2), p_plus(n)), write)
  requires true ==> acc(Future_hist_idle_Fraction_Process(f, new_frac(1 / 2), p_mult(n)), write)
  ensures true ==> acc(Future_hist_idle_Fraction_Process(f, new_frac(1 / 2), p_empty()), write)
  ensures true ==> acc(Future_hist_idle_Fraction_Process(f, new_frac(1 / 2), p_empty()), write)
{
  inhale false
}

method Program_count_EncodedGlobalVariables_Integer_Integer(diz: Ref, globals: Ref, c: Int, n: Int) returns (sys__result: Int)
  requires diz != null
  requires 0 < c && 0 < n
  ensures sys__result == (c + n) * n || sys__result == (c + 1) * n
{
  var f__6: Ref
  var __flatten_15__7: Process
  var __flatten_16__8: Process
  var __flatten_19__9: Process
  var __flatten_20__10: Process
  f__6 := Future_Future()
  Future_hist_set_counter_Integer(f__6, c)
  Future_begin_future_1_Integer(f__6, n)
  __flatten_15__7 := p_plus(n)
  __flatten_16__8 := p_mult(n)
  Future_split_Fraction_Process_Fraction_Process(f__6, new_frac(1 / 2), __flatten_15__7, new_frac(1 / 2), __flatten_16__8)
  exhale acc(f__6.Future_counter_hist_value, write) && acc(f__6.Future_counter_hist_hist, write)
  Program_parrallel_region_main_1_Future_Integer(diz, f__6, n)
  inhale acc(f__6.Future_counter_hist_value, write) && acc(f__6.Future_counter_hist_hist, write)
  __flatten_19__9 := p_empty()
  __flatten_20__10 := p_empty()
  Future_merge_Fraction_Process_Fraction_Process(f__6, new_frac(1 / 2), __flatten_19__9, new_frac(1 / 2), __flatten_20__10)
  Future_end_future(f__6)
  sys__result := f__6.Future_counter_hist_value
  // assert
  assert sys__result == (c + n) * n || sys__result == (c + 1) * n
  inhale false
}

method Program___contract_unsatisfiable__Program_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Program_Program_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Program()
{
  var diz__11: Ref
  diz__11 := new()
  inhale type_of(diz__11) == class_Program()
  sys__result := diz__11
  // assert
  assert sys__result != null && type_of(sys__result) == class_Program()
  inhale false
}