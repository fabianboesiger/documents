// Generated on 2021-03-23 at 23:37:23
domain TYPE {
  
  unique function class_Role(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_Main(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Role_directSuperclass {
    directSuperclass(class_Role()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Main_directSuperclass {
    directSuperclass(class_Main()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field Role_x: Int

//  a field 
field Role_left: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


method Role___contract_unsatisfiable__Role_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, v: Int)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Role_Role_EncodedGlobalVariables_Integer(globals: Ref, v: Int) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Role()
  ensures acc(sys__result.Role_x, write)
  ensures acc(sys__result.Role_left, write)
  ensures sys__result.Role_x == v
{
  var diz__1: Ref
  diz__1 := new(Role_x, Role_left)
  inhale type_of(diz__1) == class_Role()
  diz__1.Role_x := v
  sys__result := diz__1
  // assert
  assert sys__result != null && type_of(sys__result) == class_Role() && acc(sys__result.Role_x, write) && acc(sys__result.Role_left, write) && sys__result.Role_x == v
  inhale false
}

method Main___contract_unsatisfiable__main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Main_loop_body_7_Role_Role(diz: Ref, a: Ref, b: Ref)
  requires diz != null
  requires acc(a.Role_x, 1 / 2)
  requires acc(b.Role_left, write)
  ensures acc(a.Role_x, 1 / 2)
  ensures acc(b.Role_left, write)
  ensures b.Role_left == a.Role_x
{
  var __flatten_1__2: Int
  __flatten_1__2 := a.Role_x
  b.Role_left := __flatten_1__2
}

method Main_loop_body_8_Role_Role(diz: Ref, b: Ref, c: Ref)
  requires diz != null
  requires acc(b.Role_x, 1 / 2)
  requires acc(c.Role_left, write)
  ensures acc(b.Role_x, 1 / 2)
  ensures acc(c.Role_left, write)
  ensures c.Role_left == b.Role_x
{
  var __flatten_2__3: Int
  __flatten_2__3 := b.Role_x
  c.Role_left := __flatten_2__3
}

method Main_loop_body_9_Role_Role(diz: Ref, c: Ref, a: Ref)
  requires diz != null
  requires acc(c.Role_x, 1 / 2)
  requires acc(a.Role_left, write)
  ensures acc(c.Role_x, 1 / 2)
  ensures acc(a.Role_left, write)
  ensures a.Role_left == c.Role_x
{
  var __flatten_3__4: Int
  __flatten_3__4 := c.Role_x
  a.Role_left := __flatten_3__4
}

method Main_parrallel_region_main_1_Role_Role_Role(diz: Ref, a: Ref, b: Ref, c: Ref)
  requires diz != null
  requires true ==> acc(a.Role_x, 1 / 2)
  requires true ==> acc(b.Role_left, write)
  requires true ==> acc(b.Role_x, 1 / 2)
  requires true ==> acc(c.Role_left, write)
  requires true ==> acc(c.Role_x, 1 / 2)
  requires true ==> acc(a.Role_left, write)
  ensures true ==> acc(a.Role_x, 1 / 2)
  ensures true ==> acc(b.Role_left, write)
  ensures true ==> b.Role_left == a.Role_x
  ensures true ==> acc(b.Role_x, 1 / 2)
  ensures true ==> acc(c.Role_left, write)
  ensures true ==> c.Role_left == b.Role_x
  ensures true ==> acc(c.Role_x, 1 / 2)
  ensures true ==> acc(a.Role_left, write)
  ensures true ==> a.Role_left == c.Role_x
{
  inhale false
}

method Main_loop_body_10_Role_Role(diz: Ref, a: Ref, b: Ref)
  requires diz != null
  requires acc(a.Role_x, write)
  requires acc(b.Role_left, write)
  ensures acc(a.Role_x, write)
  ensures acc(b.Role_left, write)
  ensures a.Role_x == old(a.Role_x) + 1
  ensures b.Role_left == a.Role_x
{
  var __flatten_4__5: Int
  var __flatten_5__6: Int
  __flatten_4__5 := a.Role_x + 1
  a.Role_x := __flatten_4__5
  __flatten_5__6 := a.Role_x
  b.Role_left := __flatten_5__6
}

method Main_loop_body_11_Role_Role(diz: Ref, b: Ref, c: Ref)
  requires diz != null
  requires acc(b.Role_x, write)
  requires acc(c.Role_left, write)
  ensures acc(b.Role_x, write)
  ensures acc(c.Role_left, write)
  ensures b.Role_x == old(b.Role_x) - 1
  ensures c.Role_left == b.Role_x
{
  var __flatten_6__7: Int
  var __flatten_7__8: Int
  __flatten_6__7 := b.Role_x - 1
  b.Role_x := __flatten_6__7
  __flatten_7__8 := b.Role_x
  c.Role_left := __flatten_7__8
}

method Main_loop_body_12_Role_Role(diz: Ref, c: Ref, a: Ref)
  requires diz != null
  requires acc(c.Role_x, 1 / 2)
  requires acc(a.Role_left, write)
  ensures acc(c.Role_x, 1 / 2)
  ensures acc(a.Role_left, write)
  ensures a.Role_left == c.Role_x
{
  var __flatten_8__9: Int
  __flatten_8__9 := c.Role_x
  a.Role_left := __flatten_8__9
}

method Main_parrallel_region_main_2_Role_Role_Role(diz: Ref, a: Ref, b: Ref, c: Ref)
  requires diz != null
  requires true ==> acc(a.Role_x, write)
  requires true ==> acc(b.Role_left, write)
  requires true ==> acc(b.Role_x, write)
  requires true ==> acc(c.Role_left, write)
  requires true ==> acc(c.Role_x, 1 / 2)
  requires true ==> acc(a.Role_left, write)
  ensures true ==> acc(a.Role_x, write)
  ensures true ==> acc(b.Role_left, write)
  ensures true ==> a.Role_x == old(a.Role_x) + 1
  ensures true ==> b.Role_left == a.Role_x
  ensures true ==> acc(b.Role_x, write)
  ensures true ==> acc(c.Role_left, write)
  ensures true ==> b.Role_x == old(b.Role_x) - 1
  ensures true ==> c.Role_left == b.Role_x
  ensures true ==> acc(c.Role_x, 1 / 2)
  ensures true ==> acc(a.Role_left, write)
  ensures true ==> a.Role_left == c.Role_x
{
  inhale false
}

method Main_main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var a__10: Ref
  var b__11: Ref
  var c__12: Ref
  a__10 := Role_Role_EncodedGlobalVariables_Integer(globals, 0)
  b__11 := Role_Role_EncodedGlobalVariables_Integer(globals, 8)
  c__12 := Role_Role_EncodedGlobalVariables_Integer(globals, 4)
  Main_parrallel_region_main_1_Role_Role_Role(diz, a__10, b__11, c__12)
  while (a__10.Role_left != a__10.Role_x && b__11.Role_left != b__11.Role_x && c__12.Role_left != c__12.Role_x)
    invariant acc(a__10.Role_x, write)
    invariant acc(b__11.Role_x, write)
    invariant acc(c__12.Role_x, write)
    invariant acc(a__10.Role_left, write)
    invariant acc(b__11.Role_left, write)
    invariant acc(c__12.Role_left, write)
    invariant b__11.Role_x - c__12.Role_x == c__12.Role_x - a__10.Role_x
    invariant b__11.Role_left == a__10.Role_x && c__12.Role_left == b__11.Role_x && a__10.Role_left == c__12.Role_x 
  {
    Main_parrallel_region_main_2_Role_Role_Role(diz, a__10, b__11, c__12)
  }
  // assert
  assert a__10.Role_x == b__11.Role_x && b__11.Role_x == c__12.Role_x
}