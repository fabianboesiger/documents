// Generated on 2021-03-23 at 23:34:11
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_C(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom C_directSuperclass {
    directSuperclass(class_C()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field C_i: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method C_m1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.C_i, write)
{
  inhale false
}

method C___contract_unsatisfiable__internal_m1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && acc(diz.C_i, write)
  // assert
  assert false
  inhale false
}

method C_internal_m1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.C_i, write)
{
  diz.C_i := 0
  while (diz.C_i < 5)
    invariant acc(diz.C_i, write)
    invariant 0 <= diz.C_i
    invariant diz.C_i <= 5 
  {
    diz.C_i := diz.C_i + 1
  }
  // assert
  assert diz.C_i == 5
  // assert
  assert acc(diz.C_i, write)
}

method C_m2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.C_i, write)
{
  inhale false
}

method C___contract_unsatisfiable__internal_m2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && acc(diz.C_i, write)
  // assert
  assert false
  inhale false
}

method C_internal_m2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.C_i, write)
{
  diz.C_i := 100
  while (diz.C_i < 110)
    invariant acc(diz.C_i, write)
    invariant 100 <= diz.C_i
    invariant diz.C_i <= 110 
  {
    diz.C_i := diz.C_i + 1
  }
  // assert
  assert diz.C_i == 110
  // assert
  assert acc(diz.C_i, write)
}

method C_m3_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.C_i, write)
{
  inhale false
}

method C___contract_unsatisfiable__internal_m3_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && acc(diz.C_i, write)
  // assert
  assert false
  inhale false
}

method C_internal_m3_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.C_i, write)
{
  diz.C_i := 200
  while (diz.C_i < 230)
    invariant acc(diz.C_i, write)
    invariant diz.C_i <= 230 
  {
    diz.C_i := diz.C_i + 1
  }
  // assert
  assert diz.C_i == 230
  // assert
  assert acc(diz.C_i, write)
}

method C_m4_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.C_i, write)
{
  inhale false
}

method C___contract_unsatisfiable__internal_m4_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && acc(diz.C_i, write)
  // assert
  assert false
  inhale false
}

method C_internal_m4_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.C_i, write)
{
  var __flatten_1__1: Int
  __flatten_1__1 := -7
  diz.C_i := __flatten_1__1
  while (diz.C_i < 7)
    invariant acc(diz.C_i, 1 / 2)
    invariant acc(diz.C_i, 1 / 2)
    invariant diz.C_i <= 7 
  {
    diz.C_i := diz.C_i + 1
  }
  // assert
  assert diz.C_i == 7
  // assert
  assert acc(diz.C_i, write)
}