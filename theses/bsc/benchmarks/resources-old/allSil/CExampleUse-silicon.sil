// Generated on 2021-03-23 at 23:30:03
domain TYPE {
  
  unique function class_Ref(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Ref_directSuperclass {
    directSuperclass(class_Ref()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field Ref_x: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


method Ref_test_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.Ref_x, write)
  ensures acc(diz.Ref_x, write)
  ensures diz.Ref_x == old(diz.Ref_x) + 1
{
  inhale false
}

method Ref___contract_unsatisfiable__use_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && acc(diz.Ref_x, write)
  // assert
  assert false
  inhale false
}

method Ref_use_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.Ref_x, write)
  ensures acc(diz.Ref_x, write)
  ensures diz.Ref_x == 4
{
  diz.Ref_x := 3
  Ref_test_EncodedGlobalVariables(diz, globals)
}