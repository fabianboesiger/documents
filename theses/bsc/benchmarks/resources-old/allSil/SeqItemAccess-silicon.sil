// Generated on 2021-03-23 at 23:39:01
domain TYPE {
  
  unique function class_Element(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_Test(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Element_directSuperclass {
    directSuperclass(class_Element()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Test_directSuperclass {
    directSuperclass(class_Test()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field Element_value: Int

//  a field 
field Test_sequence: Seq[Ref]

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


method Test___contract_unsatisfiable__test_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && (acc(diz.Test_sequence, write) && 0 < |diz.Test_sequence| && (forall i__1: Int :: { diz.Test_sequence[i__1] } 0 <= i__1 && i__1 < |diz.Test_sequence| ==> acc(diz.Test_sequence[i__1].Element_value, write)))
  // assert
  assert false
  inhale false
}

method Test_test_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.Test_sequence, write)
  requires 0 < |diz.Test_sequence|
  requires (forall i: Int :: { diz.Test_sequence[i] } 0 <= i && i < |diz.Test_sequence| ==> acc(diz.Test_sequence[i].Element_value, write))
{
  var __flatten_1__2: Ref
  __flatten_1__2 := diz.Test_sequence[0]
  if (__flatten_1__2.Element_value == 0) {
    
  }
}