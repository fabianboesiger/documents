// Generated on 2021-03-23 at 23:40:40
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_TestCount(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom TestCount_directSuperclass {
    directSuperclass(class_TestCount()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

domain VCTArray[CT] {
  
  function loc(a: VCTArray[CT], i: Int): CT
  
  function alen(a: VCTArray[CT]): Int
  
  function first(r: CT): VCTArray[CT]
  
  function second(r: CT): Int
  
  axiom all_diff {
    (forall a: VCTArray[CT], i: Int :: { (loc(a, i): CT) } (first((loc(a, i): CT)): VCTArray[CT]) == a && (second((loc(a, i): CT)): Int) == i)
  }
  
  axiom len_nonneg {
    (forall a: VCTArray[CT] :: { (alen(a): Int) } (alen(a): Int) >= 0)
  }
}

domain VCTOption[T] {
  
  function VCTNone(): VCTOption[T]
  
  function VCTSome(t: T): VCTOption[T]
  
  function getVCTOption(o: VCTOption[T]): T
  
  function getVCTOptionOrElse(o: VCTOption[T], default: T): T
  
  axiom not_equal_vct {
    (forall x: T :: { (VCTSome(x): VCTOption[T]) } (VCTNone(): VCTOption[T]) != (VCTSome(x): VCTOption[T]))
  }
  
  axiom get_axiom_vct {
    (forall x: T :: { (getVCTOption((VCTSome(x): VCTOption[T])): T) } (getVCTOption((VCTSome(x): VCTOption[T])): T) == x)
  }
  
  axiom get_axiom_vct_2 {
    (forall x: VCTOption[T] :: { (VCTSome((getVCTOption(x): T)): VCTOption[T]) } (VCTSome((getVCTOption(x): T)): VCTOption[T]) == x)
  }
  
  axiom get_or_else_axiom_1 {
    (forall val: T, default: T :: { (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) == val)
  }
  
  axiom get_or_else_axiom_2 {
    (forall default: T :: { (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) == default)
  }
}

domain MatrixIndex {
  
  function product(r: VectorIndex, c: VectorIndex): MatrixIndex
}

domain MatrixExpression[T] {
  
  function msum(is: MatrixIndex, xs: MatrixExpression[T]): T
  
  function mrep(t: T): MatrixExpression[T]
  
  function mcmp(v1: MatrixExpression[T], v2: MatrixExpression[T]): MatrixExpression[Int]
  
  function mseq(m: Seq[Seq[T]]): MatrixExpression[T]
  
  function mdummy(v: Seq[Seq[Int]]): VectorExpression[T]
  
  function fmdummy(v: Seq[Seq[VCTFloat]]): VectorExpression[T]
  
  axiom msum_empty_f {
    (forall i: Int, cols: VectorIndex, xs: MatrixExpression[VCTFloat] :: { (msum(product(vrange(i, i), cols), xs): VCTFloat) } (msum(product(vrange(i, i), cols), xs): VCTFloat) == zero())
  }
  
  axiom msum_empty_i {
    (forall i: Int, cols: VectorIndex, xs: MatrixExpression[Int] :: { (msum(product(vrange(i, i), cols), xs): Int) } (msum(product(vrange(i, i), cols), xs): Int) == 0)
  }
  
  axiom extend_msum_r {
    (forall xs: Seq[Seq[T]], i: Int, j: Int, cols: VectorIndex :: { (msum(product(vrange(i, j), cols), (mseq(xs): MatrixExpression[T])): T) } (msum(product(vrange(i, j + 1), cols), (mseq(xs): MatrixExpression[T])): T) == (vadd((msum(product(vrange(i, j), cols), (mseq(xs): MatrixExpression[T])): T), (vsum(cols, (vseq(xs[i]): VectorExpression[T])): T)): T))
  }
}

domain VectorIndex {
  
  function vrange(lo: Int, hi: Int): VectorIndex
}

domain VectorExpression[T] {
  
  function vrep(t: T): VectorExpression[T]
  
  function vseq(xs: Seq[T]): VectorExpression[T]
  
  function vcmp(v1: VectorExpression[T], v2: VectorExpression[T]): VectorExpression[Int]
  
  function vsum(is: VectorIndex, xs: VectorExpression[T]): T
  
  function vget(v: VectorExpression[T], i: Int): T
  
  function vadd(t1: T, t2: T): T
  
  function vsize(v: VectorExpression[T]): Int
  
  function vdummy(v: Seq[Int]): VectorExpression[T]
  
  axiom vrep_idx {
    (forall i: Int, t: T :: { (vget((vrep(t): VectorExpression[T]), i): T) } (vget((vrep(t): VectorExpression[T]), i): T) == t)
  }
  
  axiom add_int {
    (forall i: Int, j: Int :: { (vadd(i, j): Int) } (vadd(i, j): Int) == i + j)
  }
  
  axiom vseq_get {
    (forall i: Int, xs: Seq[T] :: { (vget((vseq(xs): VectorExpression[T]), i): T) } (vget((vseq(xs): VectorExpression[T]), i): T) == xs[i])
  }
  
  axiom vcmp_get {
    (forall i: Int, xs: VectorExpression[T], ys: VectorExpression[T] :: { (vget((vcmp(xs, ys): VectorExpression[Int]), i): Int) } (vget((vcmp(xs, ys): VectorExpression[Int]), i): Int) == ((vget(xs, i): T) == (vget(ys, i): T) ? 1 : 0))
  }
  
  axiom add_float {
    (forall i: VCTFloat, j: VCTFloat :: { (vadd(i, j): VCTFloat) } (vadd(i, j): VCTFloat) == fadd(i, j))
  }
  
  axiom zero_vsum_f_r {
    (forall xs: VectorExpression[VCTFloat], i: Int :: { (vsum(vrange(i, i), xs): VCTFloat) } (vsum(vrange(i, i), xs): VCTFloat) == zero())
  }
  
  axiom zero_vsum_i_r {
    (forall xs: VectorExpression[Int], i: Int :: { (vsum(vrange(i, i), xs): Int) } (vsum(vrange(i, i), xs): Int) == 0)
  }
  
  axiom vsize_axiom {
    (forall xs: Seq[T] :: { (vsize((vseq(xs): VectorExpression[T])): Int) } (vsize((vseq(xs): VectorExpression[T])): Int) == |xs|)
  }
  
  axiom vsize_axiom_2 {
    (forall t: T :: { (vsize((vrep(t): VectorExpression[T])): Int) } (vsize((vrep(t): VectorExpression[T])): Int) == 1)
  }
  
  axiom extend_vsum_r {
    (forall xs: VectorExpression[T], i: Int, j: Int :: { (vsum(vrange(i, j), xs): T) } i >= 0 && j > i ==> (vsum(vrange(i, j), xs): T) == (vadd((vsum(vrange(i, j - 1), xs): T), (vget(xs, j - 1): T)): T))
  }
  
  axiom extend_vsum_r2 {
    (forall xs: VectorExpression[Int], i: Int, j: Int :: { (vsum(vrange(i, j), xs): Int) } i < 0 || (i >= j || j >= (vsize(xs): Int)) ==> (vsum(vrange(i, j), xs): Int) == 0)
  }
}

domain VCTFloat {
  
  function zero(): VCTFloat
  
  function ffromint(i: Int): VCTFloat
  
  function fadd(f1: VCTFloat, f2: VCTFloat): VCTFloat
  
  axiom commutative_add {
    (forall f1: VCTFloat, f2: VCTFloat :: { fadd(f1, f2) } fadd(f1, f2) == fadd(f2, f1))
  }
  
  axiom zero_int {
    ffromint(0) == zero()
  }
  
  axiom zero_add {
    (forall f1: VCTFloat :: { fadd(f1, zero()) } fadd(f1, zero()) == f1)
  }
}

//  a field 
field Integer__item: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


function getVCTOption1(x: VCTOption[VCTArray[Ref]]): VCTArray[Ref]
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
{
  (getVCTOption(x): VCTArray[Ref])
}

method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method TestCount_test_count_1_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Sequence$Integer$(diz: Ref, globals: Ref, array: VCTOption[VCTArray[Ref]], vals: Seq[Int]) returns (sys__result: Int)
  requires diz != null
  requires array != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (forall i: Int :: { (loc(getVCTOption1(array), i): Ref) } 0 <= i && i < (alen(getVCTOption1(array)): Int) ==> acc((loc(getVCTOption1(array), i): Ref).Integer__item, 1 / 2))
  requires |vals| == (alen(getVCTOption1(array)): Int)
  requires (forall i: Int :: { (loc(getVCTOption1(array), i): Ref) } { vals[i] } 0 <= i && i < (alen(getVCTOption1(array)): Int) ==> (loc(getVCTOption1(array), i): Ref).Integer__item == vals[i])
  ensures array != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (forall i: Int :: { (loc(getVCTOption1(array), i): Ref) } 0 <= i && i < (alen(getVCTOption1(array)): Int) ==> acc((loc(getVCTOption1(array), i): Ref).Integer__item, 1 / 2))
  ensures |vals| == (alen(getVCTOption1(array)): Int)
  ensures (forall i: Int :: { (loc(getVCTOption1(array), i): Ref) } { vals[i] } 0 <= i && i < (alen(getVCTOption1(array)): Int) ==> (loc(getVCTOption1(array), i): Ref).Integer__item == vals[i])
  ensures sys__result == (vsum(vrange(0, (alen(getVCTOption1(array)): Int)), (vcmp((vseq(vals): VectorExpression[Int]), (vrep(3): VectorExpression[Int])): VectorExpression[Int])): Int)
{
  inhale false
}

method TestCount___contract_unsatisfiable__internal_test_count_1_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Sequence$Integer$(diz: Ref, globals: Ref, array: VCTOption[VCTArray[Ref]], vals: Seq[Int]) returns (sys__result: Int)
  requires diz != null
{
  inhale array != (VCTNone(): VCTOption[VCTArray[Ref]]) && (forall i__1: Int :: { (loc(getVCTOption1(array), i__1): Ref) } 0 <= i__1 && i__1 < (alen(getVCTOption1(array)): Int) ==> acc((loc(getVCTOption1(array), i__1): Ref).Integer__item, 1 / 2)) && |vals| == (alen(getVCTOption1(array)): Int) && (forall i__2: Int :: { (loc(getVCTOption1(array), i__2): Ref) } { vals[i__2] } 0 <= i__2 && i__2 < (alen(getVCTOption1(array)): Int) ==> (loc(getVCTOption1(array), i__2): Ref).Integer__item == vals[i__2]) && true
  // assert
  assert false
  inhale false
}

method TestCount_internal_test_count_1_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Sequence$Integer$(diz: Ref, globals: Ref, array: VCTOption[VCTArray[Ref]], vals: Seq[Int]) returns (sys__result: Int)
  requires diz != null
  requires array != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (forall i: Int :: { (loc(getVCTOption1(array), i): Ref) } 0 <= i && i < (alen(getVCTOption1(array)): Int) ==> acc((loc(getVCTOption1(array), i): Ref).Integer__item, 1 / 2))
  requires |vals| == (alen(getVCTOption1(array)): Int)
  requires (forall i: Int :: { (loc(getVCTOption1(array), i): Ref) } { vals[i] } 0 <= i && i < (alen(getVCTOption1(array)): Int) ==> (loc(getVCTOption1(array), i): Ref).Integer__item == vals[i])
  ensures array != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (forall i: Int :: { (loc(getVCTOption1(array), i): Ref) } 0 <= i && i < (alen(getVCTOption1(array)): Int) ==> acc((loc(getVCTOption1(array), i): Ref).Integer__item, 1 / 2))
  ensures |vals| == (alen(getVCTOption1(array)): Int)
  ensures (forall i: Int :: { (loc(getVCTOption1(array), i): Ref) } { vals[i] } 0 <= i && i < (alen(getVCTOption1(array)): Int) ==> (loc(getVCTOption1(array), i): Ref).Integer__item == vals[i])
  ensures sys__result == (vsum(vrange(0, (alen(getVCTOption1(array)): Int)), (vcmp((vseq(vals): VectorExpression[Int]), (vrep(3): VectorExpression[Int])): VectorExpression[Int])): Int)
{
  var res__3: Int
  var k__4: Int
  var __flatten_1__5: Ref
  var __flatten_2__6: Int
  res__3 := 0
  k__4 := 0
  while (k__4 < (alen(getVCTOption1(array)): Int))
    invariant array != (VCTNone(): VCTOption[VCTArray[Ref]])
    invariant (forall i__7: Int :: { (loc(getVCTOption1(array), i__7): Ref) } 0 <= i__7 && i__7 < (alen(getVCTOption1(array)): Int) ==> acc((loc(getVCTOption1(array), i__7): Ref).Integer__item, 1 / 2))
    invariant |vals| == (alen(getVCTOption1(array)): Int)
    invariant (forall i__8: Int :: { (loc(getVCTOption1(array), i__8): Ref) } { vals[i__8] } 0 <= i__8 && i__8 < (alen(getVCTOption1(array)): Int) ==> (loc(getVCTOption1(array), i__8): Ref).Integer__item == vals[i__8])
    invariant 0 <= k__4 && k__4 <= (alen(getVCTOption1(array)): Int)
    invariant res__3 == (vsum(vrange(0, k__4), (vcmp((vseq(vals): VectorExpression[Int]), (vrep(3): VectorExpression[Int])): VectorExpression[Int])): Int) 
  {
    __flatten_1__5 := (loc(getVCTOption1(array), k__4): Ref)
    if (__flatten_1__5.Integer__item == 3) {
      res__3 := res__3 + 1
    }
    __flatten_2__6 := k__4
    k__4 := k__4 + 1
  }
  sys__result := res__3
  // assert
  assert array != (VCTNone(): VCTOption[VCTArray[Ref]]) && (forall i__9: Int :: { (loc(getVCTOption1(array), i__9): Ref) } 0 <= i__9 && i__9 < (alen(getVCTOption1(array)): Int) ==> acc((loc(getVCTOption1(array), i__9): Ref).Integer__item, 1 / 2)) && |vals| == (alen(getVCTOption1(array)): Int) && (forall i__10: Int :: { (loc(getVCTOption1(array), i__10): Ref) } { vals[i__10] } 0 <= i__10 && i__10 < (alen(getVCTOption1(array)): Int) ==> (loc(getVCTOption1(array), i__10): Ref).Integer__item == vals[i__10]) && sys__result == (vsum(vrange(0, (alen(getVCTOption1(array)): Int)), (vcmp((vseq(vals): VectorExpression[Int]), (vrep(3): VectorExpression[Int])): VectorExpression[Int])): Int)
  inhale false
}

method TestCount_test_count_2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method TestCount___contract_unsatisfiable__internal_test_count_2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method TestCount_internal_test_count_2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var xs__11: Seq[Int]
  var __flatten_3__12: Seq[Int]
  __flatten_3__12 := Seq(1, 2, 2, 3)
  xs__11 := __flatten_3__12
  // assert
  assert (vsum(vrange(0, 0), (vcmp((vseq(xs__11): VectorExpression[Int]), (vrep(1): VectorExpression[Int])): VectorExpression[Int])): Int) == 0
  // assert
  assert (vsum(vrange(0, 1), (vcmp((vseq(xs__11): VectorExpression[Int]), (vrep(1): VectorExpression[Int])): VectorExpression[Int])): Int) == 1
  // assert
  assert (vsum(vrange(0, 2), (vcmp((vseq(xs__11): VectorExpression[Int]), (vrep(1): VectorExpression[Int])): VectorExpression[Int])): Int) == 1
  // assert
  assert (vsum(vrange(0, 3), (vcmp((vseq(xs__11): VectorExpression[Int]), (vrep(1): VectorExpression[Int])): VectorExpression[Int])): Int) == 1
  // assert
  assert (vsum(vrange(0, 4), (vcmp((vseq(xs__11): VectorExpression[Int]), (vrep(1): VectorExpression[Int])): VectorExpression[Int])): Int) == 1
}

method TestCount_test_count_E1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method TestCount___contract_unsatisfiable__internal_test_count_E1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method TestCount_internal_test_count_E1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var xs__13: Seq[Int]
  var __flatten_4__14: Seq[Int]
  __flatten_4__14 := Seq(1, 2, 2, 1)
  xs__13 := __flatten_4__14
  // assert
  assert (vsum(vrange(0, 0), (vcmp((vseq(xs__13): VectorExpression[Int]), (vrep(1): VectorExpression[Int])): VectorExpression[Int])): Int) == 0
  // assert
  assert (vsum(vrange(0, 1), (vcmp((vseq(xs__13): VectorExpression[Int]), (vrep(1): VectorExpression[Int])): VectorExpression[Int])): Int) == 1
  // assert
  assert (vsum(vrange(0, 2), (vcmp((vseq(xs__13): VectorExpression[Int]), (vrep(1): VectorExpression[Int])): VectorExpression[Int])): Int) == 1
  // assert
  assert (vsum(vrange(0, 3), (vcmp((vseq(xs__13): VectorExpression[Int]), (vrep(1): VectorExpression[Int])): VectorExpression[Int])): Int) == 1
  // assert
  assert (vsum(vrange(0, 4), (vcmp((vseq(xs__13): VectorExpression[Int]), (vrep(1): VectorExpression[Int])): VectorExpression[Int])): Int) == 1
}