// Generated on 2021-03-23 at 23:42:18
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_WandDemo(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  unique function class_MagicWands(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom WandDemo_directSuperclass {
    directSuperclass(class_WandDemo()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom MagicWands_directSuperclass {
    directSuperclass(class_MagicWands()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field WandDemo_x: Int

function WandDemo_get_EncodedGlobalVariables(diz: Ref, globals: Ref): Int
  requires diz != null
  requires acc(WandDemo_readonly_EncodedGlobalVariables(diz, globals), write)
{
  (unfolding acc(WandDemo_readonly_EncodedGlobalVariables(diz, globals), write) in diz.WandDemo_x)
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


predicate WandDemo_readonly_EncodedGlobalVariables(diz: Ref, globals: Ref) {
  diz != null && acc(diz.WandDemo_x, 1 / 4)
}

predicate WandDemo_writeonly_EncodedGlobalVariables(diz: Ref, globals: Ref) {
  diz != null && acc(diz.WandDemo_x, write)
}

predicate MagicWands_Wand_readonly_for_writeonly_WandDemo_EncodedGlobalVariables_WandDemo_EncodedGlobalVariables(x_0: Ref, x_1: Ref, x_2: Ref, x_3: Ref) 

method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method WandDemo___contract_unsatisfiable__WandDemo_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method WandDemo_WandDemo_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_WandDemo()
  ensures acc(WandDemo_writeonly_EncodedGlobalVariables(sys__result, globals), write)
{
  var diz__1: Ref
  diz__1 := new(WandDemo_x)
  inhale type_of(diz__1) == class_WandDemo()
  fold acc(WandDemo_writeonly_EncodedGlobalVariables(diz__1, globals), write)
  sys__result := diz__1
  // assert
  assert sys__result != null && type_of(sys__result) == class_WandDemo() && acc(WandDemo_writeonly_EncodedGlobalVariables(sys__result, globals), write)
  inhale false
}

method WandDemo___contract_unsatisfiable__set_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, v: Int)
  requires diz != null
{
  inhale true && acc(WandDemo_writeonly_EncodedGlobalVariables(diz, globals), write)
  // assert
  assert false
  inhale false
}

method WandDemo_lemma_1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.WandDemo_x, 3 / 4)
  requires acc(WandDemo_readonly_EncodedGlobalVariables(diz, globals), write)
  ensures acc(WandDemo_writeonly_EncodedGlobalVariables(diz, globals), write)
{
  unfold acc(WandDemo_readonly_EncodedGlobalVariables(diz, globals), write)
  fold acc(WandDemo_writeonly_EncodedGlobalVariables(diz, globals), write)
}

method WandDemo_set_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, v: Int)
  requires diz != null
  requires acc(WandDemo_writeonly_EncodedGlobalVariables(diz, globals), write)
  ensures acc(WandDemo_readonly_EncodedGlobalVariables(diz, globals), write)
  ensures acc(MagicWands_Wand_readonly_for_writeonly_WandDemo_EncodedGlobalVariables_WandDemo_EncodedGlobalVariables(diz, globals, diz, globals), write)
{
  unfold acc(WandDemo_writeonly_EncodedGlobalVariables(diz, globals), write)
  diz.WandDemo_x := v
  fold acc(WandDemo_readonly_EncodedGlobalVariables(diz, globals), write)
  exhale acc(diz.WandDemo_x, 3 / 4)
  inhale acc(MagicWands_Wand_readonly_for_writeonly_WandDemo_EncodedGlobalVariables_WandDemo_EncodedGlobalVariables(diz, globals, diz, globals), write)
}

method WandDemo___contract_unsatisfiable__demo_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method WandDemo_demo_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var d__2: Ref
  var i__3: Int
  var __flatten_3__4: Int
  var __flatten_4__5: Int
  d__2 := WandDemo_WandDemo_EncodedGlobalVariables(globals)
  i__3 := 1
  while (true)
    invariant acc(WandDemo_writeonly_EncodedGlobalVariables(d__2, globals), write) 
  {
    WandDemo_set_EncodedGlobalVariables_Integer(d__2, globals, i__3)
    __flatten_3__4 := WandDemo_get_EncodedGlobalVariables(d__2, globals)
    __flatten_4__5 := WandDemo_get_EncodedGlobalVariables(d__2, globals)
    i__3 := __flatten_3__4 + __flatten_4__5
    exhale acc(MagicWands_Wand_readonly_for_writeonly_WandDemo_EncodedGlobalVariables_WandDemo_EncodedGlobalVariables(d__2, globals, d__2, globals), write)
    exhale acc(WandDemo_readonly_EncodedGlobalVariables(d__2, globals), write)
    inhale acc(WandDemo_writeonly_EncodedGlobalVariables(d__2, globals), write)
  }
}