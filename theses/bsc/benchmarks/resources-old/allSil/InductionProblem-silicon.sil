// Generated on 2021-03-23 at 23:32:35
domain TYPE {
  
  unique function class_C(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom C_directSuperclass {
    directSuperclass(class_C()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

function C_len_Sequence$Integer$(xs: Seq[Int]): Int
{
  (|xs| == 0 ? 0 : 1 + C_len_Sequence$Integer$(xs[1..]))
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


method C___contract_unsatisfiable__main_EncodedGlobalVariables_Sequence$Integer$_Sequence$Integer$(diz: Ref, globals: Ref, xs: Seq[Int], ys: Seq[Int])
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method C_main_EncodedGlobalVariables_Sequence$Integer$_Sequence$Integer$(diz: Ref, globals: Ref, xs: Seq[Int], ys: Seq[Int])
  requires diz != null
{
  // assert
  assert C_len_Sequence$Integer$(xs ++ ys) == C_len_Sequence$Integer$(xs) + C_len_Sequence$Integer$(ys)
}