// Generated on 2021-03-23 at 23:41:23
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_Tree(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Tree_directSuperclass {
    directSuperclass(class_Tree()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field Tree_data: Int

//  a field 
field Tree_left: Ref

//  a field 
field Tree_right: Ref

function Tree_contents_EncodedGlobalVariables_Tree(diz: Ref, globals: Ref, t: Ref): Seq[Int]
  requires diz != null
  requires t != null ==> acc(Tree_state_EncodedGlobalVariables(t, globals), write)
  ensures t != null ==> 0 < |result|
{
  (t == null ? Seq[Int]() : (unfolding acc(Tree_state_EncodedGlobalVariables(t, globals), write) in Tree_contents_EncodedGlobalVariables_Tree(diz, globals, t.Tree_left) ++ Seq(t.Tree_data) ++ Tree_contents_EncodedGlobalVariables_Tree(diz, globals, t.Tree_right)))
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


predicate Tree_state_EncodedGlobalVariables(diz: Ref, globals: Ref) {
  diz != null && (acc(diz.Tree_data, write) && acc(diz.Tree_left, write) && acc(diz.Tree_right, write) && (diz.Tree_left != null ==> acc(Tree_state_EncodedGlobalVariables(diz.Tree_left, globals), write)) && (diz.Tree_right != null ==> acc(Tree_state_EncodedGlobalVariables(diz.Tree_right, globals), write)))
}

method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method Tree_del_min_EncodedGlobalVariables_Tree(diz: Ref, globals: Ref, t: Ref) returns (sys__result: Ref)
  requires diz != null
  requires t != null
  requires acc(Tree_state_EncodedGlobalVariables(t, globals), write)
  ensures sys__result != null ==> acc(Tree_state_EncodedGlobalVariables(sys__result, globals), write)
  ensures Tree_contents_EncodedGlobalVariables_Tree(diz, globals, sys__result) == old(Tree_contents_EncodedGlobalVariables_Tree(diz, globals, t))[1..]
{
  inhale false
}

method Tree___contract_unsatisfiable__internal_del_min_EncodedGlobalVariables_Tree(diz: Ref, globals: Ref, t: Ref) returns (sys__result: Ref)
  requires diz != null
{
  inhale true && (t != null && acc(Tree_state_EncodedGlobalVariables(t, globals), write))
  // assert
  assert false
  inhale false
}

method Tree_internal_del_min_EncodedGlobalVariables_Tree(diz: Ref, globals: Ref, t: Ref) returns (sys__result: Ref)
  requires diz != null
  requires t != null
  requires acc(Tree_state_EncodedGlobalVariables(t, globals), write)
  ensures sys__result != null ==> acc(Tree_state_EncodedGlobalVariables(sys__result, globals), write)
  ensures Tree_contents_EncodedGlobalVariables_Tree(diz, globals, sys__result) == old(Tree_contents_EncodedGlobalVariables_Tree(diz, globals, t))[1..]
{
  var sys__local__result__1: Ref
  var __flatten_1__2: Ref
  unfold acc(Tree_state_EncodedGlobalVariables(t, globals), write)
  if (t.Tree_left == null) {
    // assert
    assert Tree_contents_EncodedGlobalVariables_Tree(diz, globals, t.Tree_left) == Seq[Int]()
    sys__local__result__1 := t.Tree_right
    // assert
    assert (sys__local__result__1 != null ==> acc(Tree_state_EncodedGlobalVariables(sys__local__result__1, globals), write)) && Tree_contents_EncodedGlobalVariables_Tree(diz, globals, sys__local__result__1) == old(Tree_contents_EncodedGlobalVariables_Tree(diz, globals, t))[1..]
    goto __return_internal_del_min
  } else {
    __flatten_1__2 := Tree_del_min_EncodedGlobalVariables_Tree(diz, globals, t.Tree_left)
    t.Tree_left := __flatten_1__2
    fold acc(Tree_state_EncodedGlobalVariables(t, globals), write)
    sys__local__result__1 := t
    // assert
    assert (sys__local__result__1 != null ==> acc(Tree_state_EncodedGlobalVariables(sys__local__result__1, globals), write)) && Tree_contents_EncodedGlobalVariables_Tree(diz, globals, sys__local__result__1) == old(Tree_contents_EncodedGlobalVariables_Tree(diz, globals, t))[1..]
    goto __return_internal_del_min
  }
  label __return_internal_del_min
  sys__result := sys__local__result__1
  // assert
  assert (sys__result != null ==> acc(Tree_state_EncodedGlobalVariables(sys__result, globals), write)) && Tree_contents_EncodedGlobalVariables_Tree(diz, globals, sys__result) == old(Tree_contents_EncodedGlobalVariables_Tree(diz, globals, t))[1..]
  inhale false
}