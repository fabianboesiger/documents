// Generated on 2021-03-23 at 23:35:14
domain TYPE {
  
  unique function class_MaxSort(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom MaxSort_directSuperclass {
    directSuperclass(class_MaxSort()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

function MaxSort_Set_Sequence$Integer$_Integer_Integer(xs: Seq[Int], n: Int, val: Int): Seq[Int]
  requires 0 <= n && n < |xs|
  ensures |result| == |xs|
  ensures (forall g: Int :: { result[g] } { xs[g] } 0 <= g && g < n ==> result[g] == xs[g])
  ensures (forall g: Int :: { result[g] } { xs[g] } n < g && g < |xs| ==> result[g] == xs[g])
  ensures result[n] == val
{
  (0 < n ? Seq(xs[0]) ++ MaxSort_Set_Sequence$Integer$_Integer_Integer(xs[1..], n - 1, val) : Seq(val) ++ xs[1..])
}

function MaxSort_sorted_Sequence$Integer$(xs: Seq[Int]): Bool
{
  (forall i: Int :: { xs[i] } 0 <= i && i < |xs| - 1 ==> xs[i] <= xs[i + 1])
}

function MaxSort_max_Sequence$Integer$(xs: Seq[Int]): Int
  requires 0 < |xs|
  ensures 0 <= result && result < |xs|
  ensures (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> xs[i] <= xs[result])
{
  MaxSort_maxhelper_Sequence$Integer$_Integer(xs, 0)
}

function MaxSort_maxhelper_Sequence$Integer$_Integer(xs: Seq[Int], j: Int): Int
  requires 0 < |xs|
  requires 0 <= j && j < |xs|
  ensures 0 <= result && result < |xs|
  ensures j <= result
  ensures (forall i: Int :: { xs[i] } j <= i && i < |xs| ==> xs[i] <= xs[result])
{
  (j == |xs| - 1 ? j : (xs[MaxSort_maxhelper_Sequence$Integer$_Integer(xs, j + 1)] < xs[j] ? j : MaxSort_maxhelper_Sequence$Integer$_Integer(xs, j + 1)))
}

function remove_by_index_Sequence_Integer__Sequence$Integer$_Integer(seq0: Seq[Int], i0: Int): Seq[Int]
  requires 0 <= i0 && i0 < |seq0|
  ensures |result| == |seq0| - 1
  ensures (forall j0: Int :: { result[j0] } 0 <= j0 && j0 < i0 ==> result[j0] == seq0[j0])
  ensures (forall j0: Int :: { result[j0] } i0 <= j0 && j0 < |result| ==> result[j0] == seq0[j0 + 1])


function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


method MaxSort___contract_unsatisfiable__sort_EncodedGlobalVariables_Sequence$Integer$(diz: Ref, globals: Ref, input: Seq[Int]) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method MaxSort_sort_EncodedGlobalVariables_Sequence$Integer$(diz: Ref, globals: Ref, input: Seq[Int]) returns (sys__result: Seq[Int])
  requires diz != null
  ensures |sys__result| == |input|
  ensures MaxSort_sorted_Sequence$Integer$(sys__result)
{
  var maxOfSeq__8: Int
  var unsorted__1: Seq[Int]
  var result__2: Seq[Int]
  var __flatten_1__3: Seq[Int]
  var __flatten_3__4: Seq[Int]
  unsorted__1 := input
  __flatten_1__3 := Seq[Int]()
  result__2 := __flatten_1__3
  while (!(0 == |unsorted__1|))
    invariant |input| == |result__2| + |unsorted__1|
    invariant (forall l__5: Int :: 0 <= l__5 && l__5 < |result__2| ==> (result__2[l__5] in input))
    invariant (forall l__6: Int :: 0 <= l__6 && l__6 < |unsorted__1| ==> (unsorted__1[l__6] in input))
    invariant !(0 == |unsorted__1|) ==> (forall l__7: Int :: { result__2[l__7] } 0 <= l__7 && l__7 < |result__2| ==> unsorted__1[MaxSort_max_Sequence$Integer$(unsorted__1)] <= result__2[l__7])
    invariant MaxSort_sorted_Sequence$Integer$(result__2) 
  {
    maxOfSeq__8 := MaxSort_max_Sequence$Integer$(unsorted__1)
    __flatten_3__4 := Seq(unsorted__1[maxOfSeq__8])
    result__2 := __flatten_3__4 ++ result__2
    unsorted__1 := remove_by_index_Sequence_Integer__Sequence$Integer$_Integer(unsorted__1, maxOfSeq__8)
  }
  sys__result := result__2
  // assert
  assert |sys__result| == |input| && MaxSort_sorted_Sequence$Integer$(sys__result)
  inhale false
}

method MaxSort___contract_unsatisfiable__sortInPlace_EncodedGlobalVariables_Sequence$Integer$(diz: Ref, globals: Ref, input: Seq[Int]) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method MaxSort_sortInPlace_EncodedGlobalVariables_Sequence$Integer$(diz: Ref, globals: Ref, input: Seq[Int]) returns (sys__result: Seq[Int])
  requires diz != null
  ensures |sys__result| == |input|
  ensures MaxSort_sorted_Sequence$Integer$(sys__result)
{
  var maxOfSeq__13: Int
  var res__9: Seq[Int]
  var right__10: Int
  res__9 := input
  right__10 := |res__9|
  while (0 < right__10)
    invariant |input| == |res__9|
    invariant 0 <= right__10 && right__10 <= |res__9|
    invariant right__10 < |res__9| ==> (forall m__11: Int :: { res__9[m__11] } 0 <= m__11 && m__11 < right__10 ==> res__9[m__11] <= res__9[right__10])
    invariant right__10 < |res__9| ==> (forall m__12: Int :: { res__9[m__12] } right__10 < m__12 && m__12 < |res__9| ==> res__9[right__10] <= res__9[m__12])
    invariant right__10 < |res__9| ==> MaxSort_sorted_Sequence$Integer$(res__9[right__10..]) 
  {
    maxOfSeq__13 := MaxSort_max_Sequence$Integer$(res__9[..right__10])
    right__10 := right__10 - 1
    res__9 := MaxSort_swap_EncodedGlobalVariables_Sequence$Integer$_Integer_Integer(diz, globals, res__9, maxOfSeq__13, right__10)
  }
  sys__result := res__9
  // assert
  assert |sys__result| == |input| && MaxSort_sorted_Sequence$Integer$(sys__result)
  inhale false
}

method MaxSort___contract_unsatisfiable__swap_EncodedGlobalVariables_Sequence$Integer$_Integer_Integer(diz: Ref, globals: Ref, xs: Seq[Int], i: Int, j: Int) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale true && (0 <= i && i < |xs| && (0 <= j && j < |xs|))
  // assert
  assert false
  inhale false
}

method MaxSort_swap_EncodedGlobalVariables_Sequence$Integer$_Integer_Integer(diz: Ref, globals: Ref, xs: Seq[Int], i: Int, j: Int) returns (sys__result: Seq[Int])
  requires diz != null
  requires 0 <= i && i < |xs|
  requires 0 <= j && j < |xs|
  ensures |xs| == |sys__result|
  ensures (forall k: Int :: { sys__result[k] } { xs[k] } 0 <= k && k < |xs| && k != i && k != j ==> sys__result[k] == xs[k])
  ensures sys__result[i] == xs[j]
  ensures sys__result[j] == xs[i]
{
  var tmp__14: Int
  var res__15: Seq[Int]
  tmp__14 := xs[i]
  res__15 := MaxSort_Set_Sequence$Integer$_Integer_Integer(xs, i, xs[j])
  res__15 := MaxSort_Set_Sequence$Integer$_Integer_Integer(res__15, j, tmp__14)
  sys__result := res__15
  // assert
  assert |xs| == |sys__result| && (forall k__16: Int :: { sys__result[k__16] } { xs[k__16] } 0 <= k__16 && k__16 < |xs| && k__16 != i && k__16 != j ==> sys__result[k__16] == xs[k__16]) && sys__result[i] == xs[j] && sys__result[j] == xs[i]
  inhale false
}