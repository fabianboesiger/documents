// Generated on 2021-03-23 at 23:39:46
domain Process {
  
  function p_is_choice(p1: Process, p2: Process): Bool
  
  function p_empty(): Process
  
  function p_merge(p1: Process, p2: Process): Process
  
  function p_choice(p1: Process, p2: Process): Process
  
  function p_seq(p1: Process, p2: Process): Process
  
  function p_acquire(): Process
  
  function p_release(): Process
  
  function p_Locked(): Process
  
  function p_Unlocked(): Process
  
  axiom empty_1L {
    (forall p: Process :: { p_merge(p_empty(), p) } p_merge(p_empty(), p) == p)
  }
  
  axiom empty_2L {
    (forall p: Process :: { p_seq(p_empty(), p) } p_seq(p_empty(), p) == p)
  }
  
  axiom empty_2R {
    (forall p: Process :: { p_seq(p, p_empty()) } p_seq(p, p_empty()) == p)
  }
  
  axiom choice_L {
    (forall p1: Process, p2: Process :: { p_is_choice(p_choice(p1, p2), p1) } p_is_choice(p_choice(p1, p2), p1))
  }
  
  axiom choice_R {
    (forall p1: Process, p2: Process :: { p_is_choice(p_choice(p1, p2), p2) } p_is_choice(p_choice(p1, p2), p2))
  }
  
  axiom choice_dist {
    (forall p1: Process, p2: Process, p3: Process :: { p_seq(p_choice(p1, p2), p3) } p_seq(p_choice(p1, p2), p3) == p_choice(p_seq(p1, p3), p_seq(p2, p3)))
  }
  
  axiom seq_assoc {
    (forall p1: Process, p2: Process, p3: Process :: { p_seq(p_seq(p1, p2), p3) } p_seq(p_seq(p1, p2), p3) == p_seq(p1, p_seq(p2, p3)))
  }
  
  axiom acquire_def_2 {
    (forall p: Process :: { p_seq(p, p_acquire()) } p_seq(p, p_acquire()) == p_seq(p, p_seq(p_acquire(), p_empty())))
  }
  
  axiom release_def_2 {
    (forall p: Process :: { p_seq(p, p_release()) } p_seq(p, p_release()) == p_seq(p, p_seq(p_release(), p_empty())))
  }
  
  axiom Locked_def_1 {
    p_seq(p_release(), p_Unlocked()) == p_Locked()
  }
  
  axiom Locked_def_2 {
    (forall p: Process :: { p_seq(p, p_Locked()) } p_seq(p, p_Locked()) == p_seq(p, p_seq(p_Locked(), p_empty())))
  }
  
  axiom Unlocked_def_1 {
    p_seq(p_acquire(), p_Locked()) == p_Unlocked()
  }
  
  axiom Unlocked_def_2 {
    (forall p: Process :: { p_seq(p, p_Unlocked()) } p_seq(p, p_Unlocked()) == p_seq(p, p_seq(p_Unlocked(), p_empty())))
  }
}

domain TYPE {
  
  unique function class_Future(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_Lock(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Future_directSuperclass {
    directSuperclass(class_Future()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Lock_directSuperclass {
    directSuperclass(class_Lock()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field Future_flag_hist_value: Bool

//  a field 
field Future_flag_hist_init: Bool

//  a field 
field Future_flag_hist_act: Bool

//  a field 
field Future_flag_hist_write: Bool

//  a field 
field Future_flag_hist_free: Bool

//  a field 
field Future_flag_hist_hist: Bool

//  a field 
field Future_flag_hist_action: Bool

//  a field 
field Lock_m: Ref

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


predicate Future_hist_do_acquire_Fraction_Process(diz: Ref, fr: frac, proc: Process) 

predicate Future_hist_do_release_Fraction_Process(diz: Ref, fr: frac, proc: Process) 

predicate Future_hist_idle_Fraction_Process(diz: Ref, fr: frac, proc: Process) 

predicate Lock_lock_held_EncodedGlobalVariables(diz: Ref, globals: Ref) 

predicate Lock_lock_invariant_EncodedGlobalVariables(diz: Ref, globals: Ref) {
  diz != null && (acc(diz.Lock_m, wildcard) && (acc(diz.Lock_m.Future_flag_hist_value, write) && acc(diz.Lock_m.Future_flag_hist_hist, write)))
}

method Future_acquire_begin_Fraction_Process(diz: Ref, fr: frac, proc: Process)
  requires diz != null
  requires frac_val(fr) != none
  requires acc(Future_hist_idle_Fraction_Process(diz, fr, p_seq(p_acquire(), proc)), write)
  requires write != none
  requires acc(diz.Future_flag_hist_value, write)
  requires acc(diz.Future_flag_hist_hist, write)
  requires !diz.Future_flag_hist_value
  ensures frac_val(fr) != none
  ensures acc(Future_hist_do_acquire_Fraction_Process(diz, fr, proc), write)
  ensures acc(diz.Future_flag_hist_act, write)
  ensures acc(diz.Future_flag_hist_value, write)
  ensures acc(diz.Future_flag_hist_write, write)
  ensures acc(diz.Future_flag_hist_action, write)
  ensures diz.Future_flag_hist_value == diz.Future_flag_hist_act
  ensures diz.Future_flag_hist_value == old(diz.Future_flag_hist_value)
{
  inhale false
}

method Future_acquire_commit_Fraction_Process(diz: Ref, fr: frac, proc: Process)
  requires diz != null
  requires frac_val(fr) != none
  requires acc(Future_hist_do_acquire_Fraction_Process(diz, fr, proc), write)
  requires write != none
  requires acc(diz.Future_flag_hist_act, write)
  requires acc(diz.Future_flag_hist_value, write)
  requires acc(diz.Future_flag_hist_write, write)
  requires acc(diz.Future_flag_hist_action, write)
  requires diz.Future_flag_hist_value
  ensures frac_val(fr) != none
  ensures acc(Future_hist_idle_Fraction_Process(diz, fr, proc), write)
  ensures acc(diz.Future_flag_hist_value, write)
  ensures acc(diz.Future_flag_hist_hist, write)
  ensures diz.Future_flag_hist_value == old(diz.Future_flag_hist_value)
{
  inhale false
}

method Future_release_begin_Fraction_Process(diz: Ref, fr: frac, proc: Process)
  requires diz != null
  requires frac_val(fr) != none
  requires acc(Future_hist_idle_Fraction_Process(diz, fr, p_seq(p_release(), proc)), write)
  requires write != none
  requires acc(diz.Future_flag_hist_value, write)
  requires acc(diz.Future_flag_hist_hist, write)
  ensures frac_val(fr) != none
  ensures acc(Future_hist_do_release_Fraction_Process(diz, fr, proc), write)
  ensures acc(diz.Future_flag_hist_act, write)
  ensures acc(diz.Future_flag_hist_value, write)
  ensures acc(diz.Future_flag_hist_write, write)
  ensures acc(diz.Future_flag_hist_action, write)
  ensures diz.Future_flag_hist_value == diz.Future_flag_hist_act
  ensures diz.Future_flag_hist_value == old(diz.Future_flag_hist_value)
{
  inhale false
}

method Future_release_commit_Fraction_Process(diz: Ref, fr: frac, proc: Process)
  requires diz != null
  requires frac_val(fr) != none
  requires acc(Future_hist_do_release_Fraction_Process(diz, fr, proc), write)
  requires write != none
  requires acc(diz.Future_flag_hist_act, write)
  requires acc(diz.Future_flag_hist_value, write)
  requires acc(diz.Future_flag_hist_write, write)
  requires acc(diz.Future_flag_hist_action, write)
  requires !diz.Future_flag_hist_value
  ensures frac_val(fr) != none
  ensures acc(Future_hist_idle_Fraction_Process(diz, fr, proc), write)
  ensures acc(diz.Future_flag_hist_value, write)
  ensures acc(diz.Future_flag_hist_hist, write)
  ensures diz.Future_flag_hist_value == old(diz.Future_flag_hist_value)
{
  inhale false
}

method Future_hist_set_flag_Boolean(diz: Ref, value: Bool)
  requires diz != null
  requires acc(diz.Future_flag_hist_value, write)
  requires acc(diz.Future_flag_hist_write, write)
  ensures acc(diz.Future_flag_hist_value, write) && diz.Future_flag_hist_value == value
  ensures acc(diz.Future_flag_hist_write, write)
{
  inhale false
}

method Future_end_future(diz: Ref)
  requires diz != null
  requires acc(diz.Future_flag_hist_value, write)
  requires acc(diz.Future_flag_hist_hist, write)
  requires acc(diz.Future_flag_hist_init, write)
  requires acc(Future_hist_idle_Fraction_Process(diz, new_frac(write), p_empty()), write)
  ensures acc(diz.Future_flag_hist_value, write)
  ensures acc(diz.Future_flag_hist_write, write)
  ensures acc(diz.Future_flag_hist_free, write)
  ensures diz.Future_flag_hist_value == old(diz.Future_flag_hist_value)
  ensures diz.Future_flag_hist_value == old(diz.Future_flag_hist_init)
{
  inhale false
}

method Future_split_Fraction_Process_Fraction_Process(diz: Ref, frac1: frac, proc1: Process, frac2: frac, proc2: Process)
  requires diz != null
  requires frac_val(frac1) + frac_val(frac2) <= write
  requires acc(Future_hist_idle_Fraction_Process(diz, new_frac(frac_val(frac1) + frac_val(frac2)), p_merge(proc1, proc2)), write)
  ensures acc(Future_hist_idle_Fraction_Process(diz, frac1, proc1), write)
  ensures acc(Future_hist_idle_Fraction_Process(diz, frac2, proc2), write)
{
  inhale false
}

method Future_merge_Fraction_Process_Fraction_Process(diz: Ref, frac1: frac, proc1: Process, frac2: frac, proc2: Process)
  requires diz != null
  requires frac_val(frac1) + frac_val(frac2) <= write
  requires acc(Future_hist_idle_Fraction_Process(diz, frac1, proc1), write)
  requires acc(Future_hist_idle_Fraction_Process(diz, frac2, proc2), write)
  ensures acc(Future_hist_idle_Fraction_Process(diz, new_frac(frac_val(frac1) + frac_val(frac2)), p_merge(proc1, proc2)), write)
{
  inhale false
}

method Lock___contract_unsatisfiable__Lock_EncodedGlobalVariables_Future(diz: Ref, globals: Ref, m: Ref)
  requires diz != null
{
  inhale true && (acc(m.Future_flag_hist_value, write) && acc(m.Future_flag_hist_hist, write))
  // assert
  assert false
  inhale false
}

method Lock_Lock_EncodedGlobalVariables_Future(globals: Ref, m: Ref) returns (sys__result: Ref)
  requires acc(m.Future_flag_hist_value, write)
  requires acc(m.Future_flag_hist_hist, write)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Lock()
{
  var diz__1: Ref
  diz__1 := new(Lock_m)
  inhale type_of(diz__1) == class_Lock()
  diz__1.Lock_m := m
  fold acc(Lock_lock_invariant_EncodedGlobalVariables(diz__1, globals), write)
  exhale acc(Lock_lock_invariant_EncodedGlobalVariables(diz__1, globals), write)
  sys__result := diz__1
  // assert
  assert sys__result != null && type_of(sys__result) == class_Lock()
  inhale false
}

method Lock_atomic_cas_EncodedGlobalVariables_Boolean_Boolean_Fraction_Process(diz: Ref, globals: Ref, oldval: Bool, newval: Bool, p: frac, P: Process) returns (sys__result: Bool)
  requires diz != null
  requires acc(diz.Lock_m, wildcard)
  requires frac_val(p) != none
  requires acc(Future_hist_idle_Fraction_Process(diz.Lock_m, p, P), write)
  ensures acc(diz.Lock_m, wildcard)
  ensures frac_val(p) != none
  ensures sys__result && !oldval && newval && P == p_Unlocked() ==> acc(Future_hist_idle_Fraction_Process(diz.Lock_m, p, p_Locked()), write)
  ensures !(sys__result && !oldval && newval && P == p_Unlocked()) ==> acc(Future_hist_idle_Fraction_Process(diz.Lock_m, p, P), write)
{
  inhale false
}

method Lock_atomic_set_EncodedGlobalVariables_Boolean_Fraction_Process(diz: Ref, globals: Ref, val: Bool, p: frac, P: Process)
  requires diz != null
  requires acc(diz.Lock_m, wildcard)
  requires frac_val(p) != none
  requires acc(Future_hist_idle_Fraction_Process(diz.Lock_m, p, P), write)
  ensures acc(diz.Lock_m, wildcard)
  ensures frac_val(p) != none
  ensures !val && P == p_Locked() ==> acc(Future_hist_idle_Fraction_Process(diz.Lock_m, p, p_Unlocked()), write)
  ensures !(!val && P == p_Locked()) ==> acc(Future_hist_idle_Fraction_Process(diz.Lock_m, p, P), write)
{
  inhale false
}

method Lock___contract_unsatisfiable__acquire_EncodedGlobalVariables_Fraction(diz: Ref, globals: Ref, p: frac)
  requires diz != null
{
  inhale true && (acc(diz.Lock_m, wildcard) && frac_val(p) != none && acc(Future_hist_idle_Fraction_Process(diz.Lock_m, p, p_Unlocked()), write))
  // assert
  assert false
  inhale false
}

method Lock_acquire_EncodedGlobalVariables_Fraction(diz: Ref, globals: Ref, p: frac)
  requires diz != null
  requires acc(diz.Lock_m, wildcard)
  requires frac_val(p) != none
  requires acc(Future_hist_idle_Fraction_Process(diz.Lock_m, p, p_Unlocked()), write)
  ensures acc(diz.Lock_m, wildcard)
  ensures frac_val(p) != none
  ensures acc(Future_hist_idle_Fraction_Process(diz.Lock_m, p, p_Locked()), write)
{
  var b__2: Bool
  var __flatten_1__3: Process
  b__2 := false
  while (!b__2)
    invariant acc(diz.Lock_m, wildcard)
    invariant !b__2 ==> acc(Future_hist_idle_Fraction_Process(diz.Lock_m, p, p_Unlocked()), write)
    invariant b__2 ==> acc(Future_hist_idle_Fraction_Process(diz.Lock_m, p, p_Locked()), write) 
  {
    __flatten_1__3 := p_Unlocked()
    b__2 := Lock_atomic_cas_EncodedGlobalVariables_Boolean_Boolean_Fraction_Process(diz, globals, false, true, p, __flatten_1__3)
  }
}

method Lock___contract_unsatisfiable__release_EncodedGlobalVariables_Fraction(diz: Ref, globals: Ref, p: frac)
  requires diz != null
{
  inhale true && (acc(diz.Lock_m, wildcard) && frac_val(p) != none && acc(Future_hist_idle_Fraction_Process(diz.Lock_m, p, p_Locked()), write))
  // assert
  assert false
  inhale false
}

method Lock_release_EncodedGlobalVariables_Fraction(diz: Ref, globals: Ref, p: frac)
  requires diz != null
  requires acc(diz.Lock_m, wildcard)
  requires frac_val(p) != none
  requires acc(Future_hist_idle_Fraction_Process(diz.Lock_m, p, p_Locked()), write)
  ensures acc(diz.Lock_m, wildcard)
  ensures frac_val(p) != none
  ensures acc(Future_hist_idle_Fraction_Process(diz.Lock_m, p, p_Unlocked()), write)
{
  var __flatten_3__4: Process
  __flatten_3__4 := p_Locked()
  Lock_atomic_set_EncodedGlobalVariables_Boolean_Fraction_Process(diz, globals, false, p, __flatten_3__4)
}