// Generated on 2021-03-23 at 23:36:44
domain TYPE {
  
  unique function class_optiontest(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom optiontest_directSuperclass {
    directSuperclass(class_optiontest()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain VCTOption[T] {
  
  function VCTNone(): VCTOption[T]
  
  function VCTSome(t: T): VCTOption[T]
  
  function getVCTOption(o: VCTOption[T]): T
  
  function getVCTOptionOrElse(o: VCTOption[T], default: T): T
  
  axiom not_equal_vct {
    (forall x: T :: { (VCTSome(x): VCTOption[T]) } (VCTNone(): VCTOption[T]) != (VCTSome(x): VCTOption[T]))
  }
  
  axiom get_axiom_vct {
    (forall x: T :: { (getVCTOption((VCTSome(x): VCTOption[T])): T) } (getVCTOption((VCTSome(x): VCTOption[T])): T) == x)
  }
  
  axiom get_axiom_vct_2 {
    (forall x: VCTOption[T] :: { (VCTSome((getVCTOption(x): T)): VCTOption[T]) } (VCTSome((getVCTOption(x): T)): VCTOption[T]) == x)
  }
  
  axiom get_or_else_axiom_1 {
    (forall val: T, default: T :: { (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) == val)
  }
  
  axiom get_or_else_axiom_2 {
    (forall default: T :: { (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) == default)
  }
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function getVCTOption1(x: VCTOption[Int]): Int
  requires x != (VCTNone(): VCTOption[Int])
{
  (getVCTOption(x): Int)
}

method optiontest___contract_unsatisfiable__test_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method optiontest_test_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var x__1: VCTOption[Int]
  var y__2: VCTOption[Int]
  var z__3: VCTOption[Ref]
  x__1 := (VCTNone(): VCTOption[Int])
  y__2 := (VCTSome(37): VCTOption[Int])
  z__3 := (VCTNone(): VCTOption[Ref])
  // assert
  assert x__1 != y__2
  // assert
  assert x__1 == (VCTNone(): VCTOption[Int])
  // assert
  assert y__2 != (VCTNone(): VCTOption[Int])
  // assert
  assert z__3 == (VCTNone(): VCTOption[Ref])
  // assert
  assert getVCTOption1(y__2) == 37
  // assert
  assert (getVCTOptionOrElse(x__1, 21387): Int) == 21387
}