// Generated on 2021-03-23 at 23:37:17
domain TYPE {
  
  unique function class_C(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom C_directSuperclass {
    directSuperclass(class_C()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field C_a: Int

//  a field 
field C_b: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


method C___contract_unsatisfiable__m_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && (acc(diz.C_a, write) && acc(diz.C_b, write))
  // assert
  assert false
  inhale false
}

method C_loop_body_4_Integer(diz: Ref, x: Int)
  requires diz != null
  requires acc(diz.C_a, write)
  requires 0 < x
  ensures acc(diz.C_a, write)
  ensures 0 < diz.C_a
{
  diz.C_a := x
}

method C_loop_body_5_Integer(diz: Ref, x: Int)
  requires diz != null
  requires acc(diz.C_b, write)
  requires 3 < x
  ensures acc(diz.C_b, write)
  ensures 3 < diz.C_b
{
  exhale 3 < x
  inhale 3 < x
  // assert
  assert 3 < x
  diz.C_b := x
  exhale 3 < x
  inhale 3 < x
}

method C_parrallel_region_main_1_Integer(diz: Ref, x: Int)
  requires diz != null
  requires true ==> acc(diz.C_a, write)
  requires true ==> 0 < x
  requires true ==> acc(diz.C_b, write)
  requires true ==> 3 < x
  ensures true ==> acc(diz.C_a, write)
  ensures true ==> 0 < diz.C_a
  ensures true ==> acc(diz.C_b, write)
  ensures true ==> 3 < diz.C_b
{
  inhale false
}

method C_m_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.C_a, write)
  requires acc(diz.C_b, write)
{
  var x__1: Int
  var x_old__2: Int
  x__1 := 10
  x_old__2 := x__1
  C_parrallel_region_main_1_Integer(diz, x__1)
  // assert
  assert x__1 == x_old__2
  // assert
  assert 0 < diz.C_a
  // assert
  assert 3 < diz.C_b
}