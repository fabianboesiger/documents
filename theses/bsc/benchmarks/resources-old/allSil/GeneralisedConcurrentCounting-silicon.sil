// Generated on 2021-03-23 at 23:31:58
domain Process {
  
  function p_is_choice(p1: Process, p2: Process): Bool
  
  function p_empty(): Process
  
  function p_merge(p1: Process, p2: Process): Process
  
  function p_choice(p1: Process, p2: Process): Process
  
  function p_seq(p1: Process, p2: Process): Process
  
  function p_decr(): Process
  
  function p_pardecr(n: Int): Process
  
  axiom empty_1L {
    (forall p: Process :: { p_merge(p_empty(), p) } p_merge(p_empty(), p) == p)
  }
  
  axiom empty_2L {
    (forall p: Process :: { p_seq(p_empty(), p) } p_seq(p_empty(), p) == p)
  }
  
  axiom empty_2R {
    (forall p: Process :: { p_seq(p, p_empty()) } p_seq(p, p_empty()) == p)
  }
  
  axiom choice_L {
    (forall p1: Process, p2: Process :: { p_is_choice(p_choice(p1, p2), p1) } p_is_choice(p_choice(p1, p2), p1))
  }
  
  axiom choice_R {
    (forall p1: Process, p2: Process :: { p_is_choice(p_choice(p1, p2), p2) } p_is_choice(p_choice(p1, p2), p2))
  }
  
  axiom choice_dist {
    (forall p1: Process, p2: Process, p3: Process :: { p_seq(p_choice(p1, p2), p3) } p_seq(p_choice(p1, p2), p3) == p_choice(p_seq(p1, p3), p_seq(p2, p3)))
  }
  
  axiom seq_assoc {
    (forall p1: Process, p2: Process, p3: Process :: { p_seq(p_seq(p1, p2), p3) } p_seq(p_seq(p1, p2), p3) == p_seq(p1, p_seq(p2, p3)))
  }
  
  axiom decr_def_2 {
    (forall p: Process :: { p_seq(p, p_decr()) } p_seq(p, p_decr()) == p_seq(p, p_seq(p_decr(), p_empty())))
  }
  
  axiom pardecr_def_1 {
    (forall n: Int :: { p_pardecr(n) } (0 < n ? p_merge(p_decr(), p_pardecr(n - 1)) : p_empty()) == p_pardecr(n))
  }
  
  axiom pardecr_def_2 {
    (forall p: Process, n: Int :: { p_seq(p, p_pardecr(n)) } p_seq(p, p_pardecr(n)) == p_seq(p, p_seq(p_pardecr(n), p_empty())))
  }
}

domain TYPE {
  
  unique function class_Future(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_Worker(): TYPE
  
  unique function class_Program(): TYPE
  
  unique function class_Main(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Future_directSuperclass {
    directSuperclass(class_Future()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Worker_directSuperclass {
    directSuperclass(class_Worker()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Program_directSuperclass {
    directSuperclass(class_Program()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Main_directSuperclass {
    directSuperclass(class_Main()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field Future_counter_hist_value: Int

//  a field 
field Future_counter_hist_init: Int

//  a field 
field Future_counter_hist_act: Int

//  a field 
field Future_counter_hist_write: Int

//  a field 
field Future_counter_hist_free: Int

//  a field 
field Future_counter_hist_hist: Int

//  a field 
field Future_counter_hist_action: Int

//  a field 
field Worker_p: frac

//  a field 
field Worker_prog: Ref

//  a field 
field Program_count: Int

//  a field 
field Program_threads: Int

//  a field 
field Program_f: Ref

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


predicate Future_hist_do_decr_Fraction_Process(diz: Ref, fr: frac, proc: Process) 

predicate Future_hist_idle_Fraction_Process(diz: Ref, fr: frac, proc: Process) 

predicate Worker_joinToken_EncodedGlobalVariables(diz: Ref, globals: Ref) 

predicate Worker_idleToken_EncodedGlobalVariables(diz: Ref, globals: Ref) 

predicate Program_lock_held_EncodedGlobalVariables(diz: Ref, globals: Ref) 

predicate Program_lock_invariant_EncodedGlobalVariables(diz: Ref, globals: Ref) {
  diz != null && (acc(diz.Program_f, wildcard) && (acc(diz.Program_f.Future_counter_hist_value, write) && acc(diz.Program_f.Future_counter_hist_hist, write)))
}

method Future_decr_begin_Fraction_Process(diz: Ref, fr: frac, proc: Process)
  requires diz != null
  requires frac_val(fr) != none
  requires acc(Future_hist_idle_Fraction_Process(diz, fr, p_seq(p_decr(), proc)), write)
  requires write != none
  requires acc(diz.Future_counter_hist_value, write)
  requires acc(diz.Future_counter_hist_hist, write)
  ensures frac_val(fr) != none
  ensures acc(Future_hist_do_decr_Fraction_Process(diz, fr, proc), write)
  ensures acc(diz.Future_counter_hist_act, write)
  ensures acc(diz.Future_counter_hist_value, write)
  ensures acc(diz.Future_counter_hist_write, write)
  ensures acc(diz.Future_counter_hist_action, write)
  ensures diz.Future_counter_hist_value == diz.Future_counter_hist_act
  ensures diz.Future_counter_hist_value == old(diz.Future_counter_hist_value)
{
  inhale false
}

method Future_decr_commit_Fraction_Process(diz: Ref, fr: frac, proc: Process)
  requires diz != null
  requires frac_val(fr) != none
  requires acc(Future_hist_do_decr_Fraction_Process(diz, fr, proc), write)
  requires write != none
  requires acc(diz.Future_counter_hist_act, write)
  requires acc(diz.Future_counter_hist_value, write)
  requires acc(diz.Future_counter_hist_write, write)
  requires acc(diz.Future_counter_hist_action, write)
  requires diz.Future_counter_hist_value == diz.Future_counter_hist_act - 1
  ensures frac_val(fr) != none
  ensures acc(Future_hist_idle_Fraction_Process(diz, fr, proc), write)
  ensures acc(diz.Future_counter_hist_value, write)
  ensures acc(diz.Future_counter_hist_hist, write)
  ensures diz.Future_counter_hist_value == old(diz.Future_counter_hist_value)
{
  inhale false
}

method Future_Future() returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Future()
  ensures acc(sys__result.Future_counter_hist_value, write)
  ensures acc(sys__result.Future_counter_hist_write, write)
  ensures acc(sys__result.Future_counter_hist_free, write)
  ensures sys__result.Future_counter_hist_value == 0
{
  var diz__1: Ref
  diz__1 := new(Future_counter_hist_value, Future_counter_hist_init, Future_counter_hist_act, Future_counter_hist_write, Future_counter_hist_free, Future_counter_hist_hist, Future_counter_hist_action)
  inhale type_of(diz__1) == class_Future()
  Future_hist_set_counter_Integer(diz__1, 0)
  sys__result := diz__1
  // assert
  assert sys__result != null && type_of(sys__result) == class_Future() && acc(sys__result.Future_counter_hist_value, write) && acc(sys__result.Future_counter_hist_write, write) && acc(sys__result.Future_counter_hist_free, write) && sys__result.Future_counter_hist_value == 0
  inhale false
}

method Future_hist_set_counter_Integer(diz: Ref, value: Int)
  requires diz != null
  requires acc(diz.Future_counter_hist_value, write)
  requires acc(diz.Future_counter_hist_write, write)
  ensures acc(diz.Future_counter_hist_value, write) && diz.Future_counter_hist_value == value
  ensures acc(diz.Future_counter_hist_write, write)
{
  inhale false
}

method Future_end_future(diz: Ref)
  requires diz != null
  requires acc(diz.Future_counter_hist_value, write)
  requires acc(diz.Future_counter_hist_hist, write)
  requires acc(diz.Future_counter_hist_init, write)
  requires acc(Future_hist_idle_Fraction_Process(diz, new_frac(write), p_empty()), write)
  ensures acc(diz.Future_counter_hist_value, write)
  ensures acc(diz.Future_counter_hist_write, write)
  ensures acc(diz.Future_counter_hist_free, write)
  ensures diz.Future_counter_hist_value == old(diz.Future_counter_hist_value)
  ensures diz.Future_counter_hist_value == old(diz.Future_counter_hist_init)
{
  inhale false
}

method Future_split_Fraction_Process_Fraction_Process(diz: Ref, frac1: frac, proc1: Process, frac2: frac, proc2: Process)
  requires diz != null
  requires frac_val(frac1) + frac_val(frac2) <= write
  requires acc(Future_hist_idle_Fraction_Process(diz, new_frac(frac_val(frac1) + frac_val(frac2)), p_merge(proc1, proc2)), write)
  ensures acc(Future_hist_idle_Fraction_Process(diz, frac1, proc1), write)
  ensures acc(Future_hist_idle_Fraction_Process(diz, frac2, proc2), write)
{
  inhale false
}

method Future_merge_Fraction_Process_Fraction_Process(diz: Ref, frac1: frac, proc1: Process, frac2: frac, proc2: Process)
  requires diz != null
  requires frac_val(frac1) + frac_val(frac2) <= write
  requires acc(Future_hist_idle_Fraction_Process(diz, frac1, proc1), write)
  requires acc(Future_hist_idle_Fraction_Process(diz, frac2, proc2), write)
  ensures acc(Future_hist_idle_Fraction_Process(diz, new_frac(frac_val(frac1) + frac_val(frac2)), p_merge(proc1, proc2)), write)
{
  inhale false
}

method Future_begin_future_1_Integer(diz: Ref, n: Int)
  requires diz != null
  requires acc(diz.Future_counter_hist_value, write)
  requires acc(diz.Future_counter_hist_write, write)
  requires acc(diz.Future_counter_hist_free, write)
  requires 0 <= n
  ensures acc(diz.Future_counter_hist_value, write)
  ensures acc(diz.Future_counter_hist_hist, write)
  ensures acc(diz.Future_counter_hist_init, write)
  ensures diz.Future_counter_hist_value == old(diz.Future_counter_hist_value)
  ensures diz.Future_counter_hist_init == old(diz.Future_counter_hist_value) - n
  ensures acc(Future_hist_idle_Fraction_Process(diz, new_frac(write), p_pardecr(n)), write)
{
  inhale false
}

method Worker___contract_unsatisfiable__Worker_EncodedGlobalVariables_Program_Fraction(diz: Ref, globals: Ref, pr: Ref, fr: frac)
  requires diz != null
{
  inhale true && (acc(pr.Program_f, wildcard) && frac_val(fr) != none)
  // assert
  assert false
  inhale false
}

method Worker_Worker_EncodedGlobalVariables_Program_Fraction(globals: Ref, pr: Ref, fr: frac) returns (sys__result: Ref)
  requires acc(pr.Program_f, wildcard)
  requires frac_val(fr) != none
  ensures sys__result != null
  ensures type_of(sys__result) == class_Worker()
  ensures acc(Worker_idleToken_EncodedGlobalVariables(sys__result, globals), write)
  ensures acc(sys__result.Worker_prog, wildcard)
  ensures acc(sys__result.Worker_prog.Program_f, wildcard)
  ensures acc(sys__result.Worker_p, wildcard)
  ensures frac_val(sys__result.Worker_p) != none
  ensures sys__result.Worker_prog == pr
  ensures frac_val(sys__result.Worker_p) == frac_val(fr)
{
  var diz__2: Ref
  diz__2 := new(Worker_p, Worker_prog)
  inhale type_of(diz__2) == class_Worker()
  diz__2.Worker_prog := pr
  diz__2.Worker_p := fr
  inhale acc(Worker_idleToken_EncodedGlobalVariables(diz__2, globals), write)
  sys__result := diz__2
  // assert
  assert sys__result != null && type_of(sys__result) == class_Worker() && acc(Worker_idleToken_EncodedGlobalVariables(sys__result, globals), write) && acc(sys__result.Worker_prog, wildcard) && acc(sys__result.Worker_prog.Program_f, wildcard) && acc(sys__result.Worker_p, wildcard) && frac_val(sys__result.Worker_p) != none && sys__result.Worker_prog == pr && frac_val(sys__result.Worker_p) == frac_val(fr)
  inhale false
}

method Worker_forkOperator_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.Worker_p, wildcard)
  requires acc(diz.Worker_prog, wildcard)
  requires acc(diz.Worker_prog.Program_f, wildcard)
  requires frac_val(diz.Worker_p) != none
  requires acc(Future_hist_idle_Fraction_Process(diz.Worker_prog.Program_f, diz.Worker_p, p_decr()), write)
  requires acc(Worker_idleToken_EncodedGlobalVariables(diz, globals), write)
  ensures acc(Worker_joinToken_EncodedGlobalVariables(diz, globals), write)
{
  inhale false
}

method Worker_joinOperator_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(Worker_joinToken_EncodedGlobalVariables(diz, globals), write)
  ensures acc(Worker_idleToken_EncodedGlobalVariables(diz, globals), write)
  ensures acc(diz.Worker_p, wildcard)
  ensures acc(diz.Worker_prog, wildcard)
  ensures acc(diz.Worker_prog.Program_f, wildcard)
  ensures frac_val(diz.Worker_p) != none
  ensures acc(Future_hist_idle_Fraction_Process(diz.Worker_prog.Program_f, diz.Worker_p, p_empty()), write)
{
  inhale false
}

method Worker___contract_unsatisfiable__run_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && (acc(diz.Worker_p, wildcard) && acc(diz.Worker_prog, wildcard) && acc(diz.Worker_prog.Program_f, wildcard) && frac_val(diz.Worker_p) != none && acc(Future_hist_idle_Fraction_Process(diz.Worker_prog.Program_f, diz.Worker_p, p_decr()), write))
  // assert
  assert false
  inhale false
}

method Worker_run_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.Worker_p, wildcard)
  requires acc(diz.Worker_prog, wildcard)
  requires acc(diz.Worker_prog.Program_f, wildcard)
  requires frac_val(diz.Worker_p) != none
  requires acc(Future_hist_idle_Fraction_Process(diz.Worker_prog.Program_f, diz.Worker_p, p_decr()), write)
  ensures acc(diz.Worker_p, wildcard)
  ensures acc(diz.Worker_prog, wildcard)
  ensures acc(diz.Worker_prog.Program_f, wildcard)
  ensures frac_val(diz.Worker_p) != none
  ensures acc(Future_hist_idle_Fraction_Process(diz.Worker_prog.Program_f, diz.Worker_p, p_empty()), write)
{
  var __flatten_2__3: Ref
  var __flatten_3__4: Process
  var __flatten_5__5: Ref
  var __flatten_6__6: Ref
  var __flatten_7__7: Ref
  var __flatten_9__8: Ref
  var __flatten_10__9: Process
  inhale acc(Program_lock_invariant_EncodedGlobalVariables(diz.Worker_prog, globals), write)
  unfold acc(Program_lock_invariant_EncodedGlobalVariables(diz.Worker_prog, globals), write)
  inhale acc(Program_lock_held_EncodedGlobalVariables(diz.Worker_prog, globals), write)
  __flatten_2__3 := diz.Worker_prog
  __flatten_3__4 := p_empty()
  Future_decr_begin_Fraction_Process(__flatten_2__3.Program_f, diz.Worker_p, __flatten_3__4)
  __flatten_5__5 := diz.Worker_prog
  __flatten_7__7 := diz.Worker_prog
  __flatten_6__6 := __flatten_7__7.Program_f
  Future_hist_set_counter_Integer(__flatten_5__5.Program_f, __flatten_6__6.Future_counter_hist_value - 1)
  __flatten_9__8 := diz.Worker_prog
  __flatten_10__9 := p_empty()
  Future_decr_commit_Fraction_Process(__flatten_9__8.Program_f, diz.Worker_p, __flatten_10__9)
  exhale acc(Program_lock_held_EncodedGlobalVariables(diz.Worker_prog, globals), write)
  fold acc(Program_lock_invariant_EncodedGlobalVariables(diz.Worker_prog, globals), write)
  exhale acc(Program_lock_invariant_EncodedGlobalVariables(diz.Worker_prog, globals), write)
}

method Program___contract_unsatisfiable__Program_EncodedGlobalVariables_Integer_Integer(diz: Ref, globals: Ref, count: Int, threads: Int)
  requires diz != null
{
  inhale true && 0 < threads
  // assert
  assert false
  inhale false
}

method Program_Program_EncodedGlobalVariables_Integer_Integer(globals: Ref, count: Int, threads: Int) returns (sys__result: Ref)
  requires 0 < threads
  ensures sys__result != null
  ensures type_of(sys__result) == class_Program()
  ensures acc(sys__result.Program_f, wildcard)
  ensures acc(Future_hist_idle_Fraction_Process(sys__result.Program_f, new_frac(write), p_pardecr(threads)), write)
  ensures acc(sys__result.Program_count, wildcard)
  ensures acc(sys__result.Program_threads, wildcard)
  ensures acc(sys__result.Program_f.Future_counter_hist_init, write)
  ensures sys__result.Program_f.Future_counter_hist_init == sys__result.Program_count - sys__result.Program_threads
  ensures sys__result.Program_count == count
  ensures sys__result.Program_threads == threads
{
  var __flatten_12__11: Ref
  var diz__10: Ref
  diz__10 := new(Program_count, Program_threads, Program_f)
  inhale type_of(diz__10) == class_Program()
  diz__10.Program_count := count
  diz__10.Program_threads := threads
  __flatten_12__11 := Future_Future()
  diz__10.Program_f := __flatten_12__11
  Future_hist_set_counter_Integer(diz__10.Program_f, count)
  Future_begin_future_1_Integer(diz__10.Program_f, threads)
  fold acc(Program_lock_invariant_EncodedGlobalVariables(diz__10, globals), write)
  exhale acc(Program_lock_invariant_EncodedGlobalVariables(diz__10, globals), write)
  sys__result := diz__10
  // assert
  assert sys__result != null && type_of(sys__result) == class_Program() && acc(sys__result.Program_f, wildcard) && acc(Future_hist_idle_Fraction_Process(sys__result.Program_f, new_frac(write), p_pardecr(threads)), write) && acc(sys__result.Program_count, wildcard) && acc(sys__result.Program_threads, wildcard) && acc(sys__result.Program_f.Future_counter_hist_init, write) && sys__result.Program_f.Future_counter_hist_init == sys__result.Program_count - sys__result.Program_threads && sys__result.Program_count == count && sys__result.Program_threads == threads
  inhale false
}

method Program___contract_unsatisfiable__spawn_EncodedGlobalVariables_Integer_Fraction(diz: Ref, globals: Ref, n: Int, p: frac)
  requires diz != null
{
  inhale true && (frac_val(p) <= write && 0 <= n && frac_val(p) != none && acc(diz.Program_f, wildcard) && acc(diz.Program_count, wildcard) && acc(diz.Program_threads, wildcard) && (acc(diz.Program_f.Future_counter_hist_init, write) && diz.Program_f.Future_counter_hist_init == diz.Program_count - diz.Program_threads) && acc(Future_hist_idle_Fraction_Process(diz.Program_f, p, p_pardecr(n)), write))
  // assert
  assert false
  inhale false
}

method Program_spawn_EncodedGlobalVariables_Integer_Fraction(diz: Ref, globals: Ref, n: Int, p: frac)
  requires diz != null
  requires frac_val(p) <= write
  requires 0 <= n
  requires frac_val(p) != none
  requires acc(diz.Program_f, wildcard)
  requires acc(diz.Program_count, wildcard)
  requires acc(diz.Program_threads, wildcard)
  requires acc(diz.Program_f.Future_counter_hist_init, write)
  requires diz.Program_f.Future_counter_hist_init == diz.Program_count - diz.Program_threads
  requires acc(Future_hist_idle_Fraction_Process(diz.Program_f, p, p_pardecr(n)), write)
  ensures 0 <= n
  ensures frac_val(p) != none
  ensures acc(diz.Program_f, wildcard)
  ensures acc(diz.Program_count, wildcard)
  ensures acc(diz.Program_threads, wildcard)
  ensures acc(diz.Program_f.Future_counter_hist_init, write)
  ensures diz.Program_f.Future_counter_hist_init == diz.Program_count - diz.Program_threads
  ensures acc(Future_hist_idle_Fraction_Process(diz.Program_f, p, p_empty()), write)
{
  var t__16: Ref
  var __flatten_16__12: Process
  var __flatten_17__13: Process
  var __flatten_23__14: Process
  var __flatten_24__15: Process
  if (0 < n) {
    __flatten_16__12 := p_decr()
    __flatten_17__13 := p_pardecr(n - 1)
    Future_split_Fraction_Process_Fraction_Process(diz.Program_f, new_frac(frac_val(p) / 2), __flatten_16__12, new_frac(frac_val(p) / 2), __flatten_17__13)
    t__16 := Worker_Worker_EncodedGlobalVariables_Program_Fraction(globals, diz, new_frac(frac_val(p) / 2))
    Worker_forkOperator_EncodedGlobalVariables(t__16, globals)
    Program_spawn_EncodedGlobalVariables_Integer_Fraction(diz, globals, n - 1, new_frac(frac_val(p) / 2))
    Worker_joinOperator_EncodedGlobalVariables(t__16, globals)
    __flatten_23__14 := p_empty()
    __flatten_24__15 := p_empty()
    Future_merge_Fraction_Process_Fraction_Process(diz.Program_f, new_frac(frac_val(p) / 2), __flatten_23__14, new_frac(frac_val(p) / 2), __flatten_24__15)
  }
}

method Main___contract_unsatisfiable__main_EncodedGlobalVariables_Integer_Integer(diz: Ref, globals: Ref, count: Int, threads: Int)
  requires diz != null
{
  inhale true && 0 < threads
  // assert
  assert false
  inhale false
}

method Main_main_EncodedGlobalVariables_Integer_Integer(diz: Ref, globals: Ref, count: Int, threads: Int)
  requires diz != null
  requires 0 < threads
{
  var p__17: Ref
  p__17 := Program_Program_EncodedGlobalVariables_Integer_Integer(globals, count, threads)
  Program_spawn_EncodedGlobalVariables_Integer_Fraction(p__17, globals, threads, new_frac(write))
  inhale acc(Program_lock_invariant_EncodedGlobalVariables(p__17, globals), write)
  unfold acc(Program_lock_invariant_EncodedGlobalVariables(p__17, globals), write)
  inhale acc(Program_lock_held_EncodedGlobalVariables(p__17, globals), write)
  Future_end_future(p__17.Program_f)
  // assert
  assert p__17.Program_f.Future_counter_hist_value == count - threads
}

method Main___contract_unsatisfiable__Main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Main_Main_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Main()
{
  var diz__18: Ref
  diz__18 := new()
  inhale type_of(diz__18) == class_Main()
  sys__result := diz__18
  // assert
  assert sys__result != null && type_of(sys__result) == class_Main()
  inhale false
}