// Generated on 2021-03-23 at 23:30:25
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_CB(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom CB_directSuperclass {
    directSuperclass(class_CB()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method CB_p_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Bool)
  requires diz != null
{
  inhale false
}

method CB_internal_p_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Bool)
  requires diz != null
{
  inhale false
}

method CB_m1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method CB___contract_unsatisfiable__internal_m1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method CB_internal_m1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var pp__1: Bool
  pp__1 := CB_p_EncodedGlobalVariables(diz, globals)
  while (pp__1) {
    goto __break_loop_0_continue
    // assert
    assert false
    label __break_loop_0_continue
  }
}

method CB_m2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method CB___contract_unsatisfiable__internal_m2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method CB_internal_m2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var pp__2: Bool
  pp__2 := CB_p_EncodedGlobalVariables(diz, globals)
  while (pp__2) {
    goto __break_loop_1
  }
  label __break_loop_1
  // assert
  assert false
}