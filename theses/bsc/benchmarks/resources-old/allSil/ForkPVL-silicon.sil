// Generated on 2021-03-23 at 23:31:06
domain TYPE {
  
  unique function class_Test(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Test_directSuperclass {
    directSuperclass(class_Test()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


predicate Test_joinToken_EncodedGlobalVariables(diz: Ref, globals: Ref) 

predicate Test_idleToken_EncodedGlobalVariables(diz: Ref, globals: Ref) 

method Test_forkOperator_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(Test_idleToken_EncodedGlobalVariables(diz, globals), write)
  ensures acc(Test_joinToken_EncodedGlobalVariables(diz, globals), write)
{
  inhale false
}

method Test_joinOperator_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(Test_joinToken_EncodedGlobalVariables(diz, globals), write)
  ensures acc(Test_idleToken_EncodedGlobalVariables(diz, globals), write)
{
  inhale false
}

method Test___contract_unsatisfiable__run_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Test_run_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  
}

method Test___contract_unsatisfiable__test1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Test_test1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var t1__1: Ref
  // assert
  assert true
  t1__1 := Test_Test_EncodedGlobalVariables(globals)
  // assert
  assert acc(Test_idleToken_EncodedGlobalVariables(t1__1, globals), write)
  Test_forkOperator_EncodedGlobalVariables(t1__1, globals)
  // assert
  assert acc(Test_joinToken_EncodedGlobalVariables(t1__1, globals), write)
  Test_joinOperator_EncodedGlobalVariables(t1__1, globals)
  // assert
  assert acc(Test_idleToken_EncodedGlobalVariables(t1__1, globals), write)
  Test_forkOperator_EncodedGlobalVariables(t1__1, globals)
  // assert
  assert acc(Test_joinToken_EncodedGlobalVariables(t1__1, globals), write)
  Test_joinOperator_EncodedGlobalVariables(t1__1, globals)
  // assert
  assert acc(Test_idleToken_EncodedGlobalVariables(t1__1, globals), write)
}

method Test___contract_unsatisfiable__test2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Test_test2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var t1__2: Ref
  t1__2 := Test_Test_EncodedGlobalVariables(globals)
  Test_forkOperator_EncodedGlobalVariables(t1__2, globals)
  Test_forkOperator_EncodedGlobalVariables(t1__2, globals)
}

method Test___contract_unsatisfiable__test3_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Test_test3_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var t1__3: Ref
  t1__3 := Test_Test_EncodedGlobalVariables(globals)
  Test_joinOperator_EncodedGlobalVariables(t1__3, globals)
}

method Test___contract_unsatisfiable__Test_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Test_Test_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Test()
{
  var diz__4: Ref
  diz__4 := new()
  inhale type_of(diz__4) == class_Test()
  sys__result := diz__4
  // assert
  assert sys__result != null && type_of(sys__result) == class_Test()
  inhale false
}