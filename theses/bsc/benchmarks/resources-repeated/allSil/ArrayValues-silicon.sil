// Generated on 2021-03-23 at 23:28:46
domain TYPE {
  
  unique function class_C(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom C_directSuperclass {
    directSuperclass(class_C()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

domain VCTArray[CT] {
  
  function loc(a: VCTArray[CT], i: Int): CT
  
  function alen(a: VCTArray[CT]): Int
  
  function first(r: CT): VCTArray[CT]
  
  function second(r: CT): Int
  
  axiom all_diff {
    (forall a: VCTArray[CT], i: Int :: { (loc(a, i): CT) } (first((loc(a, i): CT)): VCTArray[CT]) == a && (second((loc(a, i): CT)): Int) == i)
  }
  
  axiom len_nonneg {
    (forall a: VCTArray[CT] :: { (alen(a): Int) } (alen(a): Int) >= 0)
  }
}

domain VCTOption[T] {
  
  function VCTNone(): VCTOption[T]
  
  function VCTSome(t: T): VCTOption[T]
  
  function getVCTOption(o: VCTOption[T]): T
  
  function getVCTOptionOrElse(o: VCTOption[T], default: T): T
  
  axiom not_equal_vct {
    (forall x: T :: { (VCTSome(x): VCTOption[T]) } (VCTNone(): VCTOption[T]) != (VCTSome(x): VCTOption[T]))
  }
  
  axiom get_axiom_vct {
    (forall x: T :: { (getVCTOption((VCTSome(x): VCTOption[T])): T) } (getVCTOption((VCTSome(x): VCTOption[T])): T) == x)
  }
  
  axiom get_axiom_vct_2 {
    (forall x: VCTOption[T] :: { (VCTSome((getVCTOption(x): T)): VCTOption[T]) } (VCTSome((getVCTOption(x): T)): VCTOption[T]) == x)
  }
  
  axiom get_or_else_axiom_1 {
    (forall val: T, default: T :: { (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) == val)
  }
  
  axiom get_or_else_axiom_2 {
    (forall default: T :: { (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) == default)
  }
}

//  a field 
field Integer__item: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


function getVCTOption1(x: VCTOption[VCTArray[Ref]]): VCTArray[Ref]
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
{
  (getVCTOption(x): VCTArray[Ref])
}

method C___contract_unsatisfiable__copy_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Fraction_Sequence$Integer$_Sequence$Integer$(diz: Ref, globals: Ref, t: VCTOption[VCTArray[Ref]], p: frac, xs: Seq[Int]) returns (sys__result: VCTOption[VCTArray[Ref]], ys: Seq[Int])
  requires diz != null
{
  inhale true && (frac_val(p) != none && t != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(t)): Int) == |xs| && (forall k__1: Int :: { (loc(getVCTOption1(t), k__1): Ref) } 0 <= k__1 && k__1 < (alen(getVCTOption1(t)): Int) ==> acc((loc(getVCTOption1(t), k__1): Ref).Integer__item, frac_val(p))) && (forall k__2: Int :: { (loc(getVCTOption1(t), k__2): Ref) } { xs[k__2] } 0 <= k__2 && k__2 < (alen(getVCTOption1(t)): Int) ==> (loc(getVCTOption1(t), k__2): Ref).Integer__item == xs[k__2]))
  // assert
  assert false
  inhale false
}

method C_copy_EncodedGlobalVariables_Option$Array$Cell$Integer$$$_Fraction_Sequence$Integer$_Sequence$Integer$(diz: Ref, globals: Ref, t: VCTOption[VCTArray[Ref]], p: frac, xs: Seq[Int]) returns (sys__result: VCTOption[VCTArray[Ref]], ys: Seq[Int])
  requires diz != null
  requires frac_val(p) != none
  requires t != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(t)): Int) == |xs|
  requires (forall k: Int :: { (loc(getVCTOption1(t), k): Ref) } 0 <= k && k < (alen(getVCTOption1(t)): Int) ==> acc((loc(getVCTOption1(t), k): Ref).Integer__item, frac_val(p)))
  requires (forall k: Int :: { (loc(getVCTOption1(t), k): Ref) } { xs[k] } 0 <= k && k < (alen(getVCTOption1(t)): Int) ==> (loc(getVCTOption1(t), k): Ref).Integer__item == xs[k])
  ensures frac_val(p) != none
  ensures t != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(t)): Int) == |xs|
  ensures (forall k: Int :: { (loc(getVCTOption1(t), k): Ref) } 0 <= k && k < (alen(getVCTOption1(t)): Int) ==> acc((loc(getVCTOption1(t), k): Ref).Integer__item, frac_val(p)))
  ensures (forall k: Int :: { (loc(getVCTOption1(t), k): Ref) } { xs[k] } 0 <= k && k < (alen(getVCTOption1(t)): Int) ==> (loc(getVCTOption1(t), k): Ref).Integer__item == xs[k])
  ensures write != none
  ensures sys__result != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(sys__result)): Int) == |ys|
  ensures (forall k: Int :: { (loc(getVCTOption1(sys__result), k): Ref) } 0 <= k && k < (alen(getVCTOption1(sys__result)): Int) ==> acc((loc(getVCTOption1(sys__result), k): Ref).Integer__item, write))
  ensures (forall k: Int :: { (loc(getVCTOption1(sys__result), k): Ref) } { ys[k] } 0 <= k && k < (alen(getVCTOption1(sys__result)): Int) ==> (loc(getVCTOption1(sys__result), k): Ref).Integer__item == ys[k])
  ensures ys == xs
{
  var res__3: VCTOption[VCTArray[Ref]]
  var i__4: Int
  var __flatten_2__5: Ref
  var __flatten_3__6: Int
  var __flatten_4__7: Ref
  ys := xs
  res__3 := array_new_Option_Array_Cell_Integer____Integer((alen(getVCTOption1(t)): Int))
  i__4 := 0
  while (i__4 < (alen(getVCTOption1(t)): Int))
    invariant 0 <= i__4
    invariant i__4 <= (alen(getVCTOption1(t)): Int)
    invariant ys == xs
    invariant (alen(getVCTOption1(res__3)): Int) == (alen(getVCTOption1(t)): Int)
    invariant frac_val(p) != none
    invariant t != (VCTNone(): VCTOption[VCTArray[Ref]])
    invariant (alen(getVCTOption1(t)): Int) == |xs|
    invariant (forall k__8: Int :: { (loc(getVCTOption1(t), k__8): Ref) } 0 <= k__8 && k__8 < (alen(getVCTOption1(t)): Int) ==> acc((loc(getVCTOption1(t), k__8): Ref).Integer__item, frac_val(p)))
    invariant (forall k__9: Int :: { (loc(getVCTOption1(t), k__9): Ref) } { xs[k__9] } 0 <= k__9 && k__9 < (alen(getVCTOption1(t)): Int) ==> (loc(getVCTOption1(t), k__9): Ref).Integer__item == xs[k__9])
    invariant (forall k__10: Int :: { (loc(getVCTOption1(res__3), k__10): Ref) } 0 <= k__10 && k__10 < (alen(getVCTOption1(res__3)): Int) ==> acc((loc(getVCTOption1(res__3), k__10): Ref).Integer__item, write))
    invariant (forall k__11: Int :: { (loc(getVCTOption1(res__3), k__11): Ref) } { ys[k__11] } 0 <= k__11 && k__11 < i__4 ==> (loc(getVCTOption1(res__3), k__11): Ref).Integer__item == ys[k__11]) 
  {
    __flatten_2__5 := (loc(getVCTOption1(res__3), i__4): Ref)
    __flatten_4__7 := (loc(getVCTOption1(t), i__4): Ref)
    __flatten_3__6 := __flatten_4__7.Integer__item
    __flatten_2__5.Integer__item := __flatten_3__6
    i__4 := i__4 + 1
  }
  sys__result := res__3
  // assert
  assert frac_val(p) != none && t != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(t)): Int) == |xs| && (forall k__12: Int :: { (loc(getVCTOption1(t), k__12): Ref) } 0 <= k__12 && k__12 < (alen(getVCTOption1(t)): Int) ==> acc((loc(getVCTOption1(t), k__12): Ref).Integer__item, frac_val(p))) && (forall k__13: Int :: { (loc(getVCTOption1(t), k__13): Ref) } { xs[k__13] } 0 <= k__13 && k__13 < (alen(getVCTOption1(t)): Int) ==> (loc(getVCTOption1(t), k__13): Ref).Integer__item == xs[k__13]) && write != none && sys__result != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(sys__result)): Int) == |ys| && (forall k__14: Int :: { (loc(getVCTOption1(sys__result), k__14): Ref) } 0 <= k__14 && k__14 < (alen(getVCTOption1(sys__result)): Int) ==> acc((loc(getVCTOption1(sys__result), k__14): Ref).Integer__item, write)) && (forall k__15: Int :: { (loc(getVCTOption1(sys__result), k__15): Ref) } { ys[k__15] } 0 <= k__15 && k__15 < (alen(getVCTOption1(sys__result)): Int) ==> (loc(getVCTOption1(sys__result), k__15): Ref).Integer__item == ys[k__15]) && ys == xs
  inhale false
}

method array_new_Option_Array_Cell_Integer____Integer(size0: Int) returns (sys__result: VCTOption[VCTArray[Ref]])
  ensures sys__result != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(sys__result)): Int) == size0
  ensures (forall i0: Int :: { (loc(getVCTOption1(sys__result), i0): Ref).Integer__item } 0 <= i0 && i0 < size0 ==> acc((loc(getVCTOption1(sys__result), i0): Ref).Integer__item, write))
  ensures (forall i0: Int :: { (loc(getVCTOption1(sys__result), i0): Ref).Integer__item } 0 <= i0 && i0 < size0 ==> (loc(getVCTOption1(sys__result), i0): Ref).Integer__item == 0)
{
  inhale false
}