// Generated on 2021-03-23 at 23:42:32
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_C(): TYPE
  
  unique function class_java_DOT_lang_DOT_Throwable(): TYPE
  
  unique function class_java_DOT_lang_DOT_Exception(): TYPE
  
  unique function class_java_DOT_io_DOT_IOException(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom C_directSuperclass {
    directSuperclass(class_C()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom java_DOT_lang_DOT_Throwable_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Throwable()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom java_DOT_lang_DOT_Exception_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Exception()) == class_java_DOT_lang_DOT_Throwable()
  }
  
  axiom java_DOT_io_DOT_IOException_directSuperclass {
    directSuperclass(class_java_DOT_io_DOT_IOException()) == class_java_DOT_lang_DOT_Exception()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field C_x: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method C_m_java_DOT_lang_DOT_Object_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__exc: Ref)
  requires diz != null
  requires acc(diz.C_x, write)
  requires diz.C_x == 0
  ensures sys__exc == null ==> false
  ensures sys__exc != null && instanceof_TYPE_TYPE(type_of(sys__exc), class_java_DOT_io_DOT_IOException()) ==> acc(diz.C_x, write) && diz.C_x == 5
  ensures sys__exc != null ==> sys__exc != null && instanceof_TYPE_TYPE(type_of(sys__exc), class_java_DOT_io_DOT_IOException())
{
  inhale false
}

method C___contract_unsatisfiable__internal_m_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && (acc(diz.C_x, write) && diz.C_x == 0)
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__internal_m_0
}

method C_internal_m_java_DOT_lang_DOT_Object_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__exc: Ref)
  requires diz != null
  requires acc(diz.C_x, write)
  requires diz.C_x == 0
  ensures sys__exc == null ==> false
  ensures sys__exc != null && instanceof_TYPE_TYPE(type_of(sys__exc), class_java_DOT_io_DOT_IOException()) ==> acc(diz.C_x, write) && diz.C_x == 5
  ensures sys__exc != null ==> sys__exc != null && instanceof_TYPE_TYPE(type_of(sys__exc), class_java_DOT_io_DOT_IOException())
{
  var _old_sys__exc_0__3: Ref
  var __flatten_1__1: Ref
  var old__sys_exc_4__2: Ref
  sys__exc := null
  old__sys_exc_4__2 := sys__exc
  __flatten_1__1 := java_DOT_io_DOT_IOException_IOException_EncodedGlobalVariables(globals)
  sys__exc := __flatten_1__1
  goto finally_2
  goto finally_2
  label finally_2
  _old_sys__exc_0__3 := sys__exc
  while (diz.C_x < 5)
    invariant acc(diz.C_x, write)
    invariant 0 <= diz.C_x && diz.C_x <= 5
    invariant _old_sys__exc_0__3 == sys__exc 
  {
    diz.C_x := diz.C_x + 1
  }
  if (sys__exc != old__sys_exc_4__2) {
    goto method_end_internal_m_1
  }
  goto try_end_3
  label try_end_3
  diz.C_x := 0
  label method_end_internal_m_1
}

method java_DOT_lang_DOT_Throwable_Throwable_EncodedGlobalVariables_java_DOT_lang_DOT_Throwable(globals: Ref, arg0: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Throwable()
{
  inhale false
}

method java_DOT_lang_DOT_Throwable_internal_Throwable_EncodedGlobalVariables_java_DOT_lang_DOT_Throwable(globals: Ref, arg0: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Throwable()
{
  inhale false
}

method java_DOT_lang_DOT_Throwable_Throwable_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Throwable()
{
  inhale false
}

method java_DOT_lang_DOT_Throwable_internal_Throwable_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Throwable()
{
  inhale false
}

method java_DOT_lang_DOT_Throwable_printStackTrace_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_Throwable_internal_printStackTrace_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_Throwable_getMessage_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_Throwable_internal_getMessage_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_Exception_Exception_EncodedGlobalVariables_java_DOT_lang_DOT_Throwable(globals: Ref, arg0: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Exception()
{
  inhale false
}

method java_DOT_lang_DOT_Exception_internal_Exception_EncodedGlobalVariables_java_DOT_lang_DOT_Throwable(globals: Ref, arg0: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Exception()
{
  inhale false
}

method java_DOT_lang_DOT_Exception_Exception_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Exception()
{
  inhale false
}

method java_DOT_lang_DOT_Exception_internal_Exception_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Exception()
{
  inhale false
}

method java_DOT_lang_DOT_Exception_printStackTrace_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_Exception_internal_printStackTrace_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_Exception_getMessage_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_Exception_internal_getMessage_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale false
}

method java_DOT_io_DOT_IOException_IOException_EncodedGlobalVariables_java_DOT_lang_DOT_Throwable(globals: Ref, arg0: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_io_DOT_IOException()
{
  inhale false
}

method java_DOT_io_DOT_IOException_internal_IOException_EncodedGlobalVariables_java_DOT_lang_DOT_Throwable(globals: Ref, arg0: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_io_DOT_IOException()
{
  inhale false
}

method java_DOT_io_DOT_IOException_IOException_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_io_DOT_IOException()
{
  inhale false
}

method java_DOT_io_DOT_IOException_internal_IOException_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_io_DOT_IOException()
{
  inhale false
}

method java_DOT_io_DOT_IOException_printStackTrace_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method java_DOT_io_DOT_IOException_internal_printStackTrace_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method java_DOT_io_DOT_IOException_getMessage_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale false
}

method java_DOT_io_DOT_IOException_internal_getMessage_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale false
}