// Generated on 2021-03-23 at 23:40:15
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_MyClass(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom MyClass_directSuperclass {
    directSuperclass(class_MyClass()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field MyClass_x: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


predicate MyClass_lock_held_EncodedGlobalVariables(diz: Ref, globals: Ref) 

predicate MyClass_lock_invariant_EncodedGlobalVariables(diz: Ref, globals: Ref) {
  diz != null && acc(diz.MyClass_x, write)
}

method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method MyClass___contract_unsatisfiable__MyClass_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__MyClass_0
}

method MyClass_MyClass_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_MyClass()
{
  var diz__1: Ref
  diz__1 := new(MyClass_x)
  inhale type_of(diz__1) == class_MyClass()
  diz__1.MyClass_x := 0
  fold acc(MyClass_lock_invariant_EncodedGlobalVariables(diz__1, globals), write)
  exhale acc(MyClass_lock_invariant_EncodedGlobalVariables(diz__1, globals), write)
  label method_end_MyClass_1
  sys__result := diz__1
  // assert
  assert sys__result != null && type_of(sys__result) == class_MyClass()
  inhale false
}

method MyClass___contract_unsatisfiable__increment_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__increment_2
}

method MyClass_increment_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var sys__exc__2: Ref
  var __sync_0__3: Ref
  var old__sys_exc_6__4: Ref
  sys__exc__2 := null
  __sync_0__3 := diz
  inhale acc(MyClass_lock_invariant_EncodedGlobalVariables(__sync_0__3, globals), write)
  unfold acc(MyClass_lock_invariant_EncodedGlobalVariables(__sync_0__3, globals), write)
  inhale acc(MyClass_lock_held_EncodedGlobalVariables(__sync_0__3, globals), write)
  old__sys_exc_6__4 := sys__exc__2
  diz.MyClass_x := diz.MyClass_x + 1
  goto finally_4
  label finally_4
  exhale acc(MyClass_lock_held_EncodedGlobalVariables(__sync_0__3, globals), write)
  fold acc(MyClass_lock_invariant_EncodedGlobalVariables(__sync_0__3, globals), write)
  exhale acc(MyClass_lock_invariant_EncodedGlobalVariables(__sync_0__3, globals), write)
  if (sys__exc__2 != old__sys_exc_6__4) {
    goto method_end_increment_3
  }
  goto try_end_5
  label try_end_5
  label method_end_increment_3
  // assert
  assert sys__exc__2 == null
}

method MyClass___contract_unsatisfiable__other_increment_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__other_increment_7
}

method MyClass_other_increment_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var sys__exc__5: Ref
  var __sync_1__6: Ref
  var old__sys_exc_11__7: Ref
  sys__exc__5 := null
  __sync_1__6 := diz
  inhale acc(MyClass_lock_invariant_EncodedGlobalVariables(__sync_1__6, globals), write)
  unfold acc(MyClass_lock_invariant_EncodedGlobalVariables(__sync_1__6, globals), write)
  inhale acc(MyClass_lock_held_EncodedGlobalVariables(__sync_1__6, globals), write)
  old__sys_exc_11__7 := sys__exc__5
  diz.MyClass_x := diz.MyClass_x + 1
  goto finally_9
  label finally_9
  exhale acc(MyClass_lock_held_EncodedGlobalVariables(__sync_1__6, globals), write)
  fold acc(MyClass_lock_invariant_EncodedGlobalVariables(__sync_1__6, globals), write)
  exhale acc(MyClass_lock_invariant_EncodedGlobalVariables(__sync_1__6, globals), write)
  if (sys__exc__5 != old__sys_exc_11__7) {
    goto method_end_other_increment_8
  }
  goto try_end_10
  label try_end_10
  label method_end_other_increment_8
  // assert
  assert sys__exc__5 == null
}