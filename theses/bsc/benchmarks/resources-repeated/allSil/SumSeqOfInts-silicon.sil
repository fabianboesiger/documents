// Generated on 2021-03-23 at 23:39:45
domain TYPE {
  
  unique function class_SumSeqOfInts(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom SumSeqOfInts_directSuperclass {
    directSuperclass(class_SumSeqOfInts()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain MatrixIndex {
  
  function product(r: VectorIndex, c: VectorIndex): MatrixIndex
}

domain MatrixExpression[T] {
  
  function msum(is: MatrixIndex, xs: MatrixExpression[T]): T
  
  function mrep(t: T): MatrixExpression[T]
  
  function mcmp(v1: MatrixExpression[T], v2: MatrixExpression[T]): MatrixExpression[Int]
  
  function mseq(m: Seq[Seq[T]]): MatrixExpression[T]
  
  function mdummy(v: Seq[Seq[Int]]): VectorExpression[T]
  
  function fmdummy(v: Seq[Seq[VCTFloat]]): VectorExpression[T]
  
  axiom msum_empty_f {
    (forall i: Int, cols: VectorIndex, xs: MatrixExpression[VCTFloat] :: { (msum(product(vrange(i, i), cols), xs): VCTFloat) } (msum(product(vrange(i, i), cols), xs): VCTFloat) == zero())
  }
  
  axiom msum_empty_i {
    (forall i: Int, cols: VectorIndex, xs: MatrixExpression[Int] :: { (msum(product(vrange(i, i), cols), xs): Int) } (msum(product(vrange(i, i), cols), xs): Int) == 0)
  }
  
  axiom extend_msum_r {
    (forall xs: Seq[Seq[T]], i: Int, j: Int, cols: VectorIndex :: { (msum(product(vrange(i, j), cols), (mseq(xs): MatrixExpression[T])): T) } (msum(product(vrange(i, j + 1), cols), (mseq(xs): MatrixExpression[T])): T) == (vadd((msum(product(vrange(i, j), cols), (mseq(xs): MatrixExpression[T])): T), (vsum(cols, (vseq(xs[i]): VectorExpression[T])): T)): T))
  }
}

domain VectorIndex {
  
  function vrange(lo: Int, hi: Int): VectorIndex
}

domain VectorExpression[T] {
  
  function vrep(t: T): VectorExpression[T]
  
  function vseq(xs: Seq[T]): VectorExpression[T]
  
  function vcmp(v1: VectorExpression[T], v2: VectorExpression[T]): VectorExpression[Int]
  
  function vsum(is: VectorIndex, xs: VectorExpression[T]): T
  
  function vget(v: VectorExpression[T], i: Int): T
  
  function vadd(t1: T, t2: T): T
  
  function vsize(v: VectorExpression[T]): Int
  
  function vdummy(v: Seq[Int]): VectorExpression[T]
  
  axiom vrep_idx {
    (forall i: Int, t: T :: { (vget((vrep(t): VectorExpression[T]), i): T) } (vget((vrep(t): VectorExpression[T]), i): T) == t)
  }
  
  axiom add_int {
    (forall i: Int, j: Int :: { (vadd(i, j): Int) } (vadd(i, j): Int) == i + j)
  }
  
  axiom vseq_get {
    (forall i: Int, xs: Seq[T] :: { (vget((vseq(xs): VectorExpression[T]), i): T) } (vget((vseq(xs): VectorExpression[T]), i): T) == xs[i])
  }
  
  axiom vcmp_get {
    (forall i: Int, xs: VectorExpression[T], ys: VectorExpression[T] :: { (vget((vcmp(xs, ys): VectorExpression[Int]), i): Int) } (vget((vcmp(xs, ys): VectorExpression[Int]), i): Int) == ((vget(xs, i): T) == (vget(ys, i): T) ? 1 : 0))
  }
  
  axiom add_float {
    (forall i: VCTFloat, j: VCTFloat :: { (vadd(i, j): VCTFloat) } (vadd(i, j): VCTFloat) == fadd(i, j))
  }
  
  axiom zero_vsum_f_r {
    (forall xs: VectorExpression[VCTFloat], i: Int :: { (vsum(vrange(i, i), xs): VCTFloat) } (vsum(vrange(i, i), xs): VCTFloat) == zero())
  }
  
  axiom zero_vsum_i_r {
    (forall xs: VectorExpression[Int], i: Int :: { (vsum(vrange(i, i), xs): Int) } (vsum(vrange(i, i), xs): Int) == 0)
  }
  
  axiom vsize_axiom {
    (forall xs: Seq[T] :: { (vsize((vseq(xs): VectorExpression[T])): Int) } (vsize((vseq(xs): VectorExpression[T])): Int) == |xs|)
  }
  
  axiom vsize_axiom_2 {
    (forall t: T :: { (vsize((vrep(t): VectorExpression[T])): Int) } (vsize((vrep(t): VectorExpression[T])): Int) == 1)
  }
  
  axiom extend_vsum_r {
    (forall xs: VectorExpression[T], i: Int, j: Int :: { (vsum(vrange(i, j), xs): T) } i >= 0 && j > i ==> (vsum(vrange(i, j), xs): T) == (vadd((vsum(vrange(i, j - 1), xs): T), (vget(xs, j - 1): T)): T))
  }
  
  axiom extend_vsum_r2 {
    (forall xs: VectorExpression[Int], i: Int, j: Int :: { (vsum(vrange(i, j), xs): Int) } i < 0 || (i >= j || j >= (vsize(xs): Int)) ==> (vsum(vrange(i, j), xs): Int) == 0)
  }
}

domain VCTFloat {
  
  function zero(): VCTFloat
  
  function ffromint(i: Int): VCTFloat
  
  function fadd(f1: VCTFloat, f2: VCTFloat): VCTFloat
  
  axiom commutative_add {
    (forall f1: VCTFloat, f2: VCTFloat :: { fadd(f1, f2) } fadd(f1, f2) == fadd(f2, f1))
  }
  
  axiom zero_int {
    ffromint(0) == zero()
  }
  
  axiom zero_add {
    (forall f1: VCTFloat :: { fadd(f1, zero()) } fadd(f1, zero()) == f1)
  }
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


method SumSeqOfInts___contract_unsatisfiable__main_EncodedGlobalVariables_Sequence$Integer$(diz: Ref, globals: Ref, ys: Seq[Int])
  requires diz != null
{
  inhale true && 10 < |ys|
  // assert
  assert false
  inhale false
}

method SumSeqOfInts_main_EncodedGlobalVariables_Sequence$Integer$(diz: Ref, globals: Ref, ys: Seq[Int])
  requires diz != null
  requires 10 < |ys|
{
  var xs__1: Seq[Int]
  var __flatten_1__2: Seq[Int]
  // assert
  assert (vsum(vrange(1, 4), (vseq(ys): VectorExpression[Int])): Int) == ys[1] + ys[2] + ys[3]
  __flatten_1__2 := Seq(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
  xs__1 := __flatten_1__2
  // assert
  assert (vsum(vrange(0, |xs__1|), (vseq(xs__1): VectorExpression[Int])): Int) == 55
  // assert
  assert (vsum(vrange(4, 6), (vseq(xs__1): VectorExpression[Int])): Int) == 11
}