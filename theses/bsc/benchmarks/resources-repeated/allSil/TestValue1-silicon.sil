// Generated on 2021-03-23 at 23:40:52
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_Test(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Test_directSuperclass {
    directSuperclass(class_Test()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

//  a field 
field Test_next: Ref

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method Test_main1_EncodedGlobalVariables_Test_Test(diz: Ref, globals: Ref, t1: Ref, t2: Ref)
  requires diz != null
  requires acc(t1.Test_next, wildcard)
  requires acc(t2.Test_next, wildcard)
  requires t1.Test_next != null
  requires t2.Test_next != null
{
  inhale false
}

method Test___contract_unsatisfiable__internal_main1_EncodedGlobalVariables_Test_Test(diz: Ref, globals: Ref, t1: Ref, t2: Ref)
  requires diz != null
{
  inhale true && (acc(t1.Test_next, wildcard) && acc(t2.Test_next, wildcard) && t1.Test_next != null && t2.Test_next != null)
  // assert
  assert false
  inhale false
}

method Test_internal_main1_EncodedGlobalVariables_Test_Test(diz: Ref, globals: Ref, t1: Ref, t2: Ref)
  requires diz != null
  requires acc(t1.Test_next, wildcard)
  requires acc(t2.Test_next, wildcard)
  requires t1.Test_next != null
  requires t2.Test_next != null
{
  if (t1 == t2) {
    // assert
    assert false
  }
}