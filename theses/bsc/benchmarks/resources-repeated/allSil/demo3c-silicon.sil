// Generated on 2021-03-23 at 23:44:03
domain TYPE {
  
  unique function class_Worker(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_Main(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Worker_directSuperclass {
    directSuperclass(class_Worker()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Main_directSuperclass {
    directSuperclass(class_Main()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field Worker_main: Ref

//  a field 
field Worker_val: Int

//  a field 
field Main_sum: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


predicate Worker_joinToken_EncodedGlobalVariables(diz: Ref, globals: Ref) 

predicate Worker_idleToken_EncodedGlobalVariables(diz: Ref, globals: Ref) 

predicate Main_lock_held_EncodedGlobalVariables(diz: Ref, globals: Ref) 

predicate Main_lock_invariant_EncodedGlobalVariables(diz: Ref, globals: Ref) {
  diz != null && acc(diz.Main_sum, write)
}

method Worker___contract_unsatisfiable__Worker_EncodedGlobalVariables_Main_Integer(diz: Ref, globals: Ref, m: Ref, v: Int)
  requires diz != null
{
  inhale true && m != null
  // assert
  assert false
  inhale false
}

method Worker_Worker_EncodedGlobalVariables_Main_Integer(globals: Ref, m: Ref, v: Int) returns (sys__result: Ref)
  requires m != null
  ensures sys__result != null
  ensures type_of(sys__result) == class_Worker()
  ensures acc(Worker_idleToken_EncodedGlobalVariables(sys__result, globals), write)
  ensures acc(sys__result.Worker_main, write)
  ensures sys__result.Worker_main != null
  ensures sys__result.Worker_main == m
  ensures acc(sys__result.Worker_val, write)
  ensures sys__result.Worker_val == v
{
  var diz__1: Ref
  diz__1 := new(Worker_main, Worker_val)
  inhale type_of(diz__1) == class_Worker()
  diz__1.Worker_main := m
  diz__1.Worker_val := v
  inhale acc(Worker_idleToken_EncodedGlobalVariables(diz__1, globals), write)
  sys__result := diz__1
  // assert
  assert sys__result != null && type_of(sys__result) == class_Worker() && acc(Worker_idleToken_EncodedGlobalVariables(sys__result, globals), write) && acc(sys__result.Worker_main, write) && sys__result.Worker_main != null && sys__result.Worker_main == m && acc(sys__result.Worker_val, write) && sys__result.Worker_val == v
  inhale false
}

method Worker_forkOperator_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.Worker_main, 1 / 2)
  requires diz.Worker_main != null
  requires acc(diz.Worker_val, 1 / 2)
  requires acc(Worker_idleToken_EncodedGlobalVariables(diz, globals), write)
  ensures acc(Worker_joinToken_EncodedGlobalVariables(diz, globals), write)
{
  inhale false
}

method Worker_joinOperator_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(Worker_joinToken_EncodedGlobalVariables(diz, globals), write)
  ensures acc(Worker_idleToken_EncodedGlobalVariables(diz, globals), write)
  ensures acc(diz.Worker_main, 1 / 2)
  ensures diz.Worker_main != null
  ensures acc(diz.Worker_val, 1 / 2)
{
  inhale false
}

method Worker___contract_unsatisfiable__run_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && (acc(diz.Worker_main, 1 / 2) && diz.Worker_main != null && acc(diz.Worker_val, 1 / 2))
  // assert
  assert false
  inhale false
}

method Worker_run_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.Worker_main, 1 / 2)
  requires diz.Worker_main != null
  requires acc(diz.Worker_val, 1 / 2)
  ensures acc(diz.Worker_main, 1 / 2)
  ensures diz.Worker_main != null
  ensures acc(diz.Worker_val, 1 / 2)
{
  var __flatten_1__2: Ref
  var __flatten_2__3: Int
  var __flatten_3__4: Ref
  inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Worker_main, globals), write)
  unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Worker_main, globals), write)
  inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Worker_main, globals), write)
  __flatten_1__2 := diz.Worker_main
  __flatten_3__4 := diz.Worker_main
  __flatten_2__3 := __flatten_3__4.Main_sum + diz.Worker_val
  __flatten_1__2.Main_sum := __flatten_2__3
  exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Worker_main, globals), write)
  fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Worker_main, globals), write)
  exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Worker_main, globals), write)
}

method Main___contract_unsatisfiable__Main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Main_Main_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Main()
{
  var diz__5: Ref
  diz__5 := new(Main_sum)
  inhale type_of(diz__5) == class_Main()
  fold acc(Main_lock_invariant_EncodedGlobalVariables(diz__5, globals), write)
  exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz__5, globals), write)
  sys__result := diz__5
  // assert
  assert sys__result != null && type_of(sys__result) == class_Main()
  inhale false
}

method Main___contract_unsatisfiable__sum_EncodedGlobalVariables_Sequence$Integer$(diz: Ref, globals: Ref, xs: Seq[Int])
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Main_sum_EncodedGlobalVariables_Sequence$Integer$(diz: Ref, globals: Ref, xs: Seq[Int])
  requires diz != null
{
  var w__6: Ref
  if (0 < |xs|) {
    w__6 := Worker_Worker_EncodedGlobalVariables_Main_Integer(globals, diz, xs[0])
    Worker_forkOperator_EncodedGlobalVariables(w__6, globals)
    Main_sum_EncodedGlobalVariables_Sequence$Integer$(diz, globals, xs[1..])
    Worker_joinOperator_EncodedGlobalVariables(w__6, globals)
  }
}