// Generated on 2021-03-23 at 23:34:57
domain TYPE {
  
  unique function class_Main(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_Counter(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Main_directSuperclass {
    directSuperclass(class_Main()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Counter_directSuperclass {
    directSuperclass(class_Counter()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field Counter_x: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


method Main___contract_unsatisfiable__main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Main_main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var c__1: Ref
  c__1 := Counter_Counter_EncodedGlobalVariables(globals)
  c__1.Counter_x := 16
  Counter_incr_EncodedGlobalVariables(c__1, globals)
  // assert
  assert c__1.Counter_x == 17
  Counter_incr_EncodedGlobalVariables(c__1, globals)
  // assert
  assert c__1.Counter_x == 17
}

method Main___contract_unsatisfiable__Main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Main_Main_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Main()
{
  var diz__2: Ref
  diz__2 := new()
  inhale type_of(diz__2) == class_Main()
  sys__result := diz__2
  // assert
  assert sys__result != null && type_of(sys__result) == class_Main()
  inhale false
}

method Counter___contract_unsatisfiable__incr_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && acc(diz.Counter_x, write)
  // assert
  assert false
  inhale false
}

method Counter_incr_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.Counter_x, write)
  ensures acc(diz.Counter_x, write)
  ensures diz.Counter_x == old(diz.Counter_x) + 1
{
  var __flatten_4__3: Int
  __flatten_4__3 := diz.Counter_x + 1
  diz.Counter_x := __flatten_4__3
}

method Counter___contract_unsatisfiable__Counter_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Counter_Counter_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Counter()
  ensures acc(sys__result.Counter_x, write) && sys__result.Counter_x == 0
{
  var diz__4: Ref
  diz__4 := new(Counter_x)
  inhale type_of(diz__4) == class_Counter()
  diz__4.Counter_x := 0
  sys__result := diz__4
  // assert
  assert sys__result != null && type_of(sys__result) == class_Counter() && (acc(sys__result.Counter_x, write) && sys__result.Counter_x == 0)
  inhale false
}