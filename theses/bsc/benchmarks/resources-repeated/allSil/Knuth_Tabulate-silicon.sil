// Generated on 2021-03-23 at 23:33:49
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_MyClass(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom MyClass_directSuperclass {
    directSuperclass(class_MyClass()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field MyClass_i: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method MyClass_read_char_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Int)
  requires diz != null
  requires acc(diz.MyClass_i, write)
  ensures acc(diz.MyClass_i, write)
  ensures diz.MyClass_i == old(diz.MyClass_i) + 1
{
  inhale false
}

method MyClass_write_char_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, c: Int)
  requires diz != null
{
  inhale false
}

method MyClass_return_the_carriage_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method MyClass_tabulate_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method MyClass___contract_unsatisfiable__foo_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && acc(diz.MyClass_i, write)
  // assert
  assert false
  inhale false
}

method MyClass_foo_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.MyClass_i, write)
  ensures acc(diz.MyClass_i, write)
{
  var old_i__1: Int
  var SLASH__2: Int
  var DOT__3: Int
  var x__4: Int
  var saw_slash__5: Bool
  old_i__1 := diz.MyClass_i
  SLASH__2 := 900
  DOT__3 := 100
  x__4 := MyClass_read_char_EncodedGlobalVariables(diz, globals)
  // assert
  assert old_i__1 + 1 == diz.MyClass_i
  saw_slash__5 := false
  if (x__4 == SLASH__2) {
    saw_slash__5 := true
    x__4 := MyClass_read_char_EncodedGlobalVariables(diz, globals)
    if (x__4 == SLASH__2) {
      MyClass_return_the_carriage_EncodedGlobalVariables(diz, globals)
      goto __break_char_processed
    } else {
      MyClass_tabulate_EncodedGlobalVariables(diz, globals)
    }
  }
  MyClass_write_char_EncodedGlobalVariables_Integer(diz, globals, x__4)
  if (x__4 == DOT__3) {
    MyClass_write_char_EncodedGlobalVariables_Integer(diz, globals, DOT__3)
  }
  label __break_char_processed
  // assert
  assert (saw_slash__5 ? old_i__1 + 2 == diz.MyClass_i : old_i__1 + 1 == diz.MyClass_i)
}