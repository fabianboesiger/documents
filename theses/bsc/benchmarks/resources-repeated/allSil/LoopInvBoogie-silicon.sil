// Generated on 2021-03-23 at 23:34:41
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_LoopInv(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom LoopInv_directSuperclass {
    directSuperclass(class_LoopInv()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method LoopInv___contract_unsatisfiable__f_ok_EncodedGlobalVariables_Integer(globals: Ref, n: Int) returns (sys__result: Int)
{
  inhale true && 0 < n
  // assert
  assert false
  inhale false
}

method LoopInv_f_ok_EncodedGlobalVariables_Integer(globals: Ref, n: Int) returns (sys__result: Int)
  requires 0 < n
  ensures sys__result == n * n
{
  var res__1: Int
  var i__2: Int
  res__1 := 0
  i__2 := 0
  while (i__2 < n)
    invariant res__1 == i__2 * n
    invariant i__2 <= n 
  {
    res__1 := res__1 + n
    i__2 := i__2 + 1
  }
  sys__result := res__1
  // assert
  assert sys__result == n * n
  inhale false
}

method LoopInv___contract_unsatisfiable__f_bad_EncodedGlobalVariables_Integer(globals: Ref, n: Int) returns (sys__result: Int)
{
  inhale true && 0 < n
  // assert
  assert false
  inhale false
}

method LoopInv_f_bad_EncodedGlobalVariables_Integer(globals: Ref, n: Int) returns (sys__result: Int)
  requires 0 < n
  ensures sys__result == n * n
{
  var res__3: Int
  var i__4: Int
  res__3 := 0
  i__4 := 0
  while (i__4 < n)
    invariant res__3 == i__4 * n
    invariant i__4 < n 
  {
    res__3 := res__3 + n
    i__4 := i__4 + 1
  }
  sys__result := res__3
  // assert
  assert sys__result == n * n
  inhale false
}