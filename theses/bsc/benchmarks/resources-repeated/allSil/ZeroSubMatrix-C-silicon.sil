// Generated on 2021-03-23 at 23:43:12
domain TYPE {
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

domain VCTArray[CT] {
  
  function loc(a: VCTArray[CT], i: Int): CT
  
  function alen(a: VCTArray[CT]): Int
  
  function second(r: CT): Int
  
  axiom good_name_here {
    (forall a: VCTArray[CT], i: Int :: { (loc(a, i): CT) } (second((loc(a, i): CT)): Int) == (second((loc(a, 0): CT)): Int) + i)
  }
  
  axiom second_injectivity {
    (forall a: VCTArray[CT], b: VCTArray[CT], i: Int, j: Int :: { (loc(a, i): CT),(loc(b, j): CT) } (second((loc(a, i): CT)): Int) == (second((loc(b, j): CT)): Int) ==> (loc(a, i): CT) == (loc(b, j): CT))
  }
  
  axiom len_nonneg {
    (forall a: VCTArray[CT] :: { (alen(a): Int) } (alen(a): Int) >= 0)
  }
}

domain VCTOption[T] {
  
  function VCTNone(): VCTOption[T]
  
  function VCTSome(t: T): VCTOption[T]
  
  function getVCTOption(o: VCTOption[T]): T
  
  axiom not_equal_vct {
    (forall x: T :: { (VCTSome(x): VCTOption[T]) } (VCTNone(): VCTOption[T]) != (VCTSome(x): VCTOption[T]))
  }
  
  axiom get_axiom_vct {
    (forall x: T :: { (getVCTOption((VCTSome(x): VCTOption[T])): T) } (getVCTOption((VCTSome(x): VCTOption[T])): T) == x)
  }
  
  axiom get_axiom_vct_2 {
    (forall x: VCTOption[T] :: { (VCTSome((getVCTOption(x): T)): VCTOption[T]) } (VCTSome((getVCTOption(x): T)): VCTOption[T]) == x)
  }
}

//  a field 
field VCTArray_Ref___item: VCTArray[Ref]

//  a field 
field Integer__item: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


function getVCTOption1(x: VCTOption[VCTArray[Ref]]): VCTArray[Ref]
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
{
  (getVCTOption(x): VCTArray[Ref])
}

method __contract_unsatisfiable__zero_EncodedGlobalVariables_Integer_Integer_Integer_Option$Array$Cell$Array$Cell$Integer$$$$$(globals: Ref, M: Int, N: Int, step: Int, matrix: VCTOption[VCTArray[Ref]])
{
  inhale matrix != (VCTNone(): VCTOption[VCTArray[Ref]]) && M <= (alen(getVCTOption1(matrix)): Int) && (forall __i__1: Int :: { (loc(getVCTOption1(matrix), __i__1): Ref).VCTArray_Ref___item } 0 <= __i__1 && __i__1 < M ==> acc((loc(getVCTOption1(matrix), __i__1): Ref).VCTArray_Ref___item, write)) && (forall i__2: Int, j__3: Int :: { (loc((loc(getVCTOption1(matrix), i__2): Ref).VCTArray_Ref___item, j__3): Ref) } 0 <= i__2 && i__2 < M && (0 <= j__3 && j__3 < N) ==> acc((loc((loc(getVCTOption1(matrix), i__2): Ref).VCTArray_Ref___item, j__3): Ref).Integer__item, write)) && (0 < M && 0 < N && N <= step) && true
  // assert
  assert false
  inhale false
}

method zero_EncodedGlobalVariables_Integer_Integer_Integer_Option$Array$Cell$Array$Cell$Integer$$$$$(globals: Ref, M: Int, N: Int, step: Int, matrix: VCTOption[VCTArray[Ref]])
  requires matrix != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires M <= (alen(getVCTOption1(matrix)): Int)
  requires (forall __i: Int :: { (loc(getVCTOption1(matrix), __i): Ref).VCTArray_Ref___item } 0 <= __i && __i < M ==> acc((loc(getVCTOption1(matrix), __i): Ref).VCTArray_Ref___item, write))
  requires (forall i: Int, j: Int :: { (loc((loc(getVCTOption1(matrix), i): Ref).VCTArray_Ref___item, j): Ref) } 0 <= i && i < M && (0 <= j && j < N) ==> acc((loc((loc(getVCTOption1(matrix), i): Ref).VCTArray_Ref___item, j): Ref).Integer__item, write))
  requires 0 < M && 0 < N && N <= step
  ensures matrix != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures M <= (alen(getVCTOption1(matrix)): Int)
  ensures (forall __i: Int :: { (loc(getVCTOption1(matrix), __i): Ref).VCTArray_Ref___item } 0 <= __i && __i < M ==> acc((loc(getVCTOption1(matrix), __i): Ref).VCTArray_Ref___item, write))
  ensures (forall i: Int, j: Int :: { (loc((loc(getVCTOption1(matrix), i): Ref).VCTArray_Ref___item, j): Ref) } 0 <= i && i < M && (0 <= j && j < N) ==> acc((loc((loc(getVCTOption1(matrix), i): Ref).VCTArray_Ref___item, j): Ref).Integer__item, write))
  ensures 0 < M && 0 < N && N <= step
  ensures (forall i: Int, j: Int :: { (loc((loc(getVCTOption1(matrix), i): Ref).VCTArray_Ref___item, j): Ref) } 0 <= i && i < M && (0 <= j && j < N) ==> (loc((loc(getVCTOption1(matrix), i): Ref).VCTArray_Ref___item, j): Ref).Integer__item == 0)
{
  var j__14: Int
  var i__4: Int
  var __flatten_1__5: Ref
  var __flatten_2__6: Ref
  var __flatten_3__7: Int
  var __flatten_4__8: Int
  i__4 := 0
  while (i__4 < M)
    invariant matrix != (VCTNone(): VCTOption[VCTArray[Ref]])
    invariant M <= (alen(getVCTOption1(matrix)): Int)
    invariant (forall __i__9: Int :: { (loc(getVCTOption1(matrix), __i__9): Ref).VCTArray_Ref___item } 0 <= __i__9 && __i__9 < M ==> acc((loc(getVCTOption1(matrix), __i__9): Ref).VCTArray_Ref___item, write))
    invariant (forall i__10: Int, j__11: Int :: { (loc((loc(getVCTOption1(matrix), i__10): Ref).VCTArray_Ref___item, j__11): Ref) } 0 <= i__10 && i__10 < M && (0 <= j__11 && j__11 < N) ==> acc((loc((loc(getVCTOption1(matrix), i__10): Ref).VCTArray_Ref___item, j__11): Ref).Integer__item, write))
    invariant 0 < M && 0 < N && N <= step
    invariant 0 <= i__4 && i__4 <= M
    invariant (forall i2__12: Int, j__13: Int :: { (loc((loc(getVCTOption1(matrix), i2__12): Ref).VCTArray_Ref___item, j__13): Ref) } 0 <= i2__12 && i2__12 < i__4 && (0 <= j__13 && j__13 < N) ==> (loc((loc(getVCTOption1(matrix), i2__12): Ref).VCTArray_Ref___item, j__13): Ref).Integer__item == 0) 
  {
    j__14 := 0
    while (j__14 < N)
      invariant matrix != (VCTNone(): VCTOption[VCTArray[Ref]])
      invariant M <= (alen(getVCTOption1(matrix)): Int)
      invariant (forall __i__15: Int :: { (loc(getVCTOption1(matrix), __i__15): Ref).VCTArray_Ref___item } 0 <= __i__15 && __i__15 < M ==> acc((loc(getVCTOption1(matrix), __i__15): Ref).VCTArray_Ref___item, write))
      invariant (forall i__16: Int, j__17: Int :: { (loc((loc(getVCTOption1(matrix), i__16): Ref).VCTArray_Ref___item, j__17): Ref) } 0 <= i__16 && i__16 < M && (0 <= j__17 && j__17 < N) ==> acc((loc((loc(getVCTOption1(matrix), i__16): Ref).VCTArray_Ref___item, j__17): Ref).Integer__item, write))
      invariant 0 < M && 0 < N && N <= step
      invariant 0 < M && 0 < N && N <= step && 0 <= j__14 && j__14 <= N
      invariant (forall j2__18: Int :: { (loc((loc(getVCTOption1(matrix), i__4): Ref).VCTArray_Ref___item, j2__18): Ref) } 0 <= j2__18 && j2__18 < j__14 ==> (loc((loc(getVCTOption1(matrix), i__4): Ref).VCTArray_Ref___item, j2__18): Ref).Integer__item == 0)
      invariant (forall i2__19: Int, j__20: Int :: { (loc((loc(getVCTOption1(matrix), i2__19): Ref).VCTArray_Ref___item, j__20): Ref) } 0 <= i2__19 && i2__19 < i__4 && (0 <= j__20 && j__20 < N) ==> (loc((loc(getVCTOption1(matrix), i2__19): Ref).VCTArray_Ref___item, j__20): Ref).Integer__item == 0) 
    {
      __flatten_2__6 := (loc(getVCTOption1(matrix), i__4): Ref)
      __flatten_1__5 := (loc(__flatten_2__6.VCTArray_Ref___item, j__14): Ref)
      __flatten_1__5.Integer__item := 0
      __flatten_3__7 := j__14
      j__14 := j__14 + 1
    }
    __flatten_4__8 := i__4
    i__4 := i__4 + 1
  }
}