// Generated on 2021-03-23 at 23:33:11
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_IntegerList(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom IntegerList_directSuperclass {
    directSuperclass(class_IntegerList()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field IntegerList_val: Int

//  a field 
field IntegerList_next: Ref

//  a field 
field IntegerList_min: Int

function IntegerList_get_min_EncodedGlobalVariables(diz: Ref, globals: Ref): Int
  requires diz != null
  requires acc(IntegerList_state_EncodedGlobalVariables(diz, globals), write)
{
  (unfolding acc(IntegerList_state_EncodedGlobalVariables(diz, globals), write) in diz.IntegerList_min)
}

function IntegerList_check_min_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, i: Int): Bool
  requires diz != null
  requires acc(IntegerList_state_EncodedGlobalVariables(diz, globals), write)
  ensures result ==> IntegerList_get_min_EncodedGlobalVariables(diz, globals) == i
{
  (unfolding acc(IntegerList_state_EncodedGlobalVariables(diz, globals), write) in diz.IntegerList_min == i)
}

function IntegerList_get_val_EncodedGlobalVariables(diz: Ref, globals: Ref): Int
  requires diz != null
  requires acc(IntegerList_state_EncodedGlobalVariables(diz, globals), write)
{
  (unfolding acc(IntegerList_state_EncodedGlobalVariables(diz, globals), write) in diz.IntegerList_val)
}

function IntegerList_get_next_EncodedGlobalVariables(diz: Ref, globals: Ref): Ref
  requires diz != null
  requires acc(IntegerList_state_EncodedGlobalVariables(diz, globals), write)
{
  (unfolding acc(IntegerList_state_EncodedGlobalVariables(diz, globals), write) in diz.IntegerList_next)
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


predicate IntegerList_state_EncodedGlobalVariables(diz: Ref, globals: Ref) {
  diz != null && (acc(diz.IntegerList_val, write) && acc(diz.IntegerList_min, write) && acc(diz.IntegerList_next, write) && (diz.IntegerList_next != null ==> acc(IntegerList_state_EncodedGlobalVariables(diz.IntegerList_next, globals), write)) && (diz.IntegerList_next != null ==> IntegerList_check_min_EncodedGlobalVariables_Integer(diz.IntegerList_next, globals, diz.IntegerList_min)))
}

method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method IntegerList___contract_unsatisfiable__cons_EncodedGlobalVariables_Integer_IntegerList(globals: Ref, val: Int, next: Ref) returns (sys__result: Ref)
{
  inhale true && (next != null && acc(IntegerList_state_EncodedGlobalVariables(next, globals), write) && IntegerList_get_min_EncodedGlobalVariables(next, globals) <= val)
  // assert
  assert false
  inhale false
}

method IntegerList_cons_EncodedGlobalVariables_Integer_IntegerList(globals: Ref, val: Int, next: Ref) returns (sys__result: Ref)
  requires next != null
  requires acc(IntegerList_state_EncodedGlobalVariables(next, globals), write)
  requires IntegerList_get_min_EncodedGlobalVariables(next, globals) <= val
  ensures sys__result != null
  ensures acc(IntegerList_state_EncodedGlobalVariables(sys__result, globals), write)
  ensures IntegerList_check_min_EncodedGlobalVariables_Integer(sys__result, globals, old(IntegerList_get_min_EncodedGlobalVariables(next, globals)))
{
  var tmp__1: Int
  var res__2: Ref
  unfold acc(IntegerList_state_EncodedGlobalVariables(next, globals), write)
  tmp__1 := next.IntegerList_min
  fold acc(IntegerList_state_EncodedGlobalVariables(next, globals), write)
  res__2 := IntegerList_IntegerList_EncodedGlobalVariables_Integer_IntegerList_Integer(globals, val, next, tmp__1)
  sys__result := res__2
  // assert
  assert sys__result != null && acc(IntegerList_state_EncodedGlobalVariables(sys__result, globals), write) && IntegerList_check_min_EncodedGlobalVariables_Integer(sys__result, globals, old(IntegerList_get_min_EncodedGlobalVariables(next, globals)))
  inhale false
}

method IntegerList___contract_unsatisfiable__single_EncodedGlobalVariables_Integer_Integer(globals: Ref, val: Int, mmin: Int) returns (sys__result: Ref)
{
  inhale true && mmin <= val
  // assert
  assert false
  inhale false
}

method IntegerList_single_EncodedGlobalVariables_Integer_Integer(globals: Ref, val: Int, mmin: Int) returns (sys__result: Ref)
  requires mmin <= val
  ensures sys__result != null
  ensures acc(IntegerList_state_EncodedGlobalVariables(sys__result, globals), write)
  ensures IntegerList_check_min_EncodedGlobalVariables_Integer(sys__result, globals, mmin)
{
  var res__3: Ref
  res__3 := IntegerList_IntegerList_EncodedGlobalVariables_Integer_IntegerList_Integer(globals, val, null, mmin)
  sys__result := res__3
  // assert
  assert sys__result != null && acc(IntegerList_state_EncodedGlobalVariables(sys__result, globals), write) && IntegerList_check_min_EncodedGlobalVariables_Integer(sys__result, globals, mmin)
  inhale false
}

method IntegerList___contract_unsatisfiable__main_EncodedGlobalVariables(globals: Ref)
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method IntegerList_main_EncodedGlobalVariables(globals: Ref)
{
  var list__4: Ref
  list__4 := IntegerList_single_EncodedGlobalVariables_Integer_Integer(globals, 3, 1)
  list__4 := IntegerList_cons_EncodedGlobalVariables_Integer_IntegerList(globals, 2, list__4)
  list__4 := IntegerList_cons_EncodedGlobalVariables_Integer_IntegerList(globals, 1, list__4)
  list__4 := IntegerList_cons_EncodedGlobalVariables_Integer_IntegerList(globals, 0, list__4)
}

method IntegerList_IntegerList_EncodedGlobalVariables_Integer_IntegerList_Integer(globals: Ref, val: Int, next: Ref, mmin: Int) returns (sys__result: Ref)
  requires mmin <= val
  requires next != null ==> acc(IntegerList_state_EncodedGlobalVariables(next, globals), write)
  requires next != null ==> IntegerList_check_min_EncodedGlobalVariables_Integer(next, globals, mmin)
  ensures sys__result != null
  ensures type_of(sys__result) == class_IntegerList()
  ensures acc(IntegerList_state_EncodedGlobalVariables(sys__result, globals), write)
  ensures IntegerList_check_min_EncodedGlobalVariables_Integer(sys__result, globals, mmin)
{
  inhale false
}

method IntegerList___contract_unsatisfiable__internal_IntegerList_EncodedGlobalVariables_Integer_IntegerList_Integer(diz: Ref, globals: Ref, val: Int, next: Ref, mmin: Int)
  requires diz != null
{
  inhale true && (mmin <= val && (next != null ==> acc(IntegerList_state_EncodedGlobalVariables(next, globals), write)) && (next != null ==> IntegerList_check_min_EncodedGlobalVariables_Integer(next, globals, mmin)))
  // assert
  assert false
  inhale false
}

method IntegerList_internal_IntegerList_EncodedGlobalVariables_Integer_IntegerList_Integer(globals: Ref, val: Int, next: Ref, mmin: Int) returns (sys__result: Ref)
  requires mmin <= val
  requires next != null ==> acc(IntegerList_state_EncodedGlobalVariables(next, globals), write)
  requires next != null ==> IntegerList_check_min_EncodedGlobalVariables_Integer(next, globals, mmin)
  ensures sys__result != null
  ensures type_of(sys__result) == class_IntegerList()
  ensures acc(IntegerList_state_EncodedGlobalVariables(sys__result, globals), write)
  ensures IntegerList_check_min_EncodedGlobalVariables_Integer(sys__result, globals, mmin)
{
  var diz__5: Ref
  diz__5 := new(IntegerList_val, IntegerList_next, IntegerList_min)
  inhale type_of(diz__5) == class_IntegerList()
  diz__5.IntegerList_val := val
  diz__5.IntegerList_next := next
  diz__5.IntegerList_min := mmin
  fold acc(IntegerList_state_EncodedGlobalVariables(diz__5, globals), write)
  sys__result := diz__5
  // assert
  assert sys__result != null && type_of(sys__result) == class_IntegerList() && acc(IntegerList_state_EncodedGlobalVariables(sys__result, globals), write) && IntegerList_check_min_EncodedGlobalVariables_Integer(sys__result, globals, mmin)
  inhale false
}