// Generated on 2021-03-23 at 23:44:44
domain TYPE {
  
  unique function class_Ref(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Ref_directSuperclass {
    directSuperclass(class_Ref()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

domain VCTArray[CT] {
  
  function loc(a: VCTArray[CT], i: Int): CT
  
  function alen(a: VCTArray[CT]): Int
  
  function first(r: CT): VCTArray[CT]
  
  function second(r: CT): Int
  
  axiom all_diff {
    (forall a: VCTArray[CT], i: Int :: { (loc(a, i): CT) } (first((loc(a, i): CT)): VCTArray[CT]) == a && (second((loc(a, i): CT)): Int) == i)
  }
  
  axiom len_nonneg {
    (forall a: VCTArray[CT] :: { (alen(a): Int) } (alen(a): Int) >= 0)
  }
}

domain VCTOption[T] {
  
  function VCTNone(): VCTOption[T]
  
  function VCTSome(t: T): VCTOption[T]
  
  function getVCTOption(o: VCTOption[T]): T
  
  function getVCTOptionOrElse(o: VCTOption[T], default: T): T
  
  axiom not_equal_vct {
    (forall x: T :: { (VCTSome(x): VCTOption[T]) } (VCTNone(): VCTOption[T]) != (VCTSome(x): VCTOption[T]))
  }
  
  axiom get_axiom_vct {
    (forall x: T :: { (getVCTOption((VCTSome(x): VCTOption[T])): T) } (getVCTOption((VCTSome(x): VCTOption[T])): T) == x)
  }
  
  axiom get_axiom_vct_2 {
    (forall x: VCTOption[T] :: { (VCTSome((getVCTOption(x): T)): VCTOption[T]) } (VCTSome((getVCTOption(x): T)): VCTOption[T]) == x)
  }
  
  axiom get_or_else_axiom_1 {
    (forall val: T, default: T :: { (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) == val)
  }
  
  axiom get_or_else_axiom_2 {
    (forall default: T :: { (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) == default)
  }
}

//  a field 
field Integer__item: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


function getVCTOption1(x: VCTOption[VCTArray[Ref]]): VCTArray[Ref]
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
{
  (getVCTOption(x): VCTArray[Ref])
}

method Ref___contract_unsatisfiable__main_EncodedGlobalVariables_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, globals: Ref, tcount: Int, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]])
  requires diz != null
{
  inhale a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]]) && 0 <= tcount && ((alen(getVCTOption1(a)): Int) == tcount && (alen(getVCTOption1(b)): Int) == tcount && (alen(getVCTOption1(c)): Int) == tcount) && ((forall i__1: Int :: { (loc(getVCTOption1(b), i__1): Ref) } 0 <= i__1 && i__1 < tcount ==> acc((loc(getVCTOption1(b), i__1): Ref).Integer__item, wildcard)) && (forall i__2: Int :: { (loc(getVCTOption1(c), i__2): Ref) } 0 <= i__2 && i__2 < tcount ==> acc((loc(getVCTOption1(c), i__2): Ref).Integer__item, write)) && (forall i__3: Int :: { (loc(getVCTOption1(a), i__3): Ref) } 0 <= i__3 && i__3 < tcount ==> acc((loc(getVCTOption1(a), i__3): Ref).Integer__item, write)) && (forall i__4: Int :: { (loc(getVCTOption1(b), i__4): Ref) } 0 <= i__4 && i__4 < tcount ==> (loc(getVCTOption1(b), i__4): Ref).Integer__item == i__4))
  // assert
  assert false
  inhale false
}

method Ref_barrier_check_2_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], tcount: Int)
  requires diz != null
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 <= tcount
  requires (alen(getVCTOption1(a)): Int) == tcount && (alen(getVCTOption1(b)): Int) == tcount && (alen(getVCTOption1(c)): Int) == tcount
  requires 0 < |[0..tcount)|
  requires (forall tid: Int :: { (loc(getVCTOption1(a), tid): Ref) } 0 <= tid && tid < (tcount - 1 < tcount ? tcount - 1 : tcount) ==> acc((loc(getVCTOption1(a), tid): Ref).Integer__item, 1 / 2))
  requires (forall tid: Int :: { (loc(getVCTOption1(a), tid): Ref) } 0 <= tid && tid < (tcount - 1 < tcount ? tcount - 1 : tcount) ==> (loc(getVCTOption1(a), tid): Ref).Integer__item == tid + 1)
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures 0 <= tcount
  ensures (alen(getVCTOption1(a)): Int) == tcount && (alen(getVCTOption1(b)): Int) == tcount && (alen(getVCTOption1(c)): Int) == tcount
  ensures 0 < |[0..tcount)|
  ensures (forall k_fresh_rw_0: Int :: { (loc(getVCTOption1(a), k_fresh_rw_0): Ref) } 0 <= k_fresh_rw_0 + 1 && k_fresh_rw_0 + 1 < tcount && 0 < k_fresh_rw_0 + 1 ==> acc((loc(getVCTOption1(a), k_fresh_rw_0): Ref).Integer__item, 1 / 2))
  ensures (forall tid: Int :: 0 <= tid && tid < tcount && 0 < tid ==> (loc(getVCTOption1(a), tid - 1): Ref).Integer__item == tid)
{
  inhale false
}

method Ref_barrier_main_2_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer_Integer(diz: Ref, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], tcount: Int, tid: Int)
  requires diz != null
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 <= tcount
  requires (alen(getVCTOption1(a)): Int) == tcount && (alen(getVCTOption1(b)): Int) == tcount && (alen(getVCTOption1(c)): Int) == tcount
  requires 0 <= tid && tid < tcount
  requires tid < tcount - 1 ==> acc((loc(getVCTOption1(a), tid): Ref).Integer__item, 1 / 2)
  requires tid < tcount - 1 ==> (loc(getVCTOption1(a), tid): Ref).Integer__item == tid + 1
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures 0 <= tcount
  ensures (alen(getVCTOption1(a)): Int) == tcount && (alen(getVCTOption1(b)): Int) == tcount && (alen(getVCTOption1(c)): Int) == tcount
  ensures 0 <= tid && tid < tcount
  ensures 0 < tid ==> acc((loc(getVCTOption1(a), tid - 1): Ref).Integer__item, 1 / 2)
  ensures 0 < tid ==> (loc(getVCTOption1(a), tid - 1): Ref).Integer__item == tid
{
  inhale false
}

method Ref_loop_body_4_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, b: VCTOption[VCTArray[Ref]], tid: Int, a: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]], tcount: Int)
  requires diz != null
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 <= tcount
  requires (alen(getVCTOption1(a)): Int) == tcount && (alen(getVCTOption1(b)): Int) == tcount && (alen(getVCTOption1(c)): Int) == tcount
  requires 0 <= tid && tid < tcount
  requires acc((loc(getVCTOption1(b), tid): Ref).Integer__item, wildcard)
  requires acc((loc(getVCTOption1(c), tid): Ref).Integer__item, write)
  requires acc((loc(getVCTOption1(a), tid): Ref).Integer__item, write)
  requires (loc(getVCTOption1(b), tid): Ref).Integer__item == tid
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures 0 <= tcount
  ensures (alen(getVCTOption1(a)): Int) == tcount && (alen(getVCTOption1(b)): Int) == tcount && (alen(getVCTOption1(c)): Int) == tcount
  ensures 0 <= tid && tid < tcount
  ensures acc((loc(getVCTOption1(b), tid): Ref).Integer__item, wildcard)
  ensures acc((loc(getVCTOption1(c), tid): Ref).Integer__item, write)
  ensures acc((loc(getVCTOption1(a), tid): Ref).Integer__item, 1 / 2)
  ensures 0 < tid ==> acc((loc(getVCTOption1(a), tid - 1): Ref).Integer__item, 1 / 2)
  ensures tid == tcount - 1 ==> acc((loc(getVCTOption1(a), tid): Ref).Integer__item, 1 / 2)
  ensures (loc(getVCTOption1(b), tid): Ref).Integer__item == tid
  ensures (loc(getVCTOption1(a), tid): Ref).Integer__item == tid + 1
  ensures 0 < tid ==> (loc(getVCTOption1(c), tid): Ref).Integer__item == tid + 2
{
  var __flatten_1__5: Ref
  var __flatten_2__6: Int
  var __flatten_3__7: Ref
  var __flatten_5__8: Ref
  var __flatten_6__9: Int
  var __flatten_7__10: Ref
  __flatten_1__5 := (loc(getVCTOption1(a), tid): Ref)
  __flatten_3__7 := (loc(getVCTOption1(b), tid): Ref)
  __flatten_2__6 := __flatten_3__7.Integer__item + 1
  __flatten_1__5.Integer__item := __flatten_2__6
  Ref_barrier_main_2_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer_Integer(diz, a, b, c, tcount, tid)
  if (0 < tid) {
    __flatten_5__8 := (loc(getVCTOption1(c), tid): Ref)
    __flatten_7__10 := (loc(getVCTOption1(a), tid - 1): Ref)
    __flatten_6__9 := __flatten_7__10.Integer__item + 2
    __flatten_5__8.Integer__item := __flatten_6__9
  }
}

method Ref_parrallel_region_main_1_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, tcount: Int, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 <= tcount
  requires (alen(getVCTOption1(a)): Int) == tcount && (alen(getVCTOption1(b)): Int) == tcount && (alen(getVCTOption1(c)): Int) == tcount
  requires (forall tid: Int :: { (loc(getVCTOption1(b), tid): Ref) } 0 <= tid && tid < tcount ==> acc((loc(getVCTOption1(b), tid): Ref).Integer__item, wildcard))
  requires (forall tid: Int :: { (loc(getVCTOption1(c), tid): Ref) } 0 <= tid && tid < tcount ==> acc((loc(getVCTOption1(c), tid): Ref).Integer__item, write))
  requires (forall tid: Int :: { (loc(getVCTOption1(a), tid): Ref) } 0 <= tid && tid < tcount ==> acc((loc(getVCTOption1(a), tid): Ref).Integer__item, write))
  requires (forall tid: Int :: { (loc(getVCTOption1(b), tid): Ref) } 0 <= tid && tid < tcount ==> (loc(getVCTOption1(b), tid): Ref).Integer__item == tid)
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures 0 <= tcount
  ensures (alen(getVCTOption1(a)): Int) == tcount && (alen(getVCTOption1(b)): Int) == tcount && (alen(getVCTOption1(c)): Int) == tcount
  ensures (forall tid: Int :: { (loc(getVCTOption1(b), tid): Ref) } 0 <= tid && tid < tcount ==> acc((loc(getVCTOption1(b), tid): Ref).Integer__item, wildcard))
  ensures (forall tid: Int :: { (loc(getVCTOption1(c), tid): Ref) } 0 <= tid && tid < tcount ==> acc((loc(getVCTOption1(c), tid): Ref).Integer__item, write))
  ensures (forall tid: Int :: { (loc(getVCTOption1(a), tid): Ref) } 0 <= tid && tid < tcount ==> acc((loc(getVCTOption1(a), tid): Ref).Integer__item, 1 / 2))
  ensures (forall k_fresh_rw_0: Int :: { (loc(getVCTOption1(a), k_fresh_rw_0): Ref) } 0 <= k_fresh_rw_0 + 1 && k_fresh_rw_0 + 1 < tcount && 0 < k_fresh_rw_0 + 1 ==> acc((loc(getVCTOption1(a), k_fresh_rw_0): Ref).Integer__item, 1 / 2))
  ensures 0 <= tcount - 1 && tcount - 1 < tcount ==> acc((loc(getVCTOption1(a), tcount - 1): Ref).Integer__item, 1 / 2)
  ensures (forall tid: Int :: { (loc(getVCTOption1(b), tid): Ref) } 0 <= tid && tid < tcount ==> (loc(getVCTOption1(b), tid): Ref).Integer__item == tid)
  ensures (forall tid: Int :: { (loc(getVCTOption1(a), tid): Ref) } 0 <= tid && tid < tcount ==> (loc(getVCTOption1(a), tid): Ref).Integer__item == tid + 1)
  ensures (forall tid: Int :: { (loc(getVCTOption1(c), tid): Ref) } 0 <= tid && tid < tcount && 0 < tid ==> (loc(getVCTOption1(c), tid): Ref).Integer__item == tid + 2)
{
  inhale false
}

method Ref_main_EncodedGlobalVariables_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, globals: Ref, tcount: Int, a: VCTOption[VCTArray[Ref]], b: VCTOption[VCTArray[Ref]], c: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 <= tcount
  requires (alen(getVCTOption1(a)): Int) == tcount && (alen(getVCTOption1(b)): Int) == tcount && (alen(getVCTOption1(c)): Int) == tcount
  requires (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < tcount ==> acc((loc(getVCTOption1(b), i): Ref).Integer__item, wildcard))
  requires (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < tcount ==> acc((loc(getVCTOption1(c), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < tcount ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < tcount ==> (loc(getVCTOption1(b), i): Ref).Integer__item == i)
  ensures a != (VCTNone(): VCTOption[VCTArray[Ref]]) && b != (VCTNone(): VCTOption[VCTArray[Ref]]) && c != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures 0 <= tcount
  ensures (alen(getVCTOption1(a)): Int) == tcount && (alen(getVCTOption1(b)): Int) == tcount && (alen(getVCTOption1(c)): Int) == tcount
  ensures (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < tcount ==> acc((loc(getVCTOption1(b), i): Ref).Integer__item, wildcard))
  ensures (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 0 <= i && i < tcount ==> acc((loc(getVCTOption1(c), i): Ref).Integer__item, write))
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < tcount ==> acc((loc(getVCTOption1(a), i): Ref).Integer__item, 1 / 2))
  ensures (forall i: Int :: { (loc(getVCTOption1(b), i): Ref) } 0 <= i && i < tcount ==> (loc(getVCTOption1(b), i): Ref).Integer__item == i)
  ensures (forall i: Int :: { (loc(getVCTOption1(a), i): Ref) } 0 <= i && i < tcount ==> (loc(getVCTOption1(a), i): Ref).Integer__item == i + 1)
  ensures (forall i: Int :: { (loc(getVCTOption1(c), i): Ref) } 1 <= i && i < tcount ==> (loc(getVCTOption1(c), i): Ref).Integer__item == i + 2)
{
  Ref_parrallel_region_main_1_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz, tcount, a, b, c)
}