// Generated on 2021-03-23 at 23:31:04
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class___return_internal_foo_0_ex(): TYPE
  
  unique function class___break_l1_ex(): TYPE
  
  unique function class___return_internal_bar_1_ex(): TYPE
  
  unique function class_C(): TYPE
  
  unique function class_java_DOT_lang_DOT_Throwable(): TYPE
  
  unique function class_java_DOT_lang_DOT_Exception(): TYPE
  
  unique function class_java_DOT_lang_DOT_RuntimeException(): TYPE
  
  unique function class_java_DOT_lang_DOT_IllegalStateException(): TYPE
  
  unique function class_java_DOT_lang_DOT_IllegalArgumentException(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom __return_internal_foo_0_ex_directSuperclass {
    directSuperclass(class___return_internal_foo_0_ex()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom __break_l1_ex_directSuperclass {
    directSuperclass(class___break_l1_ex()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom __return_internal_bar_1_ex_directSuperclass {
    directSuperclass(class___return_internal_bar_1_ex()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom C_directSuperclass {
    directSuperclass(class_C()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom java_DOT_lang_DOT_Throwable_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Throwable()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom java_DOT_lang_DOT_Exception_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Exception()) == class_java_DOT_lang_DOT_Throwable()
  }
  
  axiom java_DOT_lang_DOT_RuntimeException_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_RuntimeException()) == class_java_DOT_lang_DOT_Exception()
  }
  
  axiom java_DOT_lang_DOT_IllegalStateException_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_IllegalStateException()) == class_java_DOT_lang_DOT_RuntimeException()
  }
  
  axiom java_DOT_lang_DOT_IllegalArgumentException_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_IllegalArgumentException()) == class_java_DOT_lang_DOT_RuntimeException()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field __return_internal_foo_0_ex_value: Int

//  a field 
field __return_internal_bar_1_ex_value: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method __return_internal_foo_0_ex___return_internal_foo_0_ex_Integer(returnValue: Int) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class___return_internal_foo_0_ex()
  ensures acc(sys__result.__return_internal_foo_0_ex_value, write)
  ensures sys__result.__return_internal_foo_0_ex_value == returnValue
{
  inhale false
}

method __break_l1_ex___break_l1_ex() returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class___break_l1_ex()
{
  var diz__1: Ref
  diz__1 := new()
  inhale type_of(diz__1) == class___break_l1_ex()
  label method_end___break_l1_ex_0
  sys__result := diz__1
  // assert
  assert sys__result != null && type_of(sys__result) == class___break_l1_ex()
  inhale false
}

method __return_internal_bar_1_ex___return_internal_bar_1_ex_Integer(returnValue: Int) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class___return_internal_bar_1_ex()
  ensures acc(sys__result.__return_internal_bar_1_ex_value, write)
  ensures sys__result.__return_internal_bar_1_ex_value == returnValue
{
  inhale false
}

method C_foo_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, input_i: Int) returns (sys__result: Int)
  requires diz != null
  ensures old(input_i) == 0 ==> sys__result == old(input_i) + 2
  ensures old(input_i) != 0 ==> sys__result == old(input_i) + 3
{
  inhale false
}

method C___contract_unsatisfiable__internal_foo_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, input_i: Int) returns (sys__result: Int)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__internal_foo_1
}

method C_internal_foo_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, input_i: Int) returns (sys__result: Int)
  requires diz != null
  ensures old(input_i) == 0 ==> sys__result == old(input_i) + 2
  ensures old(input_i) != 0 ==> sys__result == old(input_i) + 3
{
  var ucv_1__11: Ref
  var ucv_0__10: Ref
  var e__9: Ref
  var old__sys_exc_12__8: Ref
  var old__sys_exc_8__7: Ref
  var i__6: Int
  var sys__exc__2: Ref
  var __flatten_1__3: Ref
  var __flatten_2__4: Ref
  var old__sys_exc_5__5: Ref
  sys__exc__2 := null
  old__sys_exc_5__5 := sys__exc__2
  i__6 := input_i
  old__sys_exc_8__7 := sys__exc__2
  old__sys_exc_12__8 := sys__exc__2
  if (i__6 == 0) {
    __flatten_1__3 := __break_l1_ex___break_l1_ex()
    sys__exc__2 := __flatten_1__3
    goto catch_9
  }
  i__6 := i__6 + 1
  goto finally_10
  label catch_9
  if (!instanceof_TYPE_TYPE(type_of(sys__exc__2), class_java_DOT_lang_DOT_Exception())) {
    goto finally_10
  }
  inhale e__9 == sys__exc__2
  sys__exc__2 := null
  // assert
  assert false
  // assert
  assert sys__exc__2 == null
  sys__exc__2 := old__sys_exc_12__8
  goto finally_10
  label finally_10
  i__6 := i__6 + 1
  if (sys__exc__2 != old__sys_exc_12__8) {
    goto catch_6
  }
  goto try_end_11
  label try_end_11
  goto try_end_7
  label catch_6
  if (!instanceof_TYPE_TYPE(type_of(sys__exc__2), class___break_l1_ex())) {
    goto catch_3
  }
  inhale ucv_0__10 == sys__exc__2
  sys__exc__2 := null
  // assert
  assert sys__exc__2 == null
  sys__exc__2 := old__sys_exc_8__7
  goto try_end_7
  label try_end_7
  i__6 := i__6 + 1
  __flatten_2__4 := __return_internal_foo_0_ex___return_internal_foo_0_ex_Integer(i__6)
  sys__exc__2 := __flatten_2__4
  goto catch_3
  goto try_end_4
  label catch_3
  if (!instanceof_TYPE_TYPE(type_of(sys__exc__2), class___return_internal_foo_0_ex())) {
    goto method_end_internal_foo_2
  }
  inhale ucv_1__11 == sys__exc__2
  sys__exc__2 := null
  sys__result := ucv_1__11.__return_internal_foo_0_ex_value
  // assert
  assert (old(input_i) == 0 ==> sys__result == old(input_i) + 2) && (old(input_i) != 0 ==> sys__result == old(input_i) + 3)
  inhale false
  // assert
  assert sys__exc__2 == null
  sys__exc__2 := old__sys_exc_5__5
  goto try_end_4
  label try_end_4
  label method_end_internal_foo_2
  // assert
  assert sys__exc__2 == null
}

method C_bar_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Int)
  requires diz != null
  ensures sys__result == 2
{
  inhale false
}

method C___contract_unsatisfiable__internal_bar_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Int)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__internal_bar_13
}

method C_internal_bar_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Int)
  requires diz != null
  ensures sys__result == 2
{
  var ucv_2__22: Ref
  var e1__21: Ref
  var e0__20: Ref
  var old__sys_exc_22__19: Ref
  var i__18: Int
  var e__17: Ref
  var sys__exc__12: Ref
  var __flatten_4__13: Ref
  var __flatten_5__14: Ref
  var __flatten_6__15: Ref
  var old__sys_exc_17__16: Ref
  sys__exc__12 := null
  old__sys_exc_17__16 := sys__exc__12
  e__17 := java_DOT_lang_DOT_IllegalArgumentException_IllegalArgumentException_EncodedGlobalVariables(globals)
  i__18 := 0
  old__sys_exc_22__19 := sys__exc__12
  sys__exc__12 := e__17
  goto catch_18
  goto finally_20
  label catch_18
  if (!instanceof_TYPE_TYPE(type_of(sys__exc__12), class_java_DOT_lang_DOT_IllegalStateException())) {
    goto catch_19
  }
  inhale e0__20 == sys__exc__12
  sys__exc__12 := null
  // assert
  assert false
  __flatten_5__14 := __return_internal_bar_1_ex___return_internal_bar_1_ex_Integer(0)
  sys__exc__12 := __flatten_5__14
  goto finally_20
  // assert
  assert sys__exc__12 == null
  sys__exc__12 := old__sys_exc_22__19
  goto finally_20
  label catch_19
  if (!instanceof_TYPE_TYPE(type_of(sys__exc__12), class_java_DOT_lang_DOT_RuntimeException())) {
    goto finally_20
  }
  inhale e1__21 == sys__exc__12
  sys__exc__12 := null
  i__18 := 10
  __flatten_6__15 := __return_internal_bar_1_ex___return_internal_bar_1_ex_Integer(1)
  sys__exc__12 := __flatten_6__15
  goto finally_20
  // assert
  assert sys__exc__12 == null
  sys__exc__12 := old__sys_exc_22__19
  goto finally_20
  label finally_20
  // assert
  assert i__18 == 10
  __flatten_4__13 := __return_internal_bar_1_ex___return_internal_bar_1_ex_Integer(2)
  sys__exc__12 := __flatten_4__13
  goto catch_15
  if (sys__exc__12 != old__sys_exc_22__19) {
    goto catch_15
  }
  goto try_end_21
  label try_end_21
  goto try_end_16
  label catch_15
  if (!instanceof_TYPE_TYPE(type_of(sys__exc__12), class___return_internal_bar_1_ex())) {
    goto method_end_internal_bar_14
  }
  inhale ucv_2__22 == sys__exc__12
  sys__exc__12 := null
  sys__result := ucv_2__22.__return_internal_bar_1_ex_value
  // assert
  assert sys__result == 2
  inhale false
  // assert
  assert sys__exc__12 == null
  sys__exc__12 := old__sys_exc_17__16
  goto try_end_16
  label try_end_16
  label method_end_internal_bar_14
  // assert
  assert sys__exc__12 == null
}

method java_DOT_lang_DOT_Throwable_Throwable_EncodedGlobalVariables_java_DOT_lang_DOT_Throwable(globals: Ref, arg0: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Throwable()
{
  inhale false
}

method java_DOT_lang_DOT_Throwable_internal_Throwable_EncodedGlobalVariables_java_DOT_lang_DOT_Throwable(globals: Ref, arg0: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Throwable()
{
  inhale false
}

method java_DOT_lang_DOT_Throwable_Throwable_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Throwable()
{
  inhale false
}

method java_DOT_lang_DOT_Throwable_internal_Throwable_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Throwable()
{
  inhale false
}

method java_DOT_lang_DOT_Throwable_printStackTrace_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_Throwable_internal_printStackTrace_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_Throwable_getMessage_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_Throwable_internal_getMessage_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_Exception_Exception_EncodedGlobalVariables_java_DOT_lang_DOT_Throwable(globals: Ref, arg0: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Exception()
{
  inhale false
}

method java_DOT_lang_DOT_Exception_internal_Exception_EncodedGlobalVariables_java_DOT_lang_DOT_Throwable(globals: Ref, arg0: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Exception()
{
  inhale false
}

method java_DOT_lang_DOT_Exception_Exception_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Exception()
{
  inhale false
}

method java_DOT_lang_DOT_Exception_internal_Exception_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Exception()
{
  inhale false
}

method java_DOT_lang_DOT_Exception_printStackTrace_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_Exception_internal_printStackTrace_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_Exception_getMessage_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_Exception_internal_getMessage_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_RuntimeException_RuntimeException_EncodedGlobalVariables_java_DOT_lang_DOT_Throwable(globals: Ref, arg0: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_RuntimeException()
{
  inhale false
}

method java_DOT_lang_DOT_RuntimeException_internal_RuntimeException_EncodedGlobalVariables_java_DOT_lang_DOT_Throwable(globals: Ref, arg0: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_RuntimeException()
{
  inhale false
}

method java_DOT_lang_DOT_RuntimeException_RuntimeException_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_RuntimeException()
{
  inhale false
}

method java_DOT_lang_DOT_RuntimeException_internal_RuntimeException_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_RuntimeException()
{
  inhale false
}

method java_DOT_lang_DOT_RuntimeException_printStackTrace_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_RuntimeException_internal_printStackTrace_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_RuntimeException_getMessage_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_RuntimeException_internal_getMessage_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_IllegalStateException_IllegalStateException_EncodedGlobalVariables_java_DOT_lang_DOT_Throwable(globals: Ref, arg0: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_IllegalStateException()
{
  inhale false
}

method java_DOT_lang_DOT_IllegalStateException_internal_IllegalStateException_EncodedGlobalVariables_java_DOT_lang_DOT_Throwable(globals: Ref, arg0: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_IllegalStateException()
{
  inhale false
}

method java_DOT_lang_DOT_IllegalStateException_IllegalStateException_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_IllegalStateException()
{
  inhale false
}

method java_DOT_lang_DOT_IllegalStateException_internal_IllegalStateException_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_IllegalStateException()
{
  inhale false
}

method java_DOT_lang_DOT_IllegalStateException_printStackTrace_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_IllegalStateException_internal_printStackTrace_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_IllegalStateException_getMessage_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_IllegalStateException_internal_getMessage_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_IllegalArgumentException_IllegalArgumentException_EncodedGlobalVariables_java_DOT_lang_DOT_Throwable(globals: Ref, arg0: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_IllegalArgumentException()
{
  inhale false
}

method java_DOT_lang_DOT_IllegalArgumentException_internal_IllegalArgumentException_EncodedGlobalVariables_java_DOT_lang_DOT_Throwable(globals: Ref, arg0: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_IllegalArgumentException()
{
  inhale false
}

method java_DOT_lang_DOT_IllegalArgumentException_IllegalArgumentException_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_IllegalArgumentException()
{
  inhale false
}

method java_DOT_lang_DOT_IllegalArgumentException_internal_IllegalArgumentException_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_IllegalArgumentException()
{
  inhale false
}

method java_DOT_lang_DOT_IllegalArgumentException_printStackTrace_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_IllegalArgumentException_internal_printStackTrace_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_IllegalArgumentException_getMessage_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale false
}

method java_DOT_lang_DOT_IllegalArgumentException_internal_getMessage_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Seq[Int])
  requires diz != null
{
  inhale false
}