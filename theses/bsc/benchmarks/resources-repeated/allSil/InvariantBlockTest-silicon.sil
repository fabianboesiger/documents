// Generated on 2021-03-23 at 23:33:17
domain TYPE {
  
  unique function class_Main(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Main_directSuperclass {
    directSuperclass(class_Main()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field Main_x: Int

//  a field 
field Main_y: Int

//  a field 
field Main_z: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


method Main___contract_unsatisfiable__good_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && (acc(diz.Main_x, write) && acc(diz.Main_y, write) && acc(diz.Main_z, write))
  // assert
  assert false
  inhale false
}

method Main_good_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.Main_x, write)
  requires acc(diz.Main_y, write)
  requires acc(diz.Main_z, write)
  ensures acc(diz.Main_x, write)
  ensures acc(diz.Main_y, write)
  ensures acc(diz.Main_z, write)
  ensures diz.Main_x + diz.Main_y == diz.Main_z
{
  var t__1: Int
  var tmp__2: Int
  var __flatten_1__3: Int
  diz.Main_x := 0
  diz.Main_y := 1
  diz.Main_z := 1
  exhale acc(diz.Main_x, 1 / 2) && acc(diz.Main_y, 1 / 2) && acc(diz.Main_z, 1 / 2) && diz.Main_x + diz.Main_y == diz.Main_z
  t__1 := diz.Main_x + diz.Main_z
  inhale acc(diz.Main_x, 1 / 2) && acc(diz.Main_y, 1 / 2) && acc(diz.Main_z, 1 / 2) && diz.Main_x + diz.Main_y == diz.Main_z
  tmp__2 := diz.Main_x
  __flatten_1__3 := diz.Main_y
  diz.Main_x := __flatten_1__3
  diz.Main_y := tmp__2
  exhale acc(diz.Main_x, 1 / 2) && acc(diz.Main_y, 1 / 2) && acc(diz.Main_z, 1 / 2) && diz.Main_x + diz.Main_y == diz.Main_z
  inhale acc(diz.Main_x, 1 / 2) && acc(diz.Main_y, 1 / 2) && acc(diz.Main_z, 1 / 2) && diz.Main_x + diz.Main_y == diz.Main_z
}

method Main___contract_unsatisfiable__problem1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && (acc(diz.Main_x, write) && acc(diz.Main_y, write) && acc(diz.Main_z, write))
  // assert
  assert false
  inhale false
}

method Main_problem1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.Main_x, write)
  requires acc(diz.Main_y, write)
  requires acc(diz.Main_z, write)
  ensures acc(diz.Main_x, write)
  ensures acc(diz.Main_y, write)
  ensures acc(diz.Main_z, write)
  ensures diz.Main_x + diz.Main_y == diz.Main_z
{
  var t__4: Int
  var tmp__5: Int
  var __flatten_2__6: Int
  diz.Main_x := 0
  diz.Main_y := 1
  diz.Main_z := 2
  exhale acc(diz.Main_x, 1 / 2) && acc(diz.Main_y, 1 / 2) && acc(diz.Main_z, 1 / 2) && diz.Main_x + diz.Main_y == diz.Main_z
  t__4 := diz.Main_x + diz.Main_z
  inhale acc(diz.Main_x, 1 / 2) && acc(diz.Main_y, 1 / 2) && acc(diz.Main_z, 1 / 2) && diz.Main_x + diz.Main_y == diz.Main_z
  tmp__5 := diz.Main_x
  __flatten_2__6 := diz.Main_y
  diz.Main_x := __flatten_2__6
  diz.Main_y := tmp__5
  exhale acc(diz.Main_x, 1 / 2) && acc(diz.Main_y, 1 / 2) && acc(diz.Main_z, 1 / 2) && diz.Main_x + diz.Main_y == diz.Main_z
  inhale acc(diz.Main_x, 1 / 2) && acc(diz.Main_y, 1 / 2) && acc(diz.Main_z, 1 / 2) && diz.Main_x + diz.Main_y == diz.Main_z
}

method Main___contract_unsatisfiable__problem2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && (acc(diz.Main_x, write) && acc(diz.Main_y, write) && acc(diz.Main_z, write))
  // assert
  assert false
  inhale false
}

method Main_problem2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.Main_x, write)
  requires acc(diz.Main_y, write)
  requires acc(diz.Main_z, write)
  ensures acc(diz.Main_x, write)
  ensures acc(diz.Main_y, write)
  ensures acc(diz.Main_z, write)
  ensures diz.Main_x + diz.Main_y == diz.Main_z
{
  var t__7: Int
  var tmp__8: Int
  var __flatten_3__9: Int
  var __flatten_4__10: Int
  diz.Main_x := 0
  diz.Main_y := 1
  diz.Main_z := 1
  exhale acc(diz.Main_x, 1 / 2) && acc(diz.Main_y, 1 / 2) && acc(diz.Main_z, 1 / 2) && diz.Main_x + diz.Main_y == diz.Main_z
  t__7 := diz.Main_x + diz.Main_z
  inhale acc(diz.Main_x, 1 / 2) && acc(diz.Main_y, 1 / 2) && acc(diz.Main_z, 1 / 2) && diz.Main_x + diz.Main_y == diz.Main_z
  tmp__8 := diz.Main_x
  __flatten_3__9 := diz.Main_y
  diz.Main_x := __flatten_3__9
  __flatten_4__10 := tmp__8 + 1
  diz.Main_y := __flatten_4__10
  exhale acc(diz.Main_x, 1 / 2) && acc(diz.Main_y, 1 / 2) && acc(diz.Main_z, 1 / 2) && diz.Main_x + diz.Main_y == diz.Main_z
  inhale acc(diz.Main_x, 1 / 2) && acc(diz.Main_y, 1 / 2) && acc(diz.Main_z, 1 / 2) && diz.Main_x + diz.Main_y == diz.Main_z
}