// Generated on 2021-03-23 at 23:35:19
domain TYPE {
  
  unique function class_List(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_ListStatic(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom List_directSuperclass {
    directSuperclass(class_List()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom ListStatic_directSuperclass {
    directSuperclass(class_ListStatic()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field List_val: Int

//  a field 
field List_next: Ref

function List_minmax_EncodedGlobalVariables_Integer_Integer(diz: Ref, globals: Ref, min: Int, max: Int): Bool
  requires diz != null
  requires acc(List_state_EncodedGlobalVariables(diz, globals), write)
{
  (unfolding acc(List_state_EncodedGlobalVariables(diz, globals), write) in min <= diz.List_val && diz.List_val <= max && (diz.List_next != null ==> List_minmax_EncodedGlobalVariables_Integer_Integer(diz.List_next, globals, min, max)))
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


predicate List_state_EncodedGlobalVariables(diz: Ref, globals: Ref) {
  diz != null && (acc(diz.List_val, write) && acc(diz.List_next, write) && (diz.List_next != null ==> acc(List_state_EncodedGlobalVariables(diz.List_next, globals), write)))
}

method List___contract_unsatisfiable__length_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Int)
  requires diz != null
{
  inhale true && acc(List_state_EncodedGlobalVariables(diz, globals), write)
  // assert
  assert false
  inhale false
}

method List_length_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Int)
  requires diz != null
  requires acc(List_state_EncodedGlobalVariables(diz, globals), write)
  ensures acc(List_state_EncodedGlobalVariables(diz, globals), write)
{
  var l__1: Int
  unfold acc(List_state_EncodedGlobalVariables(diz, globals), write)
  l__1 := 0
  if (diz.List_next != null) {
    l__1 := List_length_EncodedGlobalVariables(diz.List_next, globals)
  }
  l__1 := 1
  fold acc(List_state_EncodedGlobalVariables(diz, globals), write)
  sys__result := l__1
  // assert
  assert acc(List_state_EncodedGlobalVariables(diz, globals), write)
  inhale false
}

method List___contract_unsatisfiable__List_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method List_List_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_List()
  ensures acc(sys__result.List_val, write) && sys__result.List_val == 0
  ensures acc(sys__result.List_next, write) && sys__result.List_next == null
{
  var diz__2: Ref
  diz__2 := new(List_val, List_next)
  inhale type_of(diz__2) == class_List()
  diz__2.List_val := 0
  diz__2.List_next := null
  sys__result := diz__2
  // assert
  assert sys__result != null && type_of(sys__result) == class_List() && (acc(sys__result.List_val, write) && sys__result.List_val == 0) && (acc(sys__result.List_next, write) && sys__result.List_next == null)
  inhale false
}

method ListStatic___contract_unsatisfiable__newList_EncodedGlobalVariables_Integer_List(diz: Ref, globals: Ref, val: Int, next: Ref) returns (sys__result: Ref)
  requires diz != null
{
  inhale true && (4 <= val && val <= 17 && (next != null ==> acc(List_state_EncodedGlobalVariables(next, globals), write) && List_minmax_EncodedGlobalVariables_Integer_Integer(next, globals, 4, 17)))
  // assert
  assert false
  inhale false
}

method ListStatic_newList_EncodedGlobalVariables_Integer_List(diz: Ref, globals: Ref, val: Int, next: Ref) returns (sys__result: Ref)
  requires diz != null
  requires 4 <= val
  requires val <= 17
  requires next != null ==> acc(List_state_EncodedGlobalVariables(next, globals), write) && List_minmax_EncodedGlobalVariables_Integer_Integer(next, globals, 4, 17)
  ensures sys__result != null
  ensures acc(List_state_EncodedGlobalVariables(sys__result, globals), write)
  ensures List_minmax_EncodedGlobalVariables_Integer_Integer(sys__result, globals, 4, 17)
{
  var l__3: Ref
  l__3 := List_List_EncodedGlobalVariables(globals)
  l__3.List_val := val
  l__3.List_next := next
  fold acc(List_state_EncodedGlobalVariables(l__3, globals), write)
  sys__result := l__3
  // assert
  assert sys__result != null && acc(List_state_EncodedGlobalVariables(sys__result, globals), write) && List_minmax_EncodedGlobalVariables_Integer_Integer(sys__result, globals, 4, 17)
  inhale false
}

method ListStatic___contract_unsatisfiable__ListStatic_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method ListStatic_ListStatic_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_ListStatic()
{
  var diz__4: Ref
  diz__4 := new()
  inhale type_of(diz__4) == class_ListStatic()
  sys__result := diz__4
  // assert
  assert sys__result != null && type_of(sys__result) == class_ListStatic()
  inhale false
}