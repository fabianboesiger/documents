// Generated on 2021-03-23 at 23:38:33
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class___return_internal_m_0_ex(): TYPE
  
  unique function class_ReturnFinally(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom __return_internal_m_0_ex_directSuperclass {
    directSuperclass(class___return_internal_m_0_ex()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom ReturnFinally_directSuperclass {
    directSuperclass(class_ReturnFinally()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field __return_internal_m_0_ex_value: Int

//  a field 
field ReturnFinally_i: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method __return_internal_m_0_ex___return_internal_m_0_ex_Integer(returnValue: Int) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class___return_internal_m_0_ex()
  ensures acc(sys__result.__return_internal_m_0_ex_value, write)
  ensures sys__result.__return_internal_m_0_ex_value == returnValue
{
  inhale false
}

method ReturnFinally_m_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Int)
  requires diz != null
  requires acc(diz.ReturnFinally_i, write)
  ensures acc(diz.ReturnFinally_i, write)
  ensures sys__result == 0
  ensures diz.ReturnFinally_i == 1
{
  inhale false
}

method ReturnFinally___contract_unsatisfiable__internal_m_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Int)
  requires diz != null
{
  inhale true && acc(diz.ReturnFinally_i, write)
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__internal_m_0
}

method ReturnFinally_internal_m_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Int)
  requires diz != null
  requires acc(diz.ReturnFinally_i, write)
  ensures acc(diz.ReturnFinally_i, write)
  ensures sys__result == 0
  ensures diz.ReturnFinally_i == 1
{
  var ucv_0__5: Ref
  var old__sys_exc_7__4: Ref
  var sys__exc__1: Ref
  var __flatten_1__2: Ref
  var old__sys_exc_4__3: Ref
  sys__exc__1 := null
  old__sys_exc_4__3 := sys__exc__1
  diz.ReturnFinally_i := 0
  old__sys_exc_7__4 := sys__exc__1
  __flatten_1__2 := __return_internal_m_0_ex___return_internal_m_0_ex_Integer(diz.ReturnFinally_i)
  sys__exc__1 := __flatten_1__2
  goto finally_5
  goto finally_5
  label finally_5
  diz.ReturnFinally_i := 1
  if (sys__exc__1 != old__sys_exc_7__4) {
    goto catch_2
  }
  goto try_end_6
  label try_end_6
  goto try_end_3
  label catch_2
  if (!instanceof_TYPE_TYPE(type_of(sys__exc__1), class___return_internal_m_0_ex())) {
    goto method_end_internal_m_1
  }
  inhale ucv_0__5 == sys__exc__1
  sys__exc__1 := null
  sys__result := ucv_0__5.__return_internal_m_0_ex_value
  // assert
  assert acc(diz.ReturnFinally_i, write) && sys__result == 0 && diz.ReturnFinally_i == 1
  inhale false
  // assert
  assert sys__exc__1 == null
  sys__exc__1 := old__sys_exc_4__3
  goto try_end_3
  label try_end_3
  label method_end_internal_m_1
  // assert
  assert sys__exc__1 == null
}