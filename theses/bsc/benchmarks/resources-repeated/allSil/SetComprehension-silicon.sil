// Generated on 2021-03-23 at 23:39:10
domain TYPE {
  
  unique function class_SetComp(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_Edge(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom SetComp_directSuperclass {
    directSuperclass(class_SetComp()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Edge_directSuperclass {
    directSuperclass(class_Edge()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

//  a field 
field Edge_s: Int

//  a field 
field Edge_t: Int

function SetComp_plus_Integer_Integer(a: Int, b: Int): Int
{
  a + b
}

function vct_set_comprehension_Set_Edge__Set$Edge$(setCompArge: Set[Ref]): Set[Ref]
  requires (forall e: Ref :: (e in setCompArge) ==> acc(e.Edge_s, wildcard))
  ensures (forall e: Ref :: { e.Edge_s } { (e in result) } (e in setCompArge) ==> 2 < e.Edge_s == (e in result))


function vct_set_comprehension_Set_Integer_$$$(): Set[Int]
  ensures (forall x: Int :: { (x in result) } (0 < x && x % 2 == 0) == (x in result))


function vct_set_comprehension_Set_Integer_$$_Set$Integer$_Set$Integer$(setCompArgx: Set[Int], setCompArgy: Set[Int]): Set[Int]
  ensures (forall x: Int, y: Int :: { (x in setCompArgx),(y in setCompArgy) } true && ((y in setCompArgy) && (x in setCompArgx)) ==> (x == y) == (x + y in result))


function vct_set_comprehension_Set_Integer_$_Set$Integer$_Set$Integer$(setCompArgx: Set[Int], setCompArgy: Set[Int]): Set[Int]
  ensures (forall x: Int, y: Int :: true && ((y in setCompArgy) && (x in setCompArgx)) ==> (x + y % 2 == 0) == (SetComp_plus_Integer_Integer(x, y) in result))


function vct_set_comprehension_Set_Integer_(): Set[Int]
  ensures (forall x: Int :: (0 <= x && x <= 5) == (SetComp_plus_Integer_Integer(x, x) in result))


function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


method SetComp___contract_unsatisfiable__case1_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, j: Int)
  requires diz != null
{
  inhale true && (0 <= j && j < 5)
  // assert
  assert false
  inhale false
}

method SetComp_case1_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, j: Int)
  requires diz != null
  requires 0 <= j && j < 5
{
  var a__1: Set[Int]
  a__1 := vct_set_comprehension_Set_Integer_()
  // assert
  assert (SetComp_plus_Integer_Integer(1, 1) in a__1)
  // assert
  assert (SetComp_plus_Integer_Integer(j, j) in a__1)
}

method SetComp___contract_unsatisfiable__case3_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method SetComp_case3_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var b__2: Set[Int]
  var __flatten_2__3: Set[Int]
  var __flatten_3__4: Set[Int]
  __flatten_2__3 := Set(0, 1, 2, 3, 4)
  __flatten_3__4 := Set(0, 1, 2)
  b__2 := vct_set_comprehension_Set_Integer_$_Set$Integer$_Set$Integer$(__flatten_2__3, __flatten_3__4)
  // assert
  assert (2 in b__2)
  // assert
  assert (6 in b__2)
  // assert
  assert (0 in b__2)
}

method SetComp___contract_unsatisfiable__case2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method SetComp_case2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var c__5: Set[Int]
  var __flatten_5__6: Set[Int]
  var __flatten_6__7: Set[Int]
  var d__8: Set[Int]
  var e1__9: Ref
  var e2__10: Ref
  var a__11: Set[Ref]
  var __flatten_11__12: Set[Ref]
  __flatten_5__6 := Set(1, 2, 3, 4, 5)
  __flatten_6__7 := Set(1, 2, 3, 4, 5)
  c__5 := vct_set_comprehension_Set_Integer_$$_Set$Integer$_Set$Integer$(__flatten_5__6, __flatten_6__7)
  d__8 := vct_set_comprehension_Set_Integer_$$$()
  e1__9 := Edge_Edge_EncodedGlobalVariables_Integer_Integer(globals, 3, 2)
  e2__10 := Edge_Edge_EncodedGlobalVariables_Integer_Integer(globals, 1, 2)
  __flatten_11__12 := Set(e1__9, e2__10)
  a__11 := vct_set_comprehension_Set_Edge__Set$Edge$(__flatten_11__12)
}

method Edge___contract_unsatisfiable__Edge_EncodedGlobalVariables_Integer_Integer(diz: Ref, globals: Ref, source: Int, target: Int)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Edge_Edge_EncodedGlobalVariables_Integer_Integer(globals: Ref, source: Int, target: Int) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Edge()
{
  var diz__13: Ref
  diz__13 := new(Edge_s, Edge_t)
  inhale type_of(diz__13) == class_Edge()
  diz__13.Edge_s := source
  diz__13.Edge_t := target
  sys__result := diz__13
  // assert
  assert sys__result != null && type_of(sys__result) == class_Edge()
  inhale false
}