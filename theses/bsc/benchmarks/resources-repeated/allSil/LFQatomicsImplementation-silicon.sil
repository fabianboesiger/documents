// Generated on 2021-03-23 at 23:33:59
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_Node(): TYPE
  
  unique function class_AtomicNode(): TYPE
  
  unique function class_Integer(): TYPE
  
  unique function class_Queue(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Node_directSuperclass {
    directSuperclass(class_Node()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom AtomicNode_directSuperclass {
    directSuperclass(class_AtomicNode()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Integer_directSuperclass {
    directSuperclass(class_Integer()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Queue_directSuperclass {
    directSuperclass(class_Queue()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field Node_val: Int

//  a field 
field Node_next: Ref

//  a field 
field AtomicNode_val: Ref

//  a field 
field Integer_val: Int

//  a field 
field Queue_begin: Ref

//  a field 
field Queue_head: Ref

//  a field 
field Queue_tail: Ref

//  a field 
field Queue_last: Ref

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


predicate Queue_reachable_EncodedGlobalVariables_Node_Node(diz: Ref, globals: Ref, n1: Ref, n2: Ref) {
  diz != null && (n1 != n2 ==> acc(n1.Node_next, wildcard) && acc(n1.Node_next.AtomicNode_val, wildcard) && acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1.Node_next.AtomicNode_val, n2), write))
}

predicate Queue_chain_EncodedGlobalVariables_Node_Node(diz: Ref, globals: Ref, n1: Ref, n2: Ref) {
  diz != null && (n1 != null && n2 != null && (n1 != n2 ==> acc(n1.Node_next, wildcard) && acc(n1.Node_next.AtomicNode_val, wildcard) && acc(n1.Node_next.AtomicNode_val.Node_val, write) && acc(Queue_chain_EncodedGlobalVariables_Node_Node(diz, globals, n1.Node_next.AtomicNode_val, n2), write)))
}

predicate Queue_csl_invariant_EncodedGlobalVariables(diz: Ref, globals: Ref) {
  diz != null && (acc(diz.Queue_begin, wildcard) && (acc(diz.Queue_head, wildcard) && acc(diz.Queue_head.AtomicNode_val, write)) && acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, diz.Queue_begin, diz.Queue_head.AtomicNode_val), wildcard) && (acc(diz.Queue_tail, wildcard) && acc(diz.Queue_tail.AtomicNode_val, write)) && acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, diz.Queue_begin, diz.Queue_tail.AtomicNode_val), wildcard) && acc(diz.Queue_last, write) && acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, diz.Queue_begin, diz.Queue_last), wildcard) && acc(Queue_chain_EncodedGlobalVariables_Node_Node(diz, globals, diz.Queue_head.AtomicNode_val, diz.Queue_last), write) && (acc(diz.Queue_last.Node_next, wildcard) && (acc(diz.Queue_last.Node_next.AtomicNode_val, write) && diz.Queue_last.Node_next.AtomicNode_val == null)))
}

method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method Node___contract_unsatisfiable__Node_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Node_Node_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Node()
  ensures acc(sys__result.Node_val, write) && sys__result.Node_val == 0
  ensures acc(sys__result.Node_next, write) && sys__result.Node_next == null
{
  var diz__1: Ref
  diz__1 := new(Node_val, Node_next)
  inhale type_of(diz__1) == class_Node()
  diz__1.Node_val := 0
  diz__1.Node_next := null
  sys__result := diz__1
  // assert
  assert sys__result != null && type_of(sys__result) == class_Node() && (acc(sys__result.Node_val, write) && sys__result.Node_val == 0) && (acc(sys__result.Node_next, write) && sys__result.Node_next == null)
  inhale false
}

method AtomicNode_AtomicNode_EncodedGlobalVariables_Node(globals: Ref, n: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_AtomicNode()
  ensures acc(sys__result.AtomicNode_val, write) && sys__result.AtomicNode_val == n
{
  var diz__2: Ref
  diz__2 := new(AtomicNode_val)
  inhale type_of(diz__2) == class_AtomicNode()
  diz__2.AtomicNode_val := n
  sys__result := diz__2
  // assert
  assert sys__result != null && type_of(sys__result) == class_AtomicNode() && (acc(sys__result.AtomicNode_val, write) && sys__result.AtomicNode_val == n)
  inhale false
}

method Integer___contract_unsatisfiable__Integer_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, v: Int)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Integer_Integer_EncodedGlobalVariables_Integer(globals: Ref, v: Int) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Integer()
  ensures acc(sys__result.Integer_val, write) && sys__result.Integer_val == v
{
  var diz__3: Ref
  diz__3 := new(Integer_val)
  inhale type_of(diz__3) == class_Integer()
  diz__3.Integer_val := v
  sys__result := diz__3
  // assert
  assert sys__result != null && type_of(sys__result) == class_Integer() && (acc(sys__result.Integer_val, write) && sys__result.Integer_val == v)
  inhale false
}

method Queue___contract_unsatisfiable__Queue_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Queue_Queue_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Queue()
  ensures acc(sys__result.Queue_begin, wildcard)
  ensures acc(sys__result.Queue_head, wildcard)
  ensures acc(sys__result.Queue_tail, wildcard)
{
  var __flatten_10__10: Ref
  var __flatten_8__9: Ref
  var __flatten_6__8: Ref
  var __flatten_4__7: Ref
  var __flatten_3__6: Ref
  var __flatten_1__5: Ref
  var diz__4: Ref
  diz__4 := new(Queue_begin, Queue_head, Queue_tail, Queue_last)
  inhale type_of(diz__4) == class_Queue()
  __flatten_1__5 := Node_Node_EncodedGlobalVariables(globals)
  diz__4.Queue_begin := __flatten_1__5
  __flatten_3__6 := diz__4.Queue_begin
  __flatten_4__7 := AtomicNode_AtomicNode_EncodedGlobalVariables_Node(globals, null)
  __flatten_3__6.Node_next := __flatten_4__7
  __flatten_6__8 := AtomicNode_AtomicNode_EncodedGlobalVariables_Node(globals, diz__4.Queue_begin)
  diz__4.Queue_head := __flatten_6__8
  __flatten_8__9 := AtomicNode_AtomicNode_EncodedGlobalVariables_Node(globals, diz__4.Queue_begin)
  diz__4.Queue_tail := __flatten_8__9
  __flatten_10__10 := diz__4.Queue_begin
  diz__4.Queue_last := __flatten_10__10
  fold acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz__4, globals, diz__4.Queue_begin, diz__4.Queue_head.AtomicNode_val), write)
  fold acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz__4, globals, diz__4.Queue_begin, diz__4.Queue_tail.AtomicNode_val), write)
  fold acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz__4, globals, diz__4.Queue_begin, diz__4.Queue_last), write)
  fold acc(Queue_chain_EncodedGlobalVariables_Node_Node(diz__4, globals, diz__4.Queue_begin, diz__4.Queue_last), write)
  sys__result := diz__4
  // assert
  assert sys__result != null && type_of(sys__result) == class_Queue() && acc(sys__result.Queue_begin, wildcard) && acc(sys__result.Queue_head, wildcard) && acc(sys__result.Queue_tail, wildcard)
  inhale false
}

method Queue___contract_unsatisfiable__append_lemma_EncodedGlobalVariables_Node_Node_Node(diz: Ref, globals: Ref, n1: Ref, n2: Ref, n3: Ref)
  requires diz != null
{
  inhale true && (acc(Queue_chain_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2), write) && (acc(n2.Node_next, wildcard) && acc(n2.Node_next.AtomicNode_val, wildcard) && acc(n2.Node_next.AtomicNode_val.Node_val, write)) && n2.Node_next.AtomicNode_val == n3 && (acc(n3.Node_next, wildcard) && (acc(n3.Node_next.AtomicNode_val, write) && n3.Node_next.AtomicNode_val == null)))
  // assert
  assert false
  inhale false
}

method Queue_append_lemma_EncodedGlobalVariables_Node_Node_Node(diz: Ref, globals: Ref, n1: Ref, n2: Ref, n3: Ref)
  requires diz != null
  requires acc(Queue_chain_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2), write)
  requires acc(n2.Node_next, wildcard)
  requires acc(n2.Node_next.AtomicNode_val, wildcard)
  requires acc(n2.Node_next.AtomicNode_val.Node_val, write)
  requires n2.Node_next.AtomicNode_val == n3
  requires acc(n3.Node_next, wildcard)
  requires acc(n3.Node_next.AtomicNode_val, write) && n3.Node_next.AtomicNode_val == null
  ensures acc(Queue_chain_EncodedGlobalVariables_Node_Node(diz, globals, n1, n3), write)
  ensures acc(n3.Node_next, wildcard)
  ensures acc(n3.Node_next.AtomicNode_val, write) && n3.Node_next.AtomicNode_val == null
{
  var v__12: Int
  var __flatten_11__11: Ref
  if (n1 == n2) {
    v__12 := n3.Node_val
    fold acc(Queue_chain_EncodedGlobalVariables_Node_Node(diz, globals, n3, n3), write)
    fold acc(Queue_chain_EncodedGlobalVariables_Node_Node(diz, globals, n2, n3), write)
  } else {
    unfold acc(Queue_chain_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2), write)
    __flatten_11__11 := n1.Node_next
    Queue_append_lemma_EncodedGlobalVariables_Node_Node_Node(diz, globals, __flatten_11__11.AtomicNode_val, n2, n3)
    fold acc(Queue_chain_EncodedGlobalVariables_Node_Node(diz, globals, n1, n3), write)
  }
}

method Queue___contract_unsatisfiable__try_deq_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Ref)
  requires diz != null
{
  inhale true && (acc(diz.Queue_head, wildcard) && acc(diz.Queue_tail, wildcard))
  // assert
  assert false
  inhale false
}

method Queue_try_deq_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Ref)
  requires diz != null
  requires acc(diz.Queue_head, wildcard)
  requires acc(diz.Queue_tail, wildcard)
  ensures acc(diz.Queue_head, wildcard)
  ensures acc(diz.Queue_tail, wildcard)
  ensures sys__result != null ==> acc(sys__result.Integer_val, write)
{
  var inline_2_res__30: Bool
  var inline_2_v__29: Ref
  var inline_2_e__28: Ref
  var inline_2_globals__27: Ref
  var csl_result_3__26: Bool
  var n1__13: Ref
  var n2__14: Ref
  var tmp__15: Bool
  var res__16: Ref
  var csl_result_1__17: Ref
  var inline_0_globals__18: Ref
  var __flatten_13__19: Ref
  var csl_result_2__20: Ref
  var inline_1_globals__21: Ref
  var __flatten_15__22: Ref
  var __flatten_16__23: Ref
  var __flatten_17__24: Ref
  var __flatten_18__25: Ref
  res__16 := null
  inhale acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  unfold acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  inline_0_globals__18 := globals
  __flatten_13__19 := diz.Queue_head
  csl_result_1__17 := __flatten_13__19.AtomicNode_val
  goto csl_return_1
  label csl_return_1
  fold acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  exhale acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  n1__13 := csl_result_1__17
  inhale acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  unfold acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  Queue_lemma_readable_or_last_EncodedGlobalVariables_Node_Node(diz, globals, diz.Queue_begin, n1__13)
  inline_1_globals__21 := globals
  __flatten_15__22 := n1__13.Node_next
  csl_result_2__20 := __flatten_15__22.AtomicNode_val
  goto csl_return_2
  label csl_return_2
  fold acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  exhale acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  n2__14 := csl_result_2__20
  if (n2__14 != null) {
    inhale acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
    unfold acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
    __flatten_16__23 := diz.Queue_head
    if (__flatten_16__23.AtomicNode_val == n1__13) {
      unfold acc(Queue_chain_EncodedGlobalVariables_Node_Node(diz, globals, diz.Queue_head.AtomicNode_val, diz.Queue_last), write)
    }
    inline_2_globals__27 := globals
    inline_2_e__28 := n1__13
    inline_2_v__29 := n2__14
    __flatten_17__24 := diz.Queue_head
    inline_2_res__30 := __flatten_17__24.AtomicNode_val == inline_2_e__28
    if (inline_2_res__30) {
      __flatten_18__25 := diz.Queue_head
      __flatten_18__25.AtomicNode_val := inline_2_v__29
    }
    csl_result_3__26 := inline_2_res__30
    goto csl_return_3
    label csl_return_3
    fold acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
    exhale acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
    tmp__15 := csl_result_3__26
    if (tmp__15) {
      res__16 := Integer_Integer_EncodedGlobalVariables_Integer(globals, n2__14.Node_val)
    }
  }
  sys__result := res__16
  // assert
  assert acc(diz.Queue_head, wildcard) && acc(diz.Queue_tail, wildcard) && (sys__result != null ==> acc(sys__result.Integer_val, write))
  inhale false
}

method Queue___contract_unsatisfiable__lemma_readable_or_last_EncodedGlobalVariables_Node_Node(diz: Ref, globals: Ref, n1: Ref, n2: Ref)
  requires diz != null
{
  inhale true && (acc(diz.Queue_last, 1 / 2) && (acc(diz.Queue_last.Node_next, wildcard) && acc(diz.Queue_last.Node_next.AtomicNode_val, write)) && acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2), wildcard) && acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, diz.Queue_last), wildcard))
  // assert
  assert false
  inhale false
}

method Queue_lemma_readable_or_last_EncodedGlobalVariables_Node_Node(diz: Ref, globals: Ref, n1: Ref, n2: Ref)
  requires diz != null
  requires acc(diz.Queue_last, 1 / 2)
  requires acc(diz.Queue_last.Node_next, wildcard)
  requires acc(diz.Queue_last.Node_next.AtomicNode_val, write)
  requires acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2), wildcard)
  requires acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, diz.Queue_last), wildcard)
  ensures acc(diz.Queue_last, 1 / 2)
  ensures acc(diz.Queue_last.Node_next, wildcard)
  ensures acc(diz.Queue_last.Node_next.AtomicNode_val, write)
  ensures diz.Queue_last == old(diz.Queue_last)
  ensures diz.Queue_last.Node_next.AtomicNode_val == old(diz.Queue_last.Node_next.AtomicNode_val)
  ensures n2 != diz.Queue_last ==> acc(n2.Node_next, wildcard) && acc(n2.Node_next.AtomicNode_val, wildcard) && acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2.Node_next.AtomicNode_val), write) && acc(n2.Node_next.AtomicNode_val.Node_next, wildcard)
{
  var __flatten_20__31: Ref
  if (n2 != diz.Queue_last) {
    unfold acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2), wildcard)
    unfold acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, diz.Queue_last), wildcard)
    if (n1 == n2) {
      unfold acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n2, diz.Queue_last), wildcard)
      unfold acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n2.Node_next.AtomicNode_val, diz.Queue_last), wildcard)
      fold acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n2.Node_next.AtomicNode_val, n2.Node_next.AtomicNode_val), write)
      fold acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2.Node_next.AtomicNode_val), write)
    } else {
      // assert
      assert acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1.Node_next.AtomicNode_val, diz.Queue_last), wildcard)
      __flatten_20__31 := n1.Node_next
      Queue_lemma_readable_or_last_EncodedGlobalVariables_Node_Node(diz, globals, __flatten_20__31.AtomicNode_val, n2)
      fold acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2.Node_next.AtomicNode_val), write)
    }
  }
}

method Queue___contract_unsatisfiable__try_enq_EncodedGlobalVariables_Node(diz: Ref, globals: Ref, nn: Ref) returns (sys__result: Bool)
  requires diz != null
{
  inhale true && (acc(diz.Queue_tail, wildcard) && acc(nn.Node_val, write) && (acc(nn.Node_next, wildcard) && (acc(nn.Node_next.AtomicNode_val, write) && nn.Node_next.AtomicNode_val == null)))
  // assert
  assert false
  inhale false
}

method Queue_try_enq_EncodedGlobalVariables_Node(diz: Ref, globals: Ref, nn: Ref) returns (sys__result: Bool)
  requires diz != null
  requires acc(diz.Queue_tail, wildcard)
  requires acc(nn.Node_val, write)
  requires acc(nn.Node_next, wildcard)
  requires acc(nn.Node_next.AtomicNode_val, write) && nn.Node_next.AtomicNode_val == null
  ensures acc(diz.Queue_tail, wildcard)
  ensures !sys__result ==> acc(nn.Node_val, write) && (acc(nn.Node_next, wildcard) && (acc(nn.Node_next.AtomicNode_val, write) && nn.Node_next.AtomicNode_val == null))
{
  var inline_6_res__54: Bool
  var inline_6_v__53: Ref
  var inline_6_e__52: Ref
  var inline_6_globals__51: Ref
  var csl_result_7__50: Bool
  var inline_5_res__49: Bool
  var inline_5_v__48: Ref
  var inline_5_e__47: Ref
  var inline_5_globals__46: Ref
  var csl_result_6__45: Bool
  var n1__32: Ref
  var n2__33: Ref
  var res__34: Bool
  var csl_result_4__35: Ref
  var inline_3_globals__36: Ref
  var __flatten_22__37: Ref
  var csl_result_5__38: Ref
  var inline_4_globals__39: Ref
  var __flatten_24__40: Ref
  var __flatten_26__41: Ref
  var __flatten_27__42: Ref
  var __flatten_29__43: Ref
  var __flatten_30__44: Ref
  res__34 := false
  inhale acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  unfold acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  inline_3_globals__36 := globals
  __flatten_22__37 := diz.Queue_tail
  csl_result_4__35 := __flatten_22__37.AtomicNode_val
  goto csl_return_4
  label csl_return_4
  fold acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  exhale acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  n1__32 := csl_result_4__35
  inhale acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  unfold acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  Queue_lemma_readable_or_last_EncodedGlobalVariables_Node_Node(diz, globals, diz.Queue_begin, n1__32)
  inline_4_globals__39 := globals
  __flatten_24__40 := n1__32.Node_next
  csl_result_5__38 := __flatten_24__40.AtomicNode_val
  goto csl_return_5
  label csl_return_5
  fold acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  exhale acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  n2__33 := csl_result_5__38
  if (n2__33 == null) {
    inhale acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
    unfold acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
    Queue_lemma_readable_or_last_EncodedGlobalVariables_Node_Node(diz, globals, diz.Queue_begin, n1__32)
    inline_5_globals__46 := globals
    inline_5_e__47 := null
    inline_5_v__48 := nn
    __flatten_26__41 := n1__32.Node_next
    inline_5_res__49 := __flatten_26__41.AtomicNode_val == inline_5_e__47
    if (inline_5_res__49) {
      __flatten_27__42 := n1__32.Node_next
      __flatten_27__42.AtomicNode_val := inline_5_v__48
    }
    csl_result_6__45 := inline_5_res__49
    goto csl_return_6
    label csl_return_6
    if (csl_result_6__45) {
      Queue_lemma_shift_last_EncodedGlobalVariables_Node_Node(diz, globals, n1__32, nn)
    }
    fold acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
    exhale acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
    res__34 := csl_result_6__45
  } else {
    inhale acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
    unfold acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
    inline_6_globals__51 := globals
    inline_6_e__52 := n1__32
    inline_6_v__53 := n2__33
    __flatten_29__43 := diz.Queue_tail
    inline_6_res__54 := __flatten_29__43.AtomicNode_val == inline_6_e__52
    if (inline_6_res__54) {
      __flatten_30__44 := diz.Queue_tail
      __flatten_30__44.AtomicNode_val := inline_6_v__53
    }
    csl_result_7__50 := inline_6_res__54
    goto csl_return_7
    label csl_return_7
    fold acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
    exhale acc(Queue_csl_invariant_EncodedGlobalVariables(diz, globals), write)
  }
  sys__result := res__34
  // assert
  assert acc(diz.Queue_tail, wildcard) && (!sys__result ==> acc(nn.Node_val, write) && (acc(nn.Node_next, wildcard) && (acc(nn.Node_next.AtomicNode_val, write) && nn.Node_next.AtomicNode_val == null)))
  inhale false
}

method Queue___contract_unsatisfiable__lemma_shift_last_EncodedGlobalVariables_Node_Node(diz: Ref, globals: Ref, n1: Ref, n2: Ref)
  requires diz != null
{
  inhale true && (acc(diz.Queue_last, write) && diz.Queue_last == n1 && (acc(diz.Queue_last.Node_next, wildcard) && (acc(diz.Queue_last.Node_next.AtomicNode_val, write) && diz.Queue_last.Node_next.AtomicNode_val == n2)) && (acc(n2.Node_next, wildcard) && (acc(n2.Node_next.AtomicNode_val, write) && n2.Node_next.AtomicNode_val == null)) && acc(n2.Node_val, write) && acc(diz.Queue_head, wildcard) && acc(diz.Queue_head.AtomicNode_val, 1 / 2) && acc(Queue_chain_EncodedGlobalVariables_Node_Node(diz, globals, diz.Queue_head.AtomicNode_val, diz.Queue_last), write) && acc(diz.Queue_begin, wildcard) && acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, diz.Queue_begin, diz.Queue_last), wildcard) && acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, diz.Queue_begin, diz.Queue_head.AtomicNode_val), wildcard))
  // assert
  assert false
  inhale false
}

method Queue_lemma_shift_last_EncodedGlobalVariables_Node_Node(diz: Ref, globals: Ref, n1: Ref, n2: Ref)
  requires diz != null
  requires acc(diz.Queue_last, write)
  requires diz.Queue_last == n1
  requires acc(diz.Queue_last.Node_next, wildcard)
  requires acc(diz.Queue_last.Node_next.AtomicNode_val, write) && diz.Queue_last.Node_next.AtomicNode_val == n2
  requires acc(n2.Node_next, wildcard)
  requires acc(n2.Node_next.AtomicNode_val, write) && n2.Node_next.AtomicNode_val == null
  requires acc(n2.Node_val, write)
  requires acc(diz.Queue_head, wildcard)
  requires acc(diz.Queue_head.AtomicNode_val, 1 / 2)
  requires acc(Queue_chain_EncodedGlobalVariables_Node_Node(diz, globals, diz.Queue_head.AtomicNode_val, diz.Queue_last), write)
  requires acc(diz.Queue_begin, wildcard)
  requires acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, diz.Queue_begin, diz.Queue_last), wildcard)
  requires acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, diz.Queue_begin, diz.Queue_head.AtomicNode_val), wildcard)
  ensures acc(diz.Queue_last, write)
  ensures diz.Queue_last == n2
  ensures acc(diz.Queue_last.Node_next, wildcard)
  ensures acc(diz.Queue_last.Node_next.AtomicNode_val, write) && diz.Queue_last.Node_next.AtomicNode_val == null
  ensures acc(diz.Queue_begin, wildcard)
  ensures acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, diz.Queue_begin, diz.Queue_last), wildcard)
  ensures acc(diz.Queue_head, wildcard)
  ensures acc(diz.Queue_head.AtomicNode_val, 1 / 2)
  ensures acc(Queue_chain_EncodedGlobalVariables_Node_Node(diz, globals, diz.Queue_head.AtomicNode_val, diz.Queue_last), write)
  ensures diz.Queue_head.AtomicNode_val == old(diz.Queue_head.AtomicNode_val)
{
  var __flatten_32__55: Ref
  diz.Queue_last := n2
  fold acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n2, n2), write)
  fold acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2), write)
  Queue_lemma_reach_transitive_EncodedGlobalVariables_Node_Node_Node(diz, globals, diz.Queue_begin, n1, n2)
  __flatten_32__55 := diz.Queue_head
  Queue_append_lemma_EncodedGlobalVariables_Node_Node_Node(diz, globals, __flatten_32__55.AtomicNode_val, n1, n2)
}

method Queue___contract_unsatisfiable__lemma_reach_transitive_EncodedGlobalVariables_Node_Node_Node(diz: Ref, globals: Ref, n1: Ref, n2: Ref, n3: Ref)
  requires diz != null
{
  inhale true && (acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2), wildcard) && acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n2, n3), wildcard))
  // assert
  assert false
  inhale false
}

method Queue_lemma_reach_transitive_EncodedGlobalVariables_Node_Node_Node(diz: Ref, globals: Ref, n1: Ref, n2: Ref, n3: Ref)
  requires diz != null
  requires acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2), wildcard)
  requires acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n2, n3), wildcard)
  ensures acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n3), write)
{
  var __flatten_34__56: Ref
  if (n1 != n2) {
    unfold acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2), wildcard)
    __flatten_34__56 := n1.Node_next
    Queue_lemma_reach_transitive_EncodedGlobalVariables_Node_Node_Node(diz, globals, __flatten_34__56.AtomicNode_val, n2, n3)
    // assert
    assert acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1.Node_next.AtomicNode_val, n3), write)
    fold acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n3), write)
  } else {
    Queue_lemma_rebuild_full_EncodedGlobalVariables_Node_Node(diz, globals, n2, n3)
  }
}

method Queue___contract_unsatisfiable__lemma_rebuild_full_EncodedGlobalVariables_Node_Node(diz: Ref, globals: Ref, n1: Ref, n2: Ref)
  requires diz != null
{
  inhale true && acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2), wildcard)
  // assert
  assert false
  inhale false
}

method Queue_lemma_rebuild_full_EncodedGlobalVariables_Node_Node(diz: Ref, globals: Ref, n1: Ref, n2: Ref)
  requires diz != null
  requires acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2), wildcard)
  ensures acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2), write)
{
  var __flatten_37__57: Ref
  unfold acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2), wildcard)
  if (n1 != n2) {
    __flatten_37__57 := n1.Node_next
    Queue_lemma_rebuild_full_EncodedGlobalVariables_Node_Node(diz, globals, __flatten_37__57.AtomicNode_val, n2)
  }
  fold acc(Queue_reachable_EncodedGlobalVariables_Node_Node(diz, globals, n1, n2), write)
}