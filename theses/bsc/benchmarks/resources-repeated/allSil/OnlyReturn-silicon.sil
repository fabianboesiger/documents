// Generated on 2021-03-23 at 23:36:05
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_MyClas(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom MyClas_directSuperclass {
    directSuperclass(class_MyClas()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method MyClas___contract_unsatisfiable__foo_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Bool)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method MyClas_foo_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Bool)
  requires diz != null
  ensures !sys__result
{
  sys__result := false
  // assert
  assert !sys__result
  inhale false
}

method MyClas___contract_unsatisfiable__bar_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Bool)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method MyClas_bar_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Bool)
  requires diz != null
  ensures sys__result
{
  sys__result := true
  // assert
  assert sys__result
  inhale false
}

method MyClas___contract_unsatisfiable__baz_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Int)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method MyClas_baz_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Int)
  requires diz != null
  ensures sys__result == 5
{
  sys__result := 5
  // assert
  assert sys__result == 5
  inhale false
}

method MyClas___contract_unsatisfiable__qux_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method MyClas_qux_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  // assert
  assert true
  inhale false
}