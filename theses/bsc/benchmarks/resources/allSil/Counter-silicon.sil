// Generated on 2021-03-23 at 23:30:36
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_Counter(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Counter_directSuperclass {
    directSuperclass(class_Counter()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field Counter_val: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method Counter___contract_unsatisfiable__incr_static_EncodedGlobalVariables_Counter_Integer(globals: Ref, c: Ref, n: Int)
{
  inhale true && (acc(c.Counter_val, write) && 0 <= n)
  // assert
  assert false
  inhale false
}

method Counter_incr_static_EncodedGlobalVariables_Counter_Integer(globals: Ref, c: Ref, n: Int)
  requires acc(c.Counter_val, write)
  requires 0 <= n
  ensures acc(c.Counter_val, write)
  ensures c.Counter_val == old(c.Counter_val) + n
{
  var tmp__1: Int
  tmp__1 := n
  while (0 < tmp__1)
    invariant acc(c.Counter_val, write)
    invariant c.Counter_val + tmp__1 == old(c.Counter_val) + n
    invariant 0 <= tmp__1 
  {
    Counter_incr_EncodedGlobalVariables(c, globals)
    tmp__1 := tmp__1 - 1
  }
}

method Counter___contract_unsatisfiable__main_EncodedGlobalVariables(globals: Ref)
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Counter_main_EncodedGlobalVariables(globals: Ref)
{
  var c__2: Ref
  c__2 := Counter_Counter_EncodedGlobalVariables(globals)
  // assert
  assert c__2.Counter_val == 0
}

method Counter_incr_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.Counter_val, write)
  ensures acc(diz.Counter_val, write)
  ensures diz.Counter_val == old(diz.Counter_val) + 1
{
  inhale false
}

method Counter___contract_unsatisfiable__internal_incr_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && acc(diz.Counter_val, write)
  // assert
  assert false
  inhale false
}

method Counter_internal_incr_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.Counter_val, write)
  ensures acc(diz.Counter_val, write)
  ensures diz.Counter_val == old(diz.Counter_val) + 1
{
  var __flatten_1__3: Int
  __flatten_1__3 := diz.Counter_val + 1
  diz.Counter_val := __flatten_1__3
}

method Counter_incr_by_n_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, n: Int)
  requires diz != null
  requires acc(diz.Counter_val, write)
  requires 0 <= n
  ensures acc(diz.Counter_val, write)
  ensures diz.Counter_val == old(diz.Counter_val) + n
{
  inhale false
}

method Counter___contract_unsatisfiable__internal_incr_by_n_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, n: Int)
  requires diz != null
{
  inhale true && (acc(diz.Counter_val, write) && 0 <= n)
  // assert
  assert false
  inhale false
}

method Counter_internal_incr_by_n_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, n: Int)
  requires diz != null
  requires acc(diz.Counter_val, write)
  requires 0 <= n
  ensures acc(diz.Counter_val, write)
  ensures diz.Counter_val == old(diz.Counter_val) + n
{
  var tmp__4: Int
  var __flatten_2__5: Int
  tmp__4 := n
  while (0 < tmp__4)
    invariant acc(diz.Counter_val, write)
    invariant diz.Counter_val + tmp__4 == old(diz.Counter_val) + n
    invariant 0 <= tmp__4 
  {
    __flatten_2__5 := diz.Counter_val + 1
    diz.Counter_val := __flatten_2__5
    tmp__4 := tmp__4 - 1
  }
}

method Counter_Counter_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Counter()
  ensures acc(sys__result.Counter_val, write) && sys__result.Counter_val == 0
{
  inhale false
}

method Counter___contract_unsatisfiable__internal_Counter_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Counter_internal_Counter_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Counter()
  ensures acc(sys__result.Counter_val, write) && sys__result.Counter_val == 0
{
  var diz__6: Ref
  diz__6 := new(Counter_val)
  inhale type_of(diz__6) == class_Counter()
  diz__6.Counter_val := 0
  sys__result := diz__6
  // assert
  assert sys__result != null && type_of(sys__result) == class_Counter() && (acc(sys__result.Counter_val, write) && sys__result.Counter_val == 0)
  inhale false
}