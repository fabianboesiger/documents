// Generated on 2021-03-23 at 23:40:02
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_C(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom C_directSuperclass {
    directSuperclass(class_C()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method C_m1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method C___contract_unsatisfiable__internal_m1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method C_internal_m1_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var x__1: Int
  var switch_0_0__2: Int
  var switch_1_1__3: Int
  x__1 := -1
  switch_0_0__2 := 1
  if (switch_0_0__2 == 1) {
    goto switch_0_case_0
  } elseif (switch_0_0__2 == 2) {
    goto switch_0_case_1
  } else {
    goto switch_0_case_default
  }
  label switch_0_case_0
  switch_1_1__3 := 3
  if (switch_1_1__3 == 3) {
    goto switch_1_case_0
  } elseif (switch_1_1__3 == 4) {
    goto switch_1_case_1
  } else {
    goto switch_1_case_default
  }
  label switch_1_case_0
  x__1 := 33
  goto __break_switch_1
  label switch_1_case_1
  x__1 := 44
  goto __break_switch_1
  label switch_1_case_default
  label __break_switch_1
  goto __break_switch_0
  label switch_0_case_1
  x__1 := 22
  goto __break_switch_0
  label switch_0_case_default
  x__1 := 100
  label __break_switch_0
  // assert
  assert x__1 == 33
}

method C_m2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method C___contract_unsatisfiable__internal_m2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method C_internal_m2_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var x__4: Int
  var switch_2_2__5: Int
  x__4 := -1
  switch_2_2__5 := 1
  if (switch_2_2__5 == 1) {
    goto switch_2_case_0
  } elseif (switch_2_2__5 == 2) {
    goto switch_2_case_1
  } else {
    goto switch_2_case_default
  }
  label switch_2_case_0
  x__4 := 11
  goto __break_switch_2
  label switch_2_case_1
  x__4 := 22
  goto __break_switch_2
  label switch_2_case_default
  label __break_switch_2
  // assert
  assert x__4 == 11
}

method C_m3_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method C___contract_unsatisfiable__internal_m3_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method C_internal_m3_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var x__6: Int
  var switch_3_3__7: Int
  x__6 := -1
  switch_3_3__7 := 3
  goto switch_3_case_default
  label switch_3_case_default
  // assert
  assert x__6 == -1
}

method C_m4_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method C___contract_unsatisfiable__internal_m4_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method C_internal_m4_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var x__8: Int
  var switch_4_4__9: Int
  x__8 := -1
  switch_4_4__9 := 3
  goto switch_4_case_default
  label switch_4_case_default
  x__8 := 33
  goto __break_switch_4
  label __break_switch_4
  // assert
  assert x__8 == 33
}

method C_m5_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method C___contract_unsatisfiable__internal_m5_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method C_internal_m5_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var x__10: Int
  var switch_5_5__11: Int
  x__10 := -1
  switch_5_5__11 := 3
  if (switch_5_5__11 == 1) {
    goto switch_5_case_0
  } elseif (switch_5_5__11 == 2) {
    goto switch_5_case_1
  } else {
    goto switch_5_case_default
  }
  label switch_5_case_0
  x__10 := 11
  goto __break_switch_5
  label switch_5_case_1
  x__10 := 22
  goto __break_switch_5
  label switch_5_case_default
  x__10 := 33
  goto __break_switch_5
  label __break_switch_5
  // assert
  assert x__10 == 33
}

method C_pickBetween1And5_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Int)
  requires diz != null
  ensures 1 <= sys__result && sys__result <= 5
{
  inhale false
}

method C_internal_pickBetween1And5_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Int)
  requires diz != null
  ensures 1 <= sys__result && sys__result <= 5
{
  inhale false
}

method C_m6_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method C___contract_unsatisfiable__internal_m6_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method C_internal_m6_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var x__12: Int
  var switch_6_6__13: Int
  x__12 := -1
  switch_6_6__13 := C_pickBetween1And5_EncodedGlobalVariables(diz, globals)
  if (switch_6_6__13 == 0) {
    goto switch_6_case_0
  } elseif (switch_6_6__13 == 1 || switch_6_6__13 == 2 || switch_6_6__13 == 3 || switch_6_6__13 == 4 || switch_6_6__13 == 5) {
    goto switch_6_case_1
  } elseif (switch_6_6__13 == 6) {
    goto switch_6_case_2
  } else {
    goto switch_6_case_default
  }
  label switch_6_case_0
  x__12 := 11
  goto __break_switch_6
  label switch_6_case_1
  x__12 := 22
  goto __break_switch_6
  label switch_6_case_2
  x__12 := 33
  goto __break_switch_6
  label switch_6_case_default
  label __break_switch_6
  // assert
  assert x__12 == 22
}

method C_m7_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method C___contract_unsatisfiable__internal_m7_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method C_internal_m7_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var x__14: Int
  var switch_7_7__15: Int
  x__14 := -1
  switch_7_7__15 := C_pickBetween1And5_EncodedGlobalVariables(diz, globals)
  if (switch_7_7__15 == 1) {
    goto switch_7_case_0
  } elseif (switch_7_7__15 == 2) {
    goto switch_7_case_1
  } elseif (switch_7_7__15 == 3) {
    goto switch_7_case_2
  } elseif (switch_7_7__15 == 4) {
    goto switch_7_case_3
  } elseif (switch_7_7__15 == 5) {
    goto switch_7_case_4
  } else {
    goto switch_7_case_default
  }
  label switch_7_case_0
  x__14 := x__14 + 1
  label switch_7_case_1
  x__14 := x__14 + 1
  label switch_7_case_2
  x__14 := x__14 + 1
  label switch_7_case_3
  x__14 := x__14 + 1
  label switch_7_case_4
  x__14 := x__14 + 1
  goto __break_switch_7
  label switch_7_case_default
  label __break_switch_7
  // assert
  assert -1 < x__14
}

method C_m8_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method C___contract_unsatisfiable__internal_m8_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method C_internal_m8_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var x__16: Int
  var switch_8_8__17: Int
  x__16 := 0
  switch_8_8__17 := 1
  if (switch_8_8__17 == 0) {
    goto switch_8_case_0
  } elseif (switch_8_8__17 == 1) {
    goto switch_8_case_1
  } elseif (switch_8_8__17 == 2) {
    goto switch_8_case_2
  } else {
    goto switch_8_case_default
  }
  label switch_8_case_0
  x__16 := x__16 + 5
  label switch_8_case_1
  x__16 := x__16 + 20
  label switch_8_case_2
  x__16 := x__16 + 100
  label switch_8_case_default
  // assert
  assert x__16 == 120
}