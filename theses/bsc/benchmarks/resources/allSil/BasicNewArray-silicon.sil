// Generated on 2021-03-23 at 23:29:24
domain TYPE {
  
  unique function class_Test(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Test_directSuperclass {
    directSuperclass(class_Test()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

domain VCTArray[CT] {
  
  function loc(a: VCTArray[CT], i: Int): CT
  
  function alen(a: VCTArray[CT]): Int
  
  function first(r: CT): VCTArray[CT]
  
  function second(r: CT): Int
  
  axiom all_diff {
    (forall a: VCTArray[CT], i: Int :: { (loc(a, i): CT) } (first((loc(a, i): CT)): VCTArray[CT]) == a && (second((loc(a, i): CT)): Int) == i)
  }
  
  axiom len_nonneg {
    (forall a: VCTArray[CT] :: { (alen(a): Int) } (alen(a): Int) >= 0)
  }
}

domain VCTOption[T] {
  
  function VCTNone(): VCTOption[T]
  
  function VCTSome(t: T): VCTOption[T]
  
  function getVCTOption(o: VCTOption[T]): T
  
  function getVCTOptionOrElse(o: VCTOption[T], default: T): T
  
  axiom not_equal_vct {
    (forall x: T :: { (VCTSome(x): VCTOption[T]) } (VCTNone(): VCTOption[T]) != (VCTSome(x): VCTOption[T]))
  }
  
  axiom get_axiom_vct {
    (forall x: T :: { (getVCTOption((VCTSome(x): VCTOption[T])): T) } (getVCTOption((VCTSome(x): VCTOption[T])): T) == x)
  }
  
  axiom get_axiom_vct_2 {
    (forall x: VCTOption[T] :: { (VCTSome((getVCTOption(x): T)): VCTOption[T]) } (VCTSome((getVCTOption(x): T)): VCTOption[T]) == x)
  }
  
  axiom get_or_else_axiom_1 {
    (forall val: T, default: T :: { (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) == val)
  }
  
  axiom get_or_else_axiom_2 {
    (forall default: T :: { (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) == default)
  }
}

//  a field 
field Integer__item: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


function getVCTOption1(x: VCTOption[VCTArray[VCTArray[VCTArray[Ref]]]]): VCTArray[VCTArray[VCTArray[Ref]]]
  requires x != (VCTNone(): VCTOption[VCTArray[VCTArray[VCTArray[Ref]]]])
{
  (getVCTOption(x): VCTArray[VCTArray[VCTArray[Ref]]])
}

method Test___contract_unsatisfiable__test_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Test_test_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var x__1: VCTOption[VCTArray[VCTArray[VCTArray[Ref]]]]
  x__1 := array_new_Option_Array_Array_Array_Cell_Integer______Integer_Integer_Integer(5, 6, 7)
}

method array_new_Option_Array_Array_Array_Cell_Integer______Integer_Integer_Integer(size0: Int, size1: Int, size2: Int) returns (sys__result: VCTOption[VCTArray[VCTArray[VCTArray[Ref]]]])
  ensures sys__result != (VCTNone(): VCTOption[VCTArray[VCTArray[VCTArray[Ref]]]])
  ensures (alen(getVCTOption1(sys__result)): Int) == size0
  ensures (forall i0: Int :: { (loc(getVCTOption1(sys__result), i0): VCTArray[VCTArray[Ref]]) } 0 <= i0 && i0 < size0 ==> (alen((loc(getVCTOption1(sys__result), i0): VCTArray[VCTArray[Ref]])): Int) == size1)
  ensures (forall i0: Int, i1: Int :: { (loc((loc(getVCTOption1(sys__result), i0): VCTArray[VCTArray[Ref]]), i1): VCTArray[Ref]) } true && (0 <= i0 && i0 < size0 && (0 <= i1 && i1 < size1)) ==> (alen((loc((loc(getVCTOption1(sys__result), i0): VCTArray[VCTArray[Ref]]), i1): VCTArray[Ref])): Int) == size2)
  ensures (forall i0: Int, i1: Int, i2: Int :: { (loc((loc((loc(getVCTOption1(sys__result), i0): VCTArray[VCTArray[Ref]]), i1): VCTArray[Ref]), i2): Ref).Integer__item } true && true && (0 <= i0 && i0 < size0 && (0 <= i1 && i1 < size1) && (0 <= i2 && i2 < size2)) ==> acc((loc((loc((loc(getVCTOption1(sys__result), i0): VCTArray[VCTArray[Ref]]), i1): VCTArray[Ref]), i2): Ref).Integer__item, write))
  ensures (forall i0: Int, i1: Int, i2: Int :: { (loc((loc((loc(getVCTOption1(sys__result), i0): VCTArray[VCTArray[Ref]]), i1): VCTArray[Ref]), i2): Ref).Integer__item } true && true && (0 <= i0 && i0 < size0 && (0 <= i1 && i1 < size1) && (0 <= i2 && i2 < size2)) ==> (loc((loc((loc(getVCTOption1(sys__result), i0): VCTArray[VCTArray[Ref]]), i1): VCTArray[Ref]), i2): Ref).Integer__item == 0)
{
  inhale false
}