// Generated on 2021-03-23 at 23:38:43
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_Roster(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Roster_directSuperclass {
    directSuperclass(class_Roster()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field Roster_id: Int

//  a field 
field Roster_grade: Int

//  a field 
field Roster_next: Ref

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


predicate Roster_ids_and_links_EncodedGlobalVariables(diz: Ref, globals: Ref) {
  diz != null && (acc(diz.Roster_id, write) && acc(diz.Roster_next, 1 / 2) && (diz.Roster_next != null ==> acc(Roster_ids_and_links_EncodedGlobalVariables(diz.Roster_next, globals), write)))
}

predicate Roster_grades_and_links_EncodedGlobalVariables(diz: Ref, globals: Ref) {
  diz != null && (acc(diz.Roster_grade, write) && acc(diz.Roster_next, 1 / 2) && (diz.Roster_next != null ==> acc(Roster_grades_and_links_EncodedGlobalVariables(diz.Roster_next, globals), write)))
}

predicate Roster_state_EncodedGlobalVariables(diz: Ref, globals: Ref) {
  diz != null && (acc(Roster_ids_and_links_EncodedGlobalVariables(diz, globals), write) && acc(Roster_grades_and_links_EncodedGlobalVariables(diz, globals), write))
}

method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method Roster___contract_unsatisfiable__Roster_EncodedGlobalVariables_Integer_Integer_Roster(diz: Ref, globals: Ref, i: Int, g: Int, n: Ref)
  requires diz != null
{
  inhale true && (n != null ==> acc(Roster_state_EncodedGlobalVariables(n, globals), write))
  // assert
  assert false
  inhale false
}

method Roster_Roster_EncodedGlobalVariables_Integer_Integer_Roster(globals: Ref, i: Int, g: Int, n: Ref) returns (sys__result: Ref)
  requires n != null ==> acc(Roster_state_EncodedGlobalVariables(n, globals), write)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Roster()
  ensures acc(Roster_state_EncodedGlobalVariables(sys__result, globals), write)
{
  var diz__1: Ref
  diz__1 := new(Roster_id, Roster_grade, Roster_next)
  inhale type_of(diz__1) == class_Roster()
  diz__1.Roster_id := i
  diz__1.Roster_grade := g
  diz__1.Roster_next := n
  if (n != null) {
    unfold acc(Roster_state_EncodedGlobalVariables(n, globals), write)
  }
  fold acc(Roster_ids_and_links_EncodedGlobalVariables(diz__1, globals), write)
  fold acc(Roster_grades_and_links_EncodedGlobalVariables(diz__1, globals), write)
  fold acc(Roster_state_EncodedGlobalVariables(diz__1, globals), write)
  sys__result := diz__1
  // assert
  assert sys__result != null && type_of(sys__result) == class_Roster() && acc(Roster_state_EncodedGlobalVariables(sys__result, globals), write)
  inhale false
}

method Roster___contract_unsatisfiable__updateGrade_EncodedGlobalVariables_Integer_Integer(diz: Ref, globals: Ref, id: Int, grade: Int)
  requires diz != null
{
  inhale true && acc(Roster_state_EncodedGlobalVariables(diz, globals), write)
  // assert
  assert false
  inhale false
}

method Roster_updateGrade_EncodedGlobalVariables_Integer_Integer(diz: Ref, globals: Ref, id: Int, grade: Int)
  requires diz != null
  requires acc(Roster_state_EncodedGlobalVariables(diz, globals), write)
  ensures acc(Roster_state_EncodedGlobalVariables(diz, globals), write)
{
  unfold acc(Roster_state_EncodedGlobalVariables(diz, globals), write)
  unfold acc(Roster_ids_and_links_EncodedGlobalVariables(diz, globals), write)
  unfold acc(Roster_grades_and_links_EncodedGlobalVariables(diz, globals), write)
  if (diz.Roster_id == id) {
    diz.Roster_grade := grade
  } elseif (diz.Roster_next != null) {
    fold acc(Roster_state_EncodedGlobalVariables(diz.Roster_next, globals), write)
    Roster_updateGrade_EncodedGlobalVariables_Integer_Integer(diz.Roster_next, globals, id, grade)
    unfold acc(Roster_state_EncodedGlobalVariables(diz.Roster_next, globals), write)
  }
  fold acc(Roster_ids_and_links_EncodedGlobalVariables(diz, globals), write)
  fold acc(Roster_grades_and_links_EncodedGlobalVariables(diz, globals), write)
  fold acc(Roster_state_EncodedGlobalVariables(diz, globals), write)
}

method Roster___contract_unsatisfiable__contains_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, id: Int) returns (sys__result: Bool)
  requires diz != null
{
  inhale true && acc(Roster_ids_and_links_EncodedGlobalVariables(diz, globals), write)
  // assert
  assert false
  inhale false
}

method Roster_contains_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, id: Int) returns (sys__result: Bool)
  requires diz != null
  requires acc(Roster_ids_and_links_EncodedGlobalVariables(diz, globals), write)
  ensures acc(Roster_ids_and_links_EncodedGlobalVariables(diz, globals), write)
{
  var b__2: Bool
  unfold acc(Roster_ids_and_links_EncodedGlobalVariables(diz, globals), write)
  b__2 := diz.Roster_id == id
  if (!b__2 && diz.Roster_next != null) {
    b__2 := Roster_contains_EncodedGlobalVariables_Integer(diz.Roster_next, globals, id)
  }
  fold acc(Roster_ids_and_links_EncodedGlobalVariables(diz, globals), write)
  sys__result := b__2
  // assert
  assert acc(Roster_ids_and_links_EncodedGlobalVariables(diz, globals), write)
  inhale false
}