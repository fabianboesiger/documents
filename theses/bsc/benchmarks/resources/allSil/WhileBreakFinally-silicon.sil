// Generated on 2021-03-23 at 23:42:13
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class___break_loop_0_ex(): TYPE
  
  unique function class_C(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom __break_loop_0_ex_directSuperclass {
    directSuperclass(class___break_loop_0_ex()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom C_directSuperclass {
    directSuperclass(class_C()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method __break_loop_0_ex___break_loop_0_ex() returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class___break_loop_0_ex()
{
  var diz__1: Ref
  diz__1 := new()
  inhale type_of(diz__1) == class___break_loop_0_ex()
  label method_end___break_loop_0_ex_0
  sys__result := diz__1
  // assert
  assert sys__result != null && type_of(sys__result) == class___break_loop_0_ex()
  inhale false
}

method C_m_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale false
}

method C___contract_unsatisfiable__internal_m_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__internal_m_1
}

method C_internal_m_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var ucv_0__7: Ref
  var old__sys_exc_8__6: Ref
  var _old_sys__exc_0__5: Ref
  var sys__exc__2: Ref
  var __flatten_1__3: Ref
  var old__sys_exc_5__4: Ref
  sys__exc__2 := null
  old__sys_exc_5__4 := sys__exc__2
  _old_sys__exc_0__5 := sys__exc__2
  while (true)
    invariant _old_sys__exc_0__5 == sys__exc__2 
  {
    old__sys_exc_8__6 := sys__exc__2
    __flatten_1__3 := __break_loop_0_ex___break_loop_0_ex()
    sys__exc__2 := __flatten_1__3
    goto finally_6
    goto finally_6
    label finally_6
    if (sys__exc__2 != old__sys_exc_8__6) {
      goto catch_3
    }
    goto try_end_7
    label try_end_7
  }
  goto try_end_4
  label catch_3
  if (!instanceof_TYPE_TYPE(type_of(sys__exc__2), class___break_loop_0_ex())) {
    goto method_end_internal_m_2
  }
  inhale ucv_0__7 == sys__exc__2
  sys__exc__2 := null
  // assert
  assert sys__exc__2 == null
  sys__exc__2 := old__sys_exc_5__4
  goto try_end_4
  label try_end_4
  label method_end_internal_m_2
  // assert
  assert sys__exc__2 == null
}