// Generated on 2021-03-23 at 23:40:05
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_SwapInteger(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom SwapInteger_directSuperclass {
    directSuperclass(class_SwapInteger()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field SwapInteger_F: Int

//  a field 
field SwapInteger_G: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method SwapInteger_n_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.SwapInteger_F, write)
  requires acc(diz.SwapInteger_G, write)
  ensures acc(diz.SwapInteger_F, write)
  ensures acc(diz.SwapInteger_G, write)
  ensures diz.SwapInteger_F == old(diz.SwapInteger_G) && diz.SwapInteger_G == old(diz.SwapInteger_F)
{
  inhale false
}

method SwapInteger___contract_unsatisfiable__internal_n_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && (acc(diz.SwapInteger_F, write) && acc(diz.SwapInteger_G, write))
  // assert
  assert false
  inhale false
}

method SwapInteger_internal_n_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.SwapInteger_F, write)
  requires acc(diz.SwapInteger_G, write)
  ensures acc(diz.SwapInteger_F, write)
  ensures acc(diz.SwapInteger_G, write)
  ensures diz.SwapInteger_F == old(diz.SwapInteger_G) && diz.SwapInteger_G == old(diz.SwapInteger_F)
{
  var tmp__1: Int
  var __flatten_1__2: Int
  tmp__1 := diz.SwapInteger_F
  __flatten_1__2 := diz.SwapInteger_G
  diz.SwapInteger_F := __flatten_1__2
  diz.SwapInteger_G := tmp__1
}

method SwapInteger_twice_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.SwapInteger_F, write)
  requires acc(diz.SwapInteger_G, write)
  ensures acc(diz.SwapInteger_F, write)
  ensures acc(diz.SwapInteger_G, write)
  ensures diz.SwapInteger_F == old(diz.SwapInteger_F) && diz.SwapInteger_G == old(diz.SwapInteger_G)
{
  inhale false
}

method SwapInteger___contract_unsatisfiable__internal_twice_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && (acc(diz.SwapInteger_F, write) && acc(diz.SwapInteger_G, write))
  // assert
  assert false
  inhale false
}

method SwapInteger_internal_twice_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.SwapInteger_F, write)
  requires acc(diz.SwapInteger_G, write)
  ensures acc(diz.SwapInteger_F, write)
  ensures acc(diz.SwapInteger_G, write)
  ensures diz.SwapInteger_F == old(diz.SwapInteger_F) && diz.SwapInteger_G == old(diz.SwapInteger_G)
{
  SwapInteger_n_EncodedGlobalVariables(diz, globals)
  SwapInteger_n_EncodedGlobalVariables(diz, globals)
}

method SwapInteger_wrong_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.SwapInteger_F, write)
  requires acc(diz.SwapInteger_G, write)
  ensures acc(diz.SwapInteger_F, write)
  ensures acc(diz.SwapInteger_G, write)
  ensures diz.SwapInteger_F == old(diz.SwapInteger_F) && diz.SwapInteger_G == old(diz.SwapInteger_G)
{
  inhale false
}

method SwapInteger___contract_unsatisfiable__internal_wrong_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && (acc(diz.SwapInteger_F, write) && acc(diz.SwapInteger_G, write))
  // assert
  assert false
  inhale false
}

method SwapInteger_internal_wrong_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
  requires acc(diz.SwapInteger_F, write)
  requires acc(diz.SwapInteger_G, write)
  ensures acc(diz.SwapInteger_F, write)
  ensures acc(diz.SwapInteger_G, write)
  ensures diz.SwapInteger_F == old(diz.SwapInteger_F) && diz.SwapInteger_G == old(diz.SwapInteger_G)
{
  SwapInteger_n_EncodedGlobalVariables(diz, globals)
}