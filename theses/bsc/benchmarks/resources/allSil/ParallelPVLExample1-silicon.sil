// Generated on 2021-03-23 at 23:37:26
domain TYPE {
  
  unique function class_test(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom test_directSuperclass {
    directSuperclass(class_test()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

domain VCTArray[CT] {
  
  function loc(a: VCTArray[CT], i: Int): CT
  
  function alen(a: VCTArray[CT]): Int
  
  function first(r: CT): VCTArray[CT]
  
  function second(r: CT): Int
  
  axiom all_diff {
    (forall a: VCTArray[CT], i: Int :: { (loc(a, i): CT) } (first((loc(a, i): CT)): VCTArray[CT]) == a && (second((loc(a, i): CT)): Int) == i)
  }
  
  axiom len_nonneg {
    (forall a: VCTArray[CT] :: { (alen(a): Int) } (alen(a): Int) >= 0)
  }
}

domain VCTOption[T] {
  
  function VCTNone(): VCTOption[T]
  
  function VCTSome(t: T): VCTOption[T]
  
  function getVCTOption(o: VCTOption[T]): T
  
  function getVCTOptionOrElse(o: VCTOption[T], default: T): T
  
  axiom not_equal_vct {
    (forall x: T :: { (VCTSome(x): VCTOption[T]) } (VCTNone(): VCTOption[T]) != (VCTSome(x): VCTOption[T]))
  }
  
  axiom get_axiom_vct {
    (forall x: T :: { (getVCTOption((VCTSome(x): VCTOption[T])): T) } (getVCTOption((VCTSome(x): VCTOption[T])): T) == x)
  }
  
  axiom get_axiom_vct_2 {
    (forall x: VCTOption[T] :: { (VCTSome((getVCTOption(x): T)): VCTOption[T]) } (VCTSome((getVCTOption(x): T)): VCTOption[T]) == x)
  }
  
  axiom get_or_else_axiom_1 {
    (forall val: T, default: T :: { (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) == val)
  }
  
  axiom get_or_else_axiom_2 {
    (forall default: T :: { (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) == default)
  }
}

//  a field 
field Integer__item: Int

function test_before_fst__snd__Integer_Integer(diz: Ref, x_i: Int, y_j: Int): Bool
  requires diz != null
{
  x_i == y_j
}

function test_before_snd__trd__Integer_Integer(diz: Ref, x_j: Int, y_k: Int): Bool
  requires diz != null
{
  x_j == y_k
}

function test_before_fst__trd__Integer_Integer(diz: Ref, x_i: Int, y_k: Int): Bool
  requires diz != null
{
  test_before_fst__snd__Integer_Integer(diz, x_i, y_k)
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


function getVCTOption1(x: VCTOption[VCTArray[Ref]]): VCTArray[Ref]
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
{
  (getVCTOption(x): VCTArray[Ref])
}

method test___contract_unsatisfiable__main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method test_loop_body_4_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, z: VCTOption[VCTArray[Ref]], i: Int, x: VCTOption[VCTArray[Ref]], y: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires y != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires z != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  requires 0 <= i && i < 10
  requires acc((loc(getVCTOption1(x), i): Ref).Integer__item, write)
  requires acc((loc(getVCTOption1(z), i): Ref).Integer__item, 1 / 20)
  ensures x != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures y != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures z != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  ensures 0 <= i && i < 10
  ensures acc((loc(getVCTOption1(x), i): Ref).Integer__item, write)
  ensures acc((loc(getVCTOption1(z), i): Ref).Integer__item, 1 / 20)
{
  var __flatten_1__1: Ref
  var __flatten_2__2: Int
  var __flatten_3__3: Ref
  var __flatten_4__4: Ref
  __flatten_1__1 := (loc(getVCTOption1(x), i): Ref)
  __flatten_3__3 := (loc(getVCTOption1(z), i): Ref)
  __flatten_2__2 := __flatten_3__3.Integer__item
  __flatten_1__1.Integer__item := __flatten_2__2
  __flatten_4__4 := (loc(getVCTOption1(x), i): Ref)
  __flatten_4__4.Integer__item := 0
}

method test_block_check_2_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, x: VCTOption[VCTArray[Ref]], y: VCTOption[VCTArray[Ref]], z: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires y != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires z != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  requires (forall i: Int :: { (loc(getVCTOption1(x), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(x), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(z), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(z), i): Ref).Integer__item, 1 / 20))
  ensures x != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures y != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures z != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  ensures (forall i: Int :: { (loc(getVCTOption1(x), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(x), i): Ref).Integer__item, write))
  ensures (forall i: Int :: { (loc(getVCTOption1(z), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(z), i): Ref).Integer__item, 1 / 20))
{
  inhale false
}

method test_loop_body_5_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer(diz: Ref, x: VCTOption[VCTArray[Ref]], y: VCTOption[VCTArray[Ref]], z: VCTOption[VCTArray[Ref]], j: Int)
  requires diz != null
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires y != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires z != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  requires 0 <= j && j < 10
  requires acc((loc(getVCTOption1(y), j): Ref).Integer__item, write)
  ensures x != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures y != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures z != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  ensures 0 <= j && j < 10
  ensures acc((loc(getVCTOption1(y), j): Ref).Integer__item, write)
{
  var __flatten_5__5: Ref
  __flatten_5__5 := (loc(getVCTOption1(y), j): Ref)
  __flatten_5__5.Integer__item := 0
}

method test_block_check_3_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, x: VCTOption[VCTArray[Ref]], y: VCTOption[VCTArray[Ref]], z: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires y != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires z != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  requires (forall j: Int :: { (loc(getVCTOption1(y), j): Ref) } 0 <= j && j < 10 ==> acc((loc(getVCTOption1(y), j): Ref).Integer__item, write))
  ensures x != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures y != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures z != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  ensures (forall j: Int :: { (loc(getVCTOption1(y), j): Ref) } 0 <= j && j < 10 ==> acc((loc(getVCTOption1(y), j): Ref).Integer__item, write))
{
  inhale false
}

method test_loop_body_6_Option$Array$Cell$Integer$$$_Integer_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, y: VCTOption[VCTArray[Ref]], k: Int, x: VCTOption[VCTArray[Ref]], z: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires y != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires z != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  requires 0 <= k && k < 10
  requires acc((loc(getVCTOption1(z), k): Ref).Integer__item, write)
  requires acc((loc(getVCTOption1(y), k): Ref).Integer__item, 1 / 2)
  ensures x != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures y != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures z != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  ensures 0 <= k && k < 10
  ensures acc((loc(getVCTOption1(z), k): Ref).Integer__item, write)
  ensures acc((loc(getVCTOption1(y), k): Ref).Integer__item, 1 / 2)
{
  var __flatten_6__6: Ref
  var __flatten_7__7: Int
  var __flatten_8__8: Ref
  __flatten_6__6 := (loc(getVCTOption1(z), k): Ref)
  __flatten_8__8 := (loc(getVCTOption1(y), k): Ref)
  __flatten_7__7 := __flatten_8__8.Integer__item
  __flatten_6__6.Integer__item := __flatten_7__7
}

method test_block_check_4_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, x: VCTOption[VCTArray[Ref]], y: VCTOption[VCTArray[Ref]], z: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires y != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires z != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  requires (forall k: Int :: { (loc(getVCTOption1(z), k): Ref) } 0 <= k && k < 10 ==> acc((loc(getVCTOption1(z), k): Ref).Integer__item, write))
  requires (forall k: Int :: { (loc(getVCTOption1(y), k): Ref) } 0 <= k && k < 10 ==> acc((loc(getVCTOption1(y), k): Ref).Integer__item, 1 / 2))
  ensures x != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures y != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures z != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  ensures (forall k: Int :: { (loc(getVCTOption1(z), k): Ref) } 0 <= k && k < 10 ==> acc((loc(getVCTOption1(z), k): Ref).Integer__item, write))
  ensures (forall k: Int :: { (loc(getVCTOption1(y), k): Ref) } 0 <= k && k < 10 ==> acc((loc(getVCTOption1(y), k): Ref).Integer__item, 1 / 2))
{
  inhale false
}

method test_check_fst__snd__Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer_Integer(diz: Ref, x: VCTOption[VCTArray[Ref]], y: VCTOption[VCTArray[Ref]], z: VCTOption[VCTArray[Ref]], x1: Int, x2: Int)
  requires diz != null
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires y != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires z != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  requires (forall i: Int :: { (loc(getVCTOption1(x), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(x), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(y), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(y), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(z), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(z), i): Ref).Integer__item, write))
  requires 0 <= x1
  requires x1 < 10
  requires 0 <= x2
  requires x2 < 10
{
  var __flatten_9__9: Bool
  __flatten_9__9 := test_before_fst__snd__Integer_Integer(diz, x1, x2)
  if (!__flatten_9__9) {
    // assert
    assert acc((loc(getVCTOption1(x), x1): Ref).Integer__item, write) && acc((loc(getVCTOption1(z), x1): Ref).Integer__item, 1 / 20) && acc((loc(getVCTOption1(y), x2): Ref).Integer__item, write)
  }
}

method test_check_snd__trd__Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer_Integer(diz: Ref, x: VCTOption[VCTArray[Ref]], y: VCTOption[VCTArray[Ref]], z: VCTOption[VCTArray[Ref]], x1: Int, x2: Int)
  requires diz != null
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires y != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires z != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  requires (forall i: Int :: { (loc(getVCTOption1(x), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(x), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(y), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(y), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(z), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(z), i): Ref).Integer__item, write))
  requires 0 <= x1
  requires x1 < 10
  requires 0 <= x2
  requires x2 < 10
{
  var __flatten_10__10: Bool
  __flatten_10__10 := test_before_snd__trd__Integer_Integer(diz, x1, x2)
  if (!__flatten_10__10) {
    // assert
    assert acc((loc(getVCTOption1(y), x1): Ref).Integer__item, write) && acc((loc(getVCTOption1(z), x2): Ref).Integer__item, write) && acc((loc(getVCTOption1(y), x2): Ref).Integer__item, 1 / 2)
  }
}

method test_check_fst__trd__Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Integer_Integer(diz: Ref, x: VCTOption[VCTArray[Ref]], y: VCTOption[VCTArray[Ref]], z: VCTOption[VCTArray[Ref]], x1: Int, x2: Int)
  requires diz != null
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires y != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires z != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  requires (forall i: Int :: { (loc(getVCTOption1(x), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(x), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(y), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(y), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(z), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(z), i): Ref).Integer__item, write))
  requires 0 <= x1
  requires x1 < 10
  requires 0 <= x2
  requires x2 < 10
{
  var __flatten_11__11: Bool
  __flatten_11__11 := test_before_fst__trd__Integer_Integer(diz, x1, x2)
  if (!__flatten_11__11) {
    // assert
    assert acc((loc(getVCTOption1(x), x1): Ref).Integer__item, write) && acc((loc(getVCTOption1(z), x1): Ref).Integer__item, 1 / 20) && acc((loc(getVCTOption1(z), x2): Ref).Integer__item, write) && acc((loc(getVCTOption1(y), x2): Ref).Integer__item, 1 / 2)
  }
}

method test_parrallel_region_main_1_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz: Ref, x: VCTOption[VCTArray[Ref]], y: VCTOption[VCTArray[Ref]], z: VCTOption[VCTArray[Ref]])
  requires diz != null
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires y != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires z != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  requires (forall i: Int :: { (loc(getVCTOption1(x), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(x), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(y), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(y), i): Ref).Integer__item, write))
  requires (forall i: Int :: { (loc(getVCTOption1(z), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(z), i): Ref).Integer__item, write))
  ensures x != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures y != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures z != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(x)): Int) == 10 && (alen(getVCTOption1(y)): Int) == 10 && (alen(getVCTOption1(z)): Int) == 10
  ensures (forall i: Int :: { (loc(getVCTOption1(x), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(x), i): Ref).Integer__item, write))
  ensures (forall i: Int :: { (loc(getVCTOption1(y), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(y), i): Ref).Integer__item, write))
  ensures (forall i: Int :: { (loc(getVCTOption1(z), i): Ref) } 0 <= i && i < 10 ==> acc((loc(getVCTOption1(z), i): Ref).Integer__item, write))
{
  test_block_check_2_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz, x, y, z)
  test_block_check_3_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz, x, y, z)
  test_block_check_4_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz, x, y, z)
}

method test_main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var x__12: VCTOption[VCTArray[Ref]]
  var y__13: VCTOption[VCTArray[Ref]]
  var z__14: VCTOption[VCTArray[Ref]]
  x__12 := array_new_Option_Array_Cell_Integer____Integer(10)
  y__13 := array_new_Option_Array_Cell_Integer____Integer(10)
  z__14 := array_new_Option_Array_Cell_Integer____Integer(10)
  test_parrallel_region_main_1_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$_Option$Array$Cell$Integer$$$(diz, x__12, y__13, z__14)
}

method array_new_Option_Array_Cell_Integer____Integer(size0: Int) returns (sys__result: VCTOption[VCTArray[Ref]])
  ensures sys__result != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(sys__result)): Int) == size0
  ensures (forall i0: Int :: { (loc(getVCTOption1(sys__result), i0): Ref).Integer__item } 0 <= i0 && i0 < size0 ==> acc((loc(getVCTOption1(sys__result), i0): Ref).Integer__item, write))
  ensures (forall i0: Int :: { (loc(getVCTOption1(sys__result), i0): Ref).Integer__item } 0 <= i0 && i0 < size0 ==> (loc(getVCTOption1(sys__result), i0): Ref).Integer__item == 0)
{
  inhale false
}