// Generated on 2021-03-23 at 23:35:06
domain TYPE {
  
  unique function class_Maps(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Maps_directSuperclass {
    directSuperclass(class_Maps()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain VCTTuple[F, S] {
  
  function vcttuple_tuple(f: F, s: S): VCTTuple[F, S]
  
  function vcttuple_fst(t: VCTTuple[F, S]): F
  
  function vcttuple_snd(t: VCTTuple[F, S]): S
  
  axiom vctTupleFstAx {
    (forall f1: F, s1: S :: { (vcttuple_fst((vcttuple_tuple(f1, s1): VCTTuple[F, S])): F) } (vcttuple_fst((vcttuple_tuple(f1, s1): VCTTuple[F, S])): F) == f1)
  }
  
  axiom vctTupleSndAx {
    (forall f1: F, s1: S :: { (vcttuple_snd((vcttuple_tuple(f1, s1): VCTTuple[F, S])): S) } (vcttuple_snd((vcttuple_tuple(f1, s1): VCTTuple[F, S])): S) == s1)
  }
}

domain VCTMap[K, V] {
  
  function vctmap_keys(m: VCTMap[K, V]): Set[K]
  
  function vctmap_card(m: VCTMap[K, V]): Int
  
  function vctmap_values(m: VCTMap[K, V]): Set[V]
  
  function vctmap_get(m: VCTMap[K, V], k: K): V
  
  function vctmap_items(m: VCTMap[K, V]): Set[VCTTuple[K, V]]
  
  function vctmap_empty(): VCTMap[K, V]
  
  function vctmap_build(m: VCTMap[K, V], k: K, v: V): VCTMap[K, V]
  
  function vctmap_equals(m1: VCTMap[K, V], m2: VCTMap[K, V]): Bool
  
  function vctmap_disjoint(m1: VCTMap[K, V], m2: VCTMap[K, V]): Bool
  
  function vctmap_remove(m: VCTMap[K, V], k: K): VCTMap[K, V]
  
  axiom vctMapCardAx1 {
    (forall m1: VCTMap[K, V] :: { (vctmap_card(m1): Int) } (vctmap_card(m1): Int) >= 0)
  }
  
  axiom vctMapCardAx2 {
    (forall m1: VCTMap[K, V] :: { (vctmap_card(m1): Int) } { |(vctmap_keys(m1): Set[K])| } (vctmap_card(m1): Int) == |(vctmap_keys(m1): Set[K])|)
  }
  
  axiom vctMapValuesAx {
    (forall v1: V, m1: VCTMap[K, V] :: { (v1 in (vctmap_values(m1): Set[V])) } (v1 in (vctmap_values(m1): Set[V])) == (exists k1: K :: true && ((k1 in (vctmap_keys(m1): Set[K])) && (vctmap_get(m1, k1): V) == v1)))
  }
  
  axiom vctMapItemsSizeAx {
    (forall m1: VCTMap[K, V] :: { (vctmap_card(m1): Int) } { |(vctmap_items(m1): Set[VCTTuple[K, V]])| } |(vctmap_items(m1): Set[VCTTuple[K, V]])| == (vctmap_card(m1): Int))
  }
  
  axiom vctMapItemsKeysAx {
    (forall t1: VCTTuple[K, V], m1: VCTMap[K, V] :: { (vctmap_get(m1, (vcttuple_fst(t1): K)): V) } { (t1 in (vctmap_items(m1): Set[VCTTuple[K, V]])) } (t1 in (vctmap_items(m1): Set[VCTTuple[K, V]])) == (((vcttuple_fst(t1): K) in (vctmap_keys(m1): Set[K])) && (vctmap_get(m1, (vcttuple_fst(t1): K)): V) == (vcttuple_snd(t1): V)))
  }
  
  axiom vctMapEmptyKeyAx {
    (forall k1: K :: { (k1 in (vctmap_keys((vctmap_empty(): VCTMap[K, Int])): Set[K])) } !((k1 in (vctmap_keys((vctmap_empty(): VCTMap[K, Int])): Set[K]))) && |(vctmap_keys((vctmap_empty(): VCTMap[Int, Int])): Set[Int])| == 0)
  }
  
  axiom vctMapEmptyValueAx {
    (forall v1: V :: { (v1 in (vctmap_values((vctmap_empty(): VCTMap[Int, V])): Set[V])) } !((v1 in (vctmap_values((vctmap_empty(): VCTMap[Int, V])): Set[V]))) && |(vctmap_values((vctmap_empty(): VCTMap[Int, Int])): Set[Int])| == 0)
  }
  
  axiom vctMapEmptyCardAx1 {
    (forall m1: VCTMap[K, V] :: { (vctmap_card(m1): Int) } ((vctmap_card(m1): Int) == 0) == (m1 == (vctmap_empty(): VCTMap[K, V])))
  }
  
  axiom vctMapEmptyCardAx2 {
    (forall m1: VCTMap[K, V] :: { (vctmap_card(m1): Int) } (vctmap_card(m1): Int) != 0 ==> (exists k1: K :: true && (k1 in (vctmap_keys(m1): Set[K]))))
  }
  
  axiom vctMapBuildAx0 {
    (forall k1: K, v1: V, m1: VCTMap[K, V] :: { (vctmap_build(m1, k1, v1): VCTMap[K, V]) } (k1 in (vctmap_keys((vctmap_build(m1, k1, v1): VCTMap[K, V])): Set[K])) && (vctmap_get((vctmap_build(m1, k1, v1): VCTMap[K, V]), k1): V) == v1)
  }
  
  axiom vctMapBuildAx1 {
    (forall k1: K, k2: K, v1: V, m1: VCTMap[K, V] :: { (k2 in (vctmap_keys((vctmap_build(m1, k1, v1): VCTMap[K, V])): Set[K])) } { (vctmap_get((vctmap_build(m1, k1, v1): VCTMap[K, V]), k2): V) } k1 == k2 ==> (k2 in (vctmap_keys((vctmap_build(m1, k1, v1): VCTMap[K, V])): Set[K])) && (vctmap_get((vctmap_build(m1, k1, v1): VCTMap[K, V]), k2): V) == v1)
  }
  
  axiom vctMapBuild1Dot5Ax {
    (forall k1: K, k2: K, v1: V, m1: VCTMap[K, V] :: { (k2 in (vctmap_keys((vctmap_build(m1, k1, v1): VCTMap[K, V])): Set[K])) } { (vctmap_get((vctmap_build(m1, k1, v1): VCTMap[K, V]), k1): V),(vctmap_get(m1, k2): V) } k1 != k2 ==> (k2 in (vctmap_keys((vctmap_build(m1, k1, v1): VCTMap[K, V])): Set[K])) == (k2 in (vctmap_keys(m1): Set[K])) && (vctmap_get((vctmap_build(m1, k1, v1): VCTMap[K, V]), k2): V) == (vctmap_get(m1, k2): V))
  }
  
  axiom vctMapBuildAx2 {
    (forall k1: K, v1: V, m1: VCTMap[K, V] :: { (vctmap_card((vctmap_build(m1, k1, v1): VCTMap[K, V])): Int) } (k1 in (vctmap_keys(m1): Set[K])) ==> (vctmap_card((vctmap_build(m1, k1, v1): VCTMap[K, V])): Int) == (vctmap_card(m1): Int))
  }
  
  axiom vctMapBuildAx3 {
    (forall k1: K, v1: V, m1: VCTMap[K, V] :: { (vctmap_card((vctmap_build(m1, k1, v1): VCTMap[K, V])): Int) } !((k1 in (vctmap_keys(m1): Set[K]))) ==> (vctmap_card((vctmap_build(m1, k1, v1): VCTMap[K, V])): Int) == (vctmap_card(m1): Int) + 1)
  }
  
  axiom vctMapEqualsAx1 {
    (forall m1: VCTMap[K, V], m2: VCTMap[K, V] :: { (vctmap_equals(m1, m2): Bool) } (vctmap_equals(m1, m2): Bool) == ((vctmap_keys(m1): Set[K]) == (vctmap_keys(m2): Set[K]) && (forall k: K :: { (vctmap_get(m1, k): V),(vctmap_get(m2, k): V) } (k in (vctmap_keys(m1): Set[K])) ==> (vctmap_get(m1, k): V) == (vctmap_get(m2, k): V))))
  }
  
  axiom vctMapEqualsAx2 {
    (forall m1: VCTMap[K, V], m2: VCTMap[K, V] :: { (vctmap_equals(m1, m2): Bool) } (vctmap_equals(m1, m2): Bool) == (m1 == m2))
  }
  
  axiom vctMapDisjointAx1 {
    (forall m1: VCTMap[K, V], m2: VCTMap[K, V] :: { (vctmap_disjoint(m1, m2): Bool) } (vctmap_disjoint(m1, m2): Bool) == (forall k: K :: { (k in (vctmap_keys(m1): Set[K])) } { (k in (vctmap_keys(m2): Set[K])) } !((k in (vctmap_keys(m1): Set[K]))) || !((k in (vctmap_keys(m2): Set[K])))))
  }
  
  axiom vctMapRemoveAx1 {
    (forall m: VCTMap[K, V], k: K :: { (vctmap_remove(m, k): VCTMap[K, V]) } !((k in (vctmap_keys((vctmap_remove(m, k): VCTMap[K, V])): Set[K]))))
  }
  
  axiom vctMapRemoveAx2 {
    (forall m: VCTMap[K, V], k: K :: { (vctmap_remove(m, k): VCTMap[K, V]) } (k in (vctmap_keys(m): Set[K])) ==> (vctmap_get((vctmap_remove(m, k): VCTMap[K, V]), k): V) != (vctmap_get(m, k): V))
  }
  
  axiom vctMapRemoveAx3 {
    (forall m: VCTMap[K, V], k1: K, k2: K :: { (k2 in (vctmap_keys((vctmap_remove(m, k1): VCTMap[K, V])): Set[K])) } { (vctmap_get((vctmap_remove(m, k1): VCTMap[K, V]), k2): V) } k1 != k2 ==> (k2 in (vctmap_keys((vctmap_remove(m, k1): VCTMap[K, V])): Set[K])) == (k2 in (vctmap_keys(m): Set[K])) && (vctmap_get((vctmap_remove(m, k1): VCTMap[K, V]), k2): V) == (vctmap_get(m, k2): V))
  }
  
  axiom vctMapRemoveAx4 {
    (forall m: VCTMap[K, V], k: K :: { (vctmap_remove(m, k): VCTMap[K, V]) } (k in (vctmap_keys(m): Set[K])) ==> (vctmap_card(m): Int) - 1 == (vctmap_card((vctmap_remove(m, k): VCTMap[K, V])): Int))
  }
  
  axiom vctMapRemoveAx5 {
    (forall m: VCTMap[K, V], k: K :: { (vctmap_remove(m, k): VCTMap[K, V]) } !((k in (vctmap_keys(m): Set[K]))) ==> (vctmap_card(m): Int) == (vctmap_card((vctmap_remove(m, k): VCTMap[K, V])): Int))
  }
  
  axiom vctMapRemoveAx6 {
    (forall m: VCTMap[K, V], k: K :: { (vctmap_remove(m, k): VCTMap[K, V]) } !((k in (vctmap_keys(m): Set[K]))) ==> (vctmap_equals(m, (vctmap_remove(m, k): VCTMap[K, V])): Bool))
  }
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


method Maps___contract_unsatisfiable__main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Maps_main_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var m__1: VCTMap[Int, Int]
  var __flatten_1__2: VCTMap[Int, Int]
  __flatten_1__2 := (vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 2, 3): VCTMap[Int, Int])
  m__1 := __flatten_1__2
  // assert
  assert (2 in (vctmap_keys(m__1): Set[Int]))
  // assert
  assert !((3 in (vctmap_keys(m__1): Set[Int])))
  // assert
  assert (vctmap_get(m__1, 2): Int) == 3
  // assert
  assert (vctmap_disjoint(m__1, (vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 3, 3): VCTMap[Int, Int])): Bool)
  // assert
  assert (vctmap_equals((vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 2, 4): VCTMap[Int, Int]), (vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 2, 4): VCTMap[Int, Int])): Bool)
  // assert
  assert (vctmap_equals((vctmap_build(m__1, 7, 1): VCTMap[Int, Int]), (vctmap_build((vctmap_build(m__1, 2, 3): VCTMap[Int, Int]), 7, 1): VCTMap[Int, Int])): Bool)
  // assert
  assert (vctmap_equals(m__1, (vctmap_build(m__1, 2, 3): VCTMap[Int, Int])): Bool)
}

method Maps___contract_unsatisfiable__m_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Maps_m_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var a__3: VCTMap[Int, Int]
  var __flatten_2__4: VCTMap[Int, Int]
  var b__5: VCTMap[Int, Int]
  var __flatten_3__6: VCTMap[Int, Int]
  __flatten_2__4 := (vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 2, 3): VCTMap[Int, Int])
  a__3 := __flatten_2__4
  __flatten_3__6 := (vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 3, 2): VCTMap[Int, Int])
  b__5 := __flatten_3__6
  // assert
  assert (vctmap_get(a__3, (vctmap_get(b__5, 3): Int)): Int) == 3
}

method Maps___contract_unsatisfiable__m2_EncodedGlobalVariables_Map$Integer_Boolean$_Map$Integer_Boolean$(diz: Ref, globals: Ref, a: VCTMap[Int, Bool], b: VCTMap[Int, Bool])
  requires diz != null
{
  inhale true && ((forall i__7: Int :: { (i__7 in (vctmap_keys(a): Set[Int])) } 0 <= i__7 && i__7 < 100 ==> (i__7 in (vctmap_keys(a): Set[Int]))) && (forall i__8: Int :: { (i__8 in (vctmap_keys(b): Set[Int])) } 0 <= i__8 && i__8 < 100 ==> (i__8 in (vctmap_keys(b): Set[Int]))) && (forall i__9: Int :: { (vctmap_get(a, i__9): Bool) } { (vctmap_get(b, i__9): Bool) } 0 <= i__9 && i__9 < 100 ==> (vctmap_get(a, i__9): Bool) != (vctmap_get(b, i__9): Bool)))
  // assert
  assert false
  inhale false
}

method Maps_m2_EncodedGlobalVariables_Map$Integer_Boolean$_Map$Integer_Boolean$(diz: Ref, globals: Ref, a: VCTMap[Int, Bool], b: VCTMap[Int, Bool])
  requires diz != null
  requires (forall i: Int :: { (i in (vctmap_keys(a): Set[Int])) } 0 <= i && i < 100 ==> (i in (vctmap_keys(a): Set[Int]))) && (forall i: Int :: { (i in (vctmap_keys(b): Set[Int])) } 0 <= i && i < 100 ==> (i in (vctmap_keys(b): Set[Int]))) && (forall i: Int :: { (vctmap_get(a, i): Bool) } { (vctmap_get(b, i): Bool) } 0 <= i && i < 100 ==> (vctmap_get(a, i): Bool) != (vctmap_get(b, i): Bool))
{
  // assert
  assert (forall i__10: Int :: { (vctmap_get(a, i__10): Bool),(vctmap_get(b, i__10): Bool) } 0 <= i__10 && i__10 < 100 ==> (vctmap_get(a, i__10): Bool) || (vctmap_get(b, i__10): Bool))
}

method Maps___contract_unsatisfiable__m3_EncodedGlobalVariables_Map$Integer_Integer$(diz: Ref, globals: Ref, a: VCTMap[Int, Int])
  requires diz != null
{
  inhale true && ((forall i__11: Int :: { (i__11 in (vctmap_keys(a): Set[Int])) } 0 <= i__11 && i__11 < 100 ==> (i__11 in (vctmap_keys(a): Set[Int]))) && (forall i__12: Int :: { (vctmap_get(a, i__12): Int) } 0 <= i__12 && i__12 < 100 ==> (vctmap_get(a, i__12): Int) == i__12 * i__12))
  // assert
  assert false
  inhale false
}

method Maps_m3_EncodedGlobalVariables_Map$Integer_Integer$(diz: Ref, globals: Ref, a: VCTMap[Int, Int])
  requires diz != null
  requires (forall i: Int :: { (i in (vctmap_keys(a): Set[Int])) } 0 <= i && i < 100 ==> (i in (vctmap_keys(a): Set[Int]))) && (forall i: Int :: { (vctmap_get(a, i): Int) } 0 <= i && i < 100 ==> (vctmap_get(a, i): Int) == i * i)
{
  // assert
  assert (vctmap_get(a, 20): Int) == 400
}

method Maps___contract_unsatisfiable__m4_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Maps_m4_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var a__13: VCTMap[Int, Int]
  var __flatten_4__14: VCTMap[Int, Int]
  __flatten_4__14 := (vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 3, 9): VCTMap[Int, Int])
  a__13 := __flatten_4__14
  if ((vctmap_get(a__13, 4): Int) == 4) {
    Maps_m_EncodedGlobalVariables(diz, globals)
  }
}

method Maps___contract_unsatisfiable__m5_EncodedGlobalVariables_Map$Integer_Integer$(diz: Ref, globals: Ref, a: VCTMap[Int, Int])
  requires diz != null
{
  inhale true && (20 in (vctmap_keys(a): Set[Int]))
  // assert
  assert false
  inhale false
}

method Maps_m5_EncodedGlobalVariables_Map$Integer_Integer$(diz: Ref, globals: Ref, a: VCTMap[Int, Int])
  requires diz != null
  requires (20 in (vctmap_keys(a): Set[Int]))
{
  // assert
  assert (vctmap_get(a, 20): Int) <= 0 || 0 < (vctmap_get(a, 20): Int)
}

method Maps___contract_unsatisfiable__m6_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Maps_m6_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var a__15: VCTMap[Int, Int]
  var __flatten_6__16: VCTMap[Int, Int]
  __flatten_6__16 := (vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 3, 9): VCTMap[Int, Int])
  a__15 := __flatten_6__16
  // assert
  assert (vctmap_equals((vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 2, 4): VCTMap[Int, Int]), (vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 2, 4): VCTMap[Int, Int])): Bool)
  // assert
  assert (vctmap_equals((vctmap_build(a__15, 3, 5): VCTMap[Int, Int]), (vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 3, 5): VCTMap[Int, Int])): Bool)
  // assert
  assert (vctmap_equals((vctmap_build(a__15, 2, 5): VCTMap[Int, Int]), (vctmap_build((vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 2, 5): VCTMap[Int, Int]), 3, 9): VCTMap[Int, Int])): Bool)
  // assert
  assert (vctmap_equals((vctmap_build(a__15, 2, 5): VCTMap[Int, Int]), (vctmap_build((vctmap_build((vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 2, 6): VCTMap[Int, Int]), 3, 9): VCTMap[Int, Int]), 2, 5): VCTMap[Int, Int])): Bool)
}

method Maps___contract_unsatisfiable__m7_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Maps_m7_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var a__17: VCTMap[Int, Int]
  var __flatten_7__18: VCTMap[Int, Int]
  __flatten_7__18 := (vctmap_build((vctmap_build((vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 1, 1): VCTMap[Int, Int]), 2, 4): VCTMap[Int, Int]), 3, 9): VCTMap[Int, Int])
  a__17 := __flatten_7__18
  // assert
  assert (forall i__19: Int :: { (vctmap_get(a__17, i__19): Int) } (i__19 in (vctmap_keys(a__17): Set[Int])) ==> (vctmap_get(a__17, i__19): Int) == i__19 * i__19)
  // assert
  assert !((0 in (vctmap_keys(a__17): Set[Int])))
  // assert
  assert (1 in (vctmap_keys(a__17): Set[Int]))
  // assert
  assert (2 in (vctmap_keys(a__17): Set[Int]))
  // assert
  assert (3 in (vctmap_keys(a__17): Set[Int]))
  // assert
  assert (forall i__20: Int :: { (i__20 in (vctmap_keys(a__17): Set[Int])) } i__20 < 1 || 3 < i__20 ==> !((i__20 in (vctmap_keys(a__17): Set[Int]))))
}

method Maps___contract_unsatisfiable__m8_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Maps_m8_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var a__21: VCTMap[Int, Int]
  var __flatten_8__22: VCTMap[Int, Int]
  var i__24: Int
  var n__25: Int
  __flatten_8__22 := (vctmap_empty(): VCTMap[Int, Int])
  a__21 := __flatten_8__22
  // assert
  assert (forall i__23: Int :: { (i__23 in (vctmap_keys(a__21): Set[Int])) } !((i__23 in (vctmap_keys(a__21): Set[Int]))))
  i__24 := 0
  n__25 := 100
  while (i__24 < n__25)
    invariant 0 <= i__24 && i__24 <= n__25
    invariant (forall j__26: Int :: { (vctmap_get(a__21, j__26): Int) } (j__26 in (vctmap_keys(a__21): Set[Int])) ==> (vctmap_get(a__21, j__26): Int) == j__26 * j__26)
    invariant (forall k__27: Int :: { (k__27 in (vctmap_keys(a__21): Set[Int])) } (0 <= k__27 && k__27 < i__24) == (k__27 in (vctmap_keys(a__21): Set[Int]))) 
  {
    a__21 := (vctmap_build(a__21, i__24, i__24 * i__24): VCTMap[Int, Int])
    i__24 := i__24 + 1
  }
  // assert
  assert (vctmap_disjoint(a__21, (vctmap_build((vctmap_empty(): VCTMap[Int, Int]), -1, 2): VCTMap[Int, Int])): Bool)
  Maps_m3_EncodedGlobalVariables_Map$Integer_Integer$(diz, globals, a__21)
}

method Maps___contract_unsatisfiable__m9_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Maps_m9_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var a__28: VCTMap[Int, Int]
  var __flatten_10__29: VCTMap[Int, Int]
  var b__30: VCTMap[Int, Int]
  var __flatten_11__31: VCTMap[Int, Int]
  var __flatten_12__32: VCTMap[Int, Int]
  __flatten_10__29 := (vctmap_empty(): VCTMap[Int, Int])
  a__28 := __flatten_10__29
  __flatten_11__31 := (vctmap_empty(): VCTMap[Int, Int])
  b__30 := __flatten_11__31
  // assert
  assert (vctmap_disjoint(a__28, b__30): Bool)
  __flatten_12__32 := (vctmap_build((vctmap_build((vctmap_build((vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 2, 3): VCTMap[Int, Int]), 4, 2): VCTMap[Int, Int]), 5, -6): VCTMap[Int, Int]), 6, 7): VCTMap[Int, Int])
  b__30 := __flatten_12__32
  // assert
  assert (vctmap_disjoint(a__28, b__30): Bool)
  // assert
  assert !(vctmap_disjoint(b__30, (vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 6, 3): VCTMap[Int, Int])): Bool)
}

method Maps___contract_unsatisfiable__m10_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Maps_m10_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var a__33: VCTMap[Int, Int]
  var __flatten_13__34: VCTMap[Int, Int]
  var b__35: VCTMap[Int, Int]
  var __flatten_14__36: VCTMap[Int, Int]
  var __flatten_15__37: VCTMap[Int, Int]
  var __flatten_16__38: VCTMap[Int, Int]
  __flatten_13__34 := (vctmap_empty(): VCTMap[Int, Int])
  a__33 := __flatten_13__34
  __flatten_14__36 := (vctmap_empty(): VCTMap[Int, Int])
  b__35 := __flatten_14__36
  // assert
  assert (vctmap_disjoint(a__33, b__35): Bool)
  __flatten_15__37 := (vctmap_build((vctmap_build((vctmap_build((vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 2, 3): VCTMap[Int, Int]), 4, 2): VCTMap[Int, Int]), 5, -6): VCTMap[Int, Int]), 6, 7): VCTMap[Int, Int])
  b__35 := __flatten_15__37
  // assert
  assert (vctmap_disjoint(a__33, b__35): Bool)
  __flatten_16__38 := (vctmap_build((vctmap_build((vctmap_build((vctmap_build((vctmap_empty(): VCTMap[Int, Int]), 3, 3): VCTMap[Int, Int]), 1, 2): VCTMap[Int, Int]), 9, -6): VCTMap[Int, Int]), 8, 7): VCTMap[Int, Int])
  a__33 := __flatten_16__38
  // assert
  assert (vctmap_disjoint(a__33, b__35): Bool)
}