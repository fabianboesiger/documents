// Generated on 2021-03-23 at 23:32:52
domain TYPE {
  
  unique function class_Ref(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Ref_directSuperclass {
    directSuperclass(class_Ref()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

domain VCTArray[CT] {
  
  function loc(a: VCTArray[CT], i: Int): CT
  
  function alen(a: VCTArray[CT]): Int
  
  function second(r: CT): Int
  
  axiom good_name_here {
    (forall a: VCTArray[CT], i: Int :: { (loc(a, i): CT) } (second((loc(a, i): CT)): Int) == (second((loc(a, 0): CT)): Int) + i)
  }
  
  axiom second_injectivity {
    (forall a: VCTArray[CT], b: VCTArray[CT], i: Int, j: Int :: { (loc(a, i): CT),(loc(b, j): CT) } (second((loc(a, i): CT)): Int) == (second((loc(b, j): CT)): Int) ==> (loc(a, i): CT) == (loc(b, j): CT))
  }
  
  axiom len_nonneg {
    (forall a: VCTArray[CT] :: { (alen(a): Int) } (alen(a): Int) >= 0)
  }
}

domain VCTOption[T] {
  
  function VCTNone(): VCTOption[T]
  
  function VCTSome(t: T): VCTOption[T]
  
  function getVCTOption(o: VCTOption[T]): T
  
  axiom not_equal_vct {
    (forall x: T :: { (VCTSome(x): VCTOption[T]) } (VCTNone(): VCTOption[T]) != (VCTSome(x): VCTOption[T]))
  }
  
  axiom get_axiom_vct {
    (forall x: T :: { (getVCTOption((VCTSome(x): VCTOption[T])): T) } (getVCTOption((VCTSome(x): VCTOption[T])): T) == x)
  }
  
  axiom get_axiom_vct_2 {
    (forall x: VCTOption[T] :: { (VCTSome((getVCTOption(x): T)): VCTOption[T]) } (VCTSome((getVCTOption(x): T)): VCTOption[T]) == x)
  }
}

domain MatrixIndex {
  
  function product(r: VectorIndex, c: VectorIndex): MatrixIndex
}

domain MatrixExpression[T] {
  
  function msum(is: MatrixIndex, xs: MatrixExpression[T]): T
  
  function mrep(t: T): MatrixExpression[T]
  
  function mcmp(v1: MatrixExpression[T], v2: MatrixExpression[T]): MatrixExpression[Int]
  
  function mseq(m: Seq[Seq[T]]): MatrixExpression[T]
  
  function mdummy(v: Seq[Seq[Int]]): VectorExpression[T]
  
  function fmdummy(v: Seq[Seq[VCTFloat]]): VectorExpression[T]
  
  axiom msum_empty_f {
    (forall i: Int, cols: VectorIndex, xs: MatrixExpression[VCTFloat] :: { (msum(product(vrange(i, i), cols), xs): VCTFloat) } (msum(product(vrange(i, i), cols), xs): VCTFloat) == zero())
  }
  
  axiom msum_empty_i {
    (forall i: Int, cols: VectorIndex, xs: MatrixExpression[Int] :: { (msum(product(vrange(i, i), cols), xs): Int) } (msum(product(vrange(i, i), cols), xs): Int) == 0)
  }
  
  axiom extend_msum_r {
    (forall xs: Seq[Seq[T]], i: Int, j: Int, cols: VectorIndex :: { (msum(product(vrange(i, j), cols), (mseq(xs): MatrixExpression[T])): T) } (msum(product(vrange(i, j + 1), cols), (mseq(xs): MatrixExpression[T])): T) == (vadd((msum(product(vrange(i, j), cols), (mseq(xs): MatrixExpression[T])): T), (vsum(cols, (vseq(xs[i]): VectorExpression[T])): T)): T))
  }
}

domain VectorIndex {
  
  function vrange(lo: Int, hi: Int): VectorIndex
}

domain VectorExpression[T] {
  
  function vrep(t: T): VectorExpression[T]
  
  function vseq(xs: Seq[T]): VectorExpression[T]
  
  function vcmp(v1: VectorExpression[T], v2: VectorExpression[T]): VectorExpression[Int]
  
  function vsum(is: VectorIndex, xs: VectorExpression[T]): T
  
  function vget(v: VectorExpression[T], i: Int): T
  
  function vadd(t1: T, t2: T): T
  
  function vsize(v: VectorExpression[T]): Int
  
  function vdummy(v: Seq[Int]): VectorExpression[T]
  
  axiom vrep_idx {
    (forall i: Int, t: T :: { (vget((vrep(t): VectorExpression[T]), i): T) } (vget((vrep(t): VectorExpression[T]), i): T) == t)
  }
  
  axiom add_int {
    (forall i: Int, j: Int :: { (vadd(i, j): Int) } (vadd(i, j): Int) == i + j)
  }
  
  axiom vseq_get {
    (forall i: Int, xs: Seq[T] :: { (vget((vseq(xs): VectorExpression[T]), i): T) } (vget((vseq(xs): VectorExpression[T]), i): T) == xs[i])
  }
  
  axiom vcmp_get {
    (forall i: Int, xs: VectorExpression[T], ys: VectorExpression[T] :: { (vget((vcmp(xs, ys): VectorExpression[Int]), i): Int) } (vget((vcmp(xs, ys): VectorExpression[Int]), i): Int) == ((vget(xs, i): T) == (vget(ys, i): T) ? 1 : 0))
  }
  
  axiom add_float {
    (forall i: VCTFloat, j: VCTFloat :: { (vadd(i, j): VCTFloat) } (vadd(i, j): VCTFloat) == fadd(i, j))
  }
  
  axiom zero_vsum_f_r {
    (forall xs: VectorExpression[VCTFloat], i: Int :: { (vsum(vrange(i, i), xs): VCTFloat) } (vsum(vrange(i, i), xs): VCTFloat) == zero())
  }
  
  axiom zero_vsum_i_r {
    (forall xs: VectorExpression[Int], i: Int :: { (vsum(vrange(i, i), xs): Int) } (vsum(vrange(i, i), xs): Int) == 0)
  }
  
  axiom vsize_axiom {
    (forall xs: Seq[T] :: { (vsize((vseq(xs): VectorExpression[T])): Int) } (vsize((vseq(xs): VectorExpression[T])): Int) == |xs|)
  }
  
  axiom vsize_axiom_2 {
    (forall t: T :: { (vsize((vrep(t): VectorExpression[T])): Int) } (vsize((vrep(t): VectorExpression[T])): Int) == 1)
  }
  
  axiom extend_vsum_r {
    (forall xs: VectorExpression[T], i: Int, j: Int :: { (vsum(vrange(i, j), xs): T) } i >= 0 && j > i ==> (vsum(vrange(i, j), xs): T) == (vadd((vsum(vrange(i, j - 1), xs): T), (vget(xs, j - 1): T)): T))
  }
  
  axiom extend_vsum_r2 {
    (forall xs: VectorExpression[Int], i: Int, j: Int :: { (vsum(vrange(i, j), xs): Int) } i < 0 || (i >= j || j >= (vsize(xs): Int)) ==> (vsum(vrange(i, j), xs): Int) == 0)
  }
}

domain VCTFloat {
  
  function zero(): VCTFloat
  
  function ffromint(i: Int): VCTFloat
  
  function fadd(f1: VCTFloat, f2: VCTFloat): VCTFloat
  
  axiom commutative_add {
    (forall f1: VCTFloat, f2: VCTFloat :: { fadd(f1, f2) } fadd(f1, f2) == fadd(f2, f1))
  }
  
  axiom zero_int {
    ffromint(0) == zero()
  }
  
  axiom zero_add {
    (forall f1: VCTFloat :: { fadd(f1, zero()) } fadd(f1, zero()) == f1)
  }
}

//  a field 
field Integer__item: Int

//  a field 
field VCTArray_Ref___item: VCTArray[Ref]

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


function getVCTOption1(x: VCTOption[VCTArray[Ref]]): VCTArray[Ref]
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
{
  (getVCTOption(x): VCTArray[Ref])
}

method Ref___contract_unsatisfiable__histogram_EncodedGlobalVariables_Integer_Integer_Integer_Option$Array$Cell$Array$Cell$Integer$$$$$_Integer_Option$Array$Cell$Integer$$$_Sequence$Sequence$Integer$$_Fraction(diz: Ref, globals: Ref, M: Int, N: Int, step: Int, matrix: VCTOption[VCTArray[Ref]], P: Int, hist: VCTOption[VCTArray[Ref]], data: Seq[Seq[Int]], p: frac)
  requires diz != null
{
  inhale frac_val(p) != none && 0 < M && 0 < N && 0 < P && N <= step && (matrix != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(matrix)): Int) == M && (forall i0__1: Int :: { (loc(getVCTOption1(matrix), i0__1): Ref).VCTArray_Ref___item } 0 <= i0__1 && i0__1 < M ==> acc((loc(getVCTOption1(matrix), i0__1): Ref).VCTArray_Ref___item, wildcard)) && (forall i0__2: Int :: { (loc(getVCTOption1(matrix), i0__2): Ref).VCTArray_Ref___item } 0 <= i0__2 && i0__2 < M ==> (alen((loc(getVCTOption1(matrix), i0__2): Ref).VCTArray_Ref___item): Int) == N) && (forall i0__3: Int, i1__4: Int, j0__5: Int, j1__6: Int :: { (loc((loc(getVCTOption1(matrix), i0__3): Ref).VCTArray_Ref___item, i1__4): Ref),(loc((loc(getVCTOption1(matrix), j0__5): Ref).VCTArray_Ref___item, j1__6): Ref) } 0 <= i0__3 && i0__3 < M && (0 <= i1__4 && i1__4 < N) && (0 <= j0__5 && j0__5 < M) && (0 <= j1__6 && j1__6 < N) && (loc((loc(getVCTOption1(matrix), i0__3): Ref).VCTArray_Ref___item, i1__4): Ref) == (loc((loc(getVCTOption1(matrix), j0__5): Ref).VCTArray_Ref___item, j1__6): Ref) ==> i0__3 == j0__5 && i1__4 == j1__6)) && (hist != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(hist)): Int) == P) && (|data| == M && (forall i__7: Int :: { data[i__7] } 0 <= i__7 && i__7 < |data| ==> |data[i__7]| == N)) && ((forall i1__8: Int, j1__9: Int :: { (loc((loc(getVCTOption1(matrix), i1__8): Ref).VCTArray_Ref___item, j1__9): Ref) } 0 <= i1__8 && i1__8 < M && (0 <= j1__9 && j1__9 < N) ==> acc((loc((loc(getVCTOption1(matrix), i1__8): Ref).VCTArray_Ref___item, j1__9): Ref).Integer__item, frac_val(p))) && (forall i1__10: Int, j1__11: Int :: { (loc((loc(getVCTOption1(matrix), i1__10): Ref).VCTArray_Ref___item, j1__11): Ref) } 0 <= i1__10 && i1__10 < M && (0 <= j1__11 && j1__11 < N) ==> 0 <= (loc((loc(getVCTOption1(matrix), i1__10): Ref).VCTArray_Ref___item, j1__11): Ref).Integer__item && (loc((loc(getVCTOption1(matrix), i1__10): Ref).VCTArray_Ref___item, j1__11): Ref).Integer__item < P) && (forall i1__12: Int, j1__13: Int :: { (loc((loc(getVCTOption1(matrix), i1__12): Ref).VCTArray_Ref___item, j1__13): Ref) } { data[i1__12][j1__13] } 0 <= i1__12 && i1__12 < M && (0 <= j1__13 && j1__13 < N) ==> (loc((loc(getVCTOption1(matrix), i1__12): Ref).VCTArray_Ref___item, j1__13): Ref).Integer__item == data[i1__12][j1__13]) && (forall i1__14: Int :: { (loc(getVCTOption1(hist), i1__14): Ref) } 0 <= i1__14 && i1__14 < P ==> acc((loc(getVCTOption1(hist), i1__14): Ref).Integer__item, write)))
  // assert
  assert false
  inhale false
}

method Ref_loop_body_4_Option$Array$Cell$Integer$$$_Integer_Fraction_Integer_Integer_Integer_Integer_Option$Array$Cell$Array$Cell$Integer$$$$$_Sequence$Sequence$Integer$$(diz: Ref, hist: VCTOption[VCTArray[Ref]], k: Int, p: frac, M: Int, N: Int, P: Int, step: Int, matrix: VCTOption[VCTArray[Ref]], data: Seq[Seq[Int]])
  requires diz != null
  requires frac_val(p) != none && 0 < M && 0 < N && 0 < P && N <= step
  requires matrix != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(matrix)): Int) == M
  requires (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> acc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, wildcard))
  requires (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> (alen((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item): Int) == N)
  requires (forall i0: Int, i1: Int, j0: Int, j1: Int :: { (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref),(loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) } 0 <= i0 && i0 < M && (0 <= i1 && i1 < N) && (0 <= j0 && j0 < M) && (0 <= j1 && j1 < N) && (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref) == (loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) ==> i0 == j0 && i1 == j1)
  requires hist != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(hist)): Int) == P
  requires |data| == M && (forall i: Int :: { data[i] } 0 <= i && i < |data| ==> |data[i]| == N)
  requires 0 <= k && k < P
  requires acc((loc(getVCTOption1(hist), k): Ref).Integer__item, write)
  ensures frac_val(p) != none && 0 < M && 0 < N && 0 < P && N <= step
  ensures matrix != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(matrix)): Int) == M
  ensures (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> acc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, wildcard))
  ensures (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> (alen((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item): Int) == N)
  ensures (forall i0: Int, i1: Int, j0: Int, j1: Int :: { (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref),(loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) } 0 <= i0 && i0 < M && (0 <= i1 && i1 < N) && (0 <= j0 && j0 < M) && (0 <= j1 && j1 < N) && (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref) == (loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) ==> i0 == j0 && i1 == j1)
  ensures hist != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(hist)): Int) == P
  ensures |data| == M && (forall i: Int :: { data[i] } 0 <= i && i < |data| ==> |data[i]| == N)
  ensures 0 <= k && k < P
  ensures acc((loc(getVCTOption1(hist), k): Ref).Integer__item, write)
  ensures (loc(getVCTOption1(hist), k): Ref).Integer__item == 0
{
  var __flatten_1__15: Ref
  __flatten_1__15 := (loc(getVCTOption1(hist), k): Ref)
  __flatten_1__15.Integer__item := 0
}

method Ref_parrallel_region_main_1_Integer_Fraction_Integer_Integer_Integer_Option$Array$Cell$Array$Cell$Integer$$$$$_Option$Array$Cell$Integer$$$_Sequence$Sequence$Integer$$(diz: Ref, P: Int, p: frac, M: Int, N: Int, step: Int, matrix: VCTOption[VCTArray[Ref]], hist: VCTOption[VCTArray[Ref]], data: Seq[Seq[Int]])
  requires diz != null
  requires frac_val(p) != none && 0 < M && 0 < N && 0 < P && N <= step
  requires matrix != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(matrix)): Int) == M
  requires (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> acc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, wildcard))
  requires (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> (alen((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item): Int) == N)
  requires (forall i0: Int, i1: Int, j0: Int, j1: Int :: { (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref),(loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) } 0 <= i0 && i0 < M && (0 <= i1 && i1 < N) && (0 <= j0 && j0 < M) && (0 <= j1 && j1 < N) && (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref) == (loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) ==> i0 == j0 && i1 == j1)
  requires hist != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(hist)): Int) == P
  requires |data| == M && (forall i: Int :: { data[i] } 0 <= i && i < |data| ==> |data[i]| == N)
  requires (forall k: Int :: { (loc(getVCTOption1(hist), k): Ref) } 0 <= k && k < P ==> acc((loc(getVCTOption1(hist), k): Ref).Integer__item, write))
  ensures frac_val(p) != none && 0 < M && 0 < N && 0 < P && N <= step
  ensures matrix != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(matrix)): Int) == M
  ensures (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> acc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, wildcard))
  ensures (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> (alen((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item): Int) == N)
  ensures (forall i0: Int, i1: Int, j0: Int, j1: Int :: { (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref),(loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) } 0 <= i0 && i0 < M && (0 <= i1 && i1 < N) && (0 <= j0 && j0 < M) && (0 <= j1 && j1 < N) && (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref) == (loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) ==> i0 == j0 && i1 == j1)
  ensures hist != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(hist)): Int) == P
  ensures |data| == M && (forall i: Int :: { data[i] } 0 <= i && i < |data| ==> |data[i]| == N)
  ensures (forall k: Int :: { (loc(getVCTOption1(hist), k): Ref) } 0 <= k && k < P ==> acc((loc(getVCTOption1(hist), k): Ref).Integer__item, write))
  ensures (forall k: Int :: { (loc(getVCTOption1(hist), k): Ref) } 0 <= k && k < P ==> (loc(getVCTOption1(hist), k): Ref).Integer__item == 0)
{
  inhale false
}

method Ref_loop_body_5_Option$Array$Cell$Integer$$$_Option$Array$Cell$Array$Cell$Integer$$$$$_Integer_Integer_Fraction_Integer_Integer_Integer_Integer_Sequence$Sequence$Integer$$(diz: Ref, hist: VCTOption[VCTArray[Ref]], matrix: VCTOption[VCTArray[Ref]], ii: Int, jj: Int, p: frac, M: Int, N: Int, P: Int, step: Int, data: Seq[Seq[Int]])
  requires diz != null
  requires frac_val(p) != none && 0 < M && 0 < N && 0 < P && N <= step
  requires matrix != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(matrix)): Int) == M
  requires (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> acc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, wildcard))
  requires (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> (alen((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item): Int) == N)
  requires (forall i0: Int, i1: Int, j0: Int, j1: Int :: { (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref),(loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) } 0 <= i0 && i0 < M && (0 <= i1 && i1 < N) && (0 <= j0 && j0 < M) && (0 <= j1 && j1 < N) && (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref) == (loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) ==> i0 == j0 && i1 == j1)
  requires hist != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(hist)): Int) == P
  requires |data| == M && (forall i: Int :: { data[i] } 0 <= i && i < |data| ==> |data[i]| == N)
  requires 0 <= ii && ii < M && (0 <= jj && jj < N)
  requires (forall k: Int :: { (loc(getVCTOption1(hist), k): Ref) } 0 <= k && k < P ==> acc((loc(getVCTOption1(hist), k): Ref).Integer__item, write))
  requires (forall k: Int :: { (loc(getVCTOption1(hist), k): Ref) } 0 <= k && k < P ==> (loc(getVCTOption1(hist), k): Ref).Integer__item == 0)
  requires acc((loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref).Integer__item, frac_val(p))
  requires 0 <= (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref).Integer__item && (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref).Integer__item < P
  requires (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref).Integer__item == data[ii][jj]
  ensures frac_val(p) != none && 0 < M && 0 < N && 0 < P && N <= step
  ensures matrix != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(matrix)): Int) == M
  ensures (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> acc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, wildcard))
  ensures (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> (alen((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item): Int) == N)
  ensures (forall i0: Int, i1: Int, j0: Int, j1: Int :: { (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref),(loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) } 0 <= i0 && i0 < M && (0 <= i1 && i1 < N) && (0 <= j0 && j0 < M) && (0 <= j1 && j1 < N) && (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref) == (loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) ==> i0 == j0 && i1 == j1)
  ensures hist != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(hist)): Int) == P
  ensures |data| == M && (forall i: Int :: { data[i] } 0 <= i && i < |data| ==> |data[i]| == N)
  ensures 0 <= ii && ii < M && (0 <= jj && jj < N)
  ensures acc((loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref).Integer__item, frac_val(p))
  ensures 0 <= (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref).Integer__item && (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref).Integer__item < P
  ensures (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref).Integer__item == data[ii][jj]
  ensures (forall k: Int :: { (loc(getVCTOption1(hist), k): Ref) } 0 <= k && k < P ==> acc((loc(getVCTOption1(hist), k): Ref).Integer__item, write))
  ensures (forall k: Int :: { (loc(getVCTOption1(hist), k): Ref) } 0 <= k && k < P ==> (loc(getVCTOption1(hist), k): Ref).Integer__item == (data[ii][jj] == k ? 1 : 0))
{
  var __flatten_2__16: Ref
  var __flatten_3__17: Ref
  var __flatten_4__18: Ref
  __flatten_4__18 := (loc(getVCTOption1(matrix), ii): Ref)
  __flatten_3__17 := (loc(__flatten_4__18.VCTArray_Ref___item, jj): Ref)
  __flatten_2__16 := (loc(getVCTOption1(hist), __flatten_3__17.Integer__item): Ref)
  __flatten_2__16.Integer__item := __flatten_2__16.Integer__item + 1
}

method Ref_parrallel_region_main_2_Integer_Integer_Fraction_Integer_Integer_Option$Array$Cell$Array$Cell$Integer$$$$$_Option$Array$Cell$Integer$$$_Sequence$Sequence$Integer$$(diz: Ref, M: Int, N: Int, p: frac, P: Int, step: Int, matrix: VCTOption[VCTArray[Ref]], hist: VCTOption[VCTArray[Ref]], data: Seq[Seq[Int]])
  requires diz != null
  requires frac_val(p) != none && 0 < M && 0 < N && 0 < P && N <= step
  requires matrix != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(matrix)): Int) == M
  requires (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> acc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, wildcard))
  requires (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> (alen((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item): Int) == N)
  requires (forall i0: Int, i1: Int, j0: Int, j1: Int :: { (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref),(loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) } 0 <= i0 && i0 < M && (0 <= i1 && i1 < N) && (0 <= j0 && j0 < M) && (0 <= j1 && j1 < N) && (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref) == (loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) ==> i0 == j0 && i1 == j1)
  requires hist != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(hist)): Int) == P
  requires |data| == M && (forall i: Int :: { data[i] } 0 <= i && i < |data| ==> |data[i]| == N)
  requires (forall k: Int :: { (loc(getVCTOption1(hist), k): Ref) } 0 <= k && k < P ==> acc((loc(getVCTOption1(hist), k): Ref).Integer__item, write))
  requires (forall ii: Int, jj: Int :: { (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref) } 0 <= ii && ii < M && (0 <= jj && jj < N) ==> acc((loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref).Integer__item, frac_val(p)))
  requires (forall ii: Int, jj: Int :: { (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref) } 0 <= ii && ii < M && (0 <= jj && jj < N) ==> 0 <= (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref).Integer__item && (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref).Integer__item < P)
  requires (forall ii: Int, jj: Int :: { (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref) } { data[ii][jj] } 0 <= ii && ii < M && (0 <= jj && jj < N) ==> (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref).Integer__item == data[ii][jj])
  ensures frac_val(p) != none && 0 < M && 0 < N && 0 < P && N <= step
  ensures matrix != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(matrix)): Int) == M
  ensures (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> acc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, wildcard))
  ensures (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> (alen((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item): Int) == N)
  ensures (forall i0: Int, i1: Int, j0: Int, j1: Int :: { (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref),(loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) } 0 <= i0 && i0 < M && (0 <= i1 && i1 < N) && (0 <= j0 && j0 < M) && (0 <= j1 && j1 < N) && (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref) == (loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) ==> i0 == j0 && i1 == j1)
  ensures hist != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(hist)): Int) == P
  ensures |data| == M && (forall i: Int :: { data[i] } 0 <= i && i < |data| ==> |data[i]| == N)
  ensures (forall ii: Int, jj: Int :: { (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref) } 0 <= ii && ii < M && (0 <= jj && jj < N) ==> acc((loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref).Integer__item, frac_val(p)))
  ensures (forall ii: Int, jj: Int :: { (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref) } 0 <= ii && ii < M && (0 <= jj && jj < N) ==> 0 <= (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref).Integer__item && (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref).Integer__item < P)
  ensures (forall ii: Int, jj: Int :: { (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref) } { data[ii][jj] } 0 <= ii && ii < M && (0 <= jj && jj < N) ==> (loc((loc(getVCTOption1(matrix), ii): Ref).VCTArray_Ref___item, jj): Ref).Integer__item == data[ii][jj])
  ensures (forall k: Int :: { (loc(getVCTOption1(hist), k): Ref) } 0 <= k && k < P ==> acc((loc(getVCTOption1(hist), k): Ref).Integer__item, write))
  ensures (forall k: Int :: { (loc(getVCTOption1(hist), k): Ref) } 0 <= k && k < P ==> (loc(getVCTOption1(hist), k): Ref).Integer__item == old((loc(getVCTOption1(hist), k): Ref).Integer__item) + (msum(product(vrange(0, M), vrange(0, N)), (mcmp((mseq(data): MatrixExpression[Int]), (mrep(k): MatrixExpression[Int])): MatrixExpression[Int])): Int))
{
  inhale false
}

method Ref_histogram_EncodedGlobalVariables_Integer_Integer_Integer_Option$Array$Cell$Array$Cell$Integer$$$$$_Integer_Option$Array$Cell$Integer$$$_Sequence$Sequence$Integer$$_Fraction(diz: Ref, globals: Ref, M: Int, N: Int, step: Int, matrix: VCTOption[VCTArray[Ref]], P: Int, hist: VCTOption[VCTArray[Ref]], data: Seq[Seq[Int]], p: frac)
  requires diz != null
  requires frac_val(p) != none && 0 < M && 0 < N && 0 < P && N <= step
  requires matrix != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(matrix)): Int) == M
  requires (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> acc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, wildcard))
  requires (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> (alen((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item): Int) == N)
  requires (forall i0: Int, i1: Int, j0: Int, j1: Int :: { (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref),(loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) } 0 <= i0 && i0 < M && (0 <= i1 && i1 < N) && (0 <= j0 && j0 < M) && (0 <= j1 && j1 < N) && (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref) == (loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) ==> i0 == j0 && i1 == j1)
  requires hist != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(hist)): Int) == P
  requires |data| == M && (forall i: Int :: { data[i] } 0 <= i && i < |data| ==> |data[i]| == N)
  requires (forall i1: Int, j1: Int :: { (loc((loc(getVCTOption1(matrix), i1): Ref).VCTArray_Ref___item, j1): Ref) } 0 <= i1 && i1 < M && (0 <= j1 && j1 < N) ==> acc((loc((loc(getVCTOption1(matrix), i1): Ref).VCTArray_Ref___item, j1): Ref).Integer__item, frac_val(p)))
  requires (forall i1: Int, j1: Int :: { (loc((loc(getVCTOption1(matrix), i1): Ref).VCTArray_Ref___item, j1): Ref) } 0 <= i1 && i1 < M && (0 <= j1 && j1 < N) ==> 0 <= (loc((loc(getVCTOption1(matrix), i1): Ref).VCTArray_Ref___item, j1): Ref).Integer__item && (loc((loc(getVCTOption1(matrix), i1): Ref).VCTArray_Ref___item, j1): Ref).Integer__item < P)
  requires (forall i1: Int, j1: Int :: { (loc((loc(getVCTOption1(matrix), i1): Ref).VCTArray_Ref___item, j1): Ref) } { data[i1][j1] } 0 <= i1 && i1 < M && (0 <= j1 && j1 < N) ==> (loc((loc(getVCTOption1(matrix), i1): Ref).VCTArray_Ref___item, j1): Ref).Integer__item == data[i1][j1])
  requires (forall i1: Int :: { (loc(getVCTOption1(hist), i1): Ref) } 0 <= i1 && i1 < P ==> acc((loc(getVCTOption1(hist), i1): Ref).Integer__item, write))
  ensures frac_val(p) != none && 0 < M && 0 < N && 0 < P && N <= step
  ensures matrix != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(matrix)): Int) == M
  ensures (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> acc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, wildcard))
  ensures (forall i0: Int :: { (loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item } 0 <= i0 && i0 < M ==> (alen((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item): Int) == N)
  ensures (forall i0: Int, i1: Int, j0: Int, j1: Int :: { (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref),(loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) } 0 <= i0 && i0 < M && (0 <= i1 && i1 < N) && (0 <= j0 && j0 < M) && (0 <= j1 && j1 < N) && (loc((loc(getVCTOption1(matrix), i0): Ref).VCTArray_Ref___item, i1): Ref) == (loc((loc(getVCTOption1(matrix), j0): Ref).VCTArray_Ref___item, j1): Ref) ==> i0 == j0 && i1 == j1)
  ensures hist != (VCTNone(): VCTOption[VCTArray[Ref]]) && (alen(getVCTOption1(hist)): Int) == P
  ensures |data| == M && (forall i: Int :: { data[i] } 0 <= i && i < |data| ==> |data[i]| == N)
  ensures (forall i1: Int, j1: Int :: { (loc((loc(getVCTOption1(matrix), i1): Ref).VCTArray_Ref___item, j1): Ref) } 0 <= i1 && i1 < M && (0 <= j1 && j1 < N) ==> acc((loc((loc(getVCTOption1(matrix), i1): Ref).VCTArray_Ref___item, j1): Ref).Integer__item, frac_val(p)))
  ensures (forall i1: Int, j1: Int :: { (loc((loc(getVCTOption1(matrix), i1): Ref).VCTArray_Ref___item, j1): Ref) } 0 <= i1 && i1 < M && (0 <= j1 && j1 < N) ==> 0 <= (loc((loc(getVCTOption1(matrix), i1): Ref).VCTArray_Ref___item, j1): Ref).Integer__item && (loc((loc(getVCTOption1(matrix), i1): Ref).VCTArray_Ref___item, j1): Ref).Integer__item < P)
  ensures (forall i1: Int, j1: Int :: { (loc((loc(getVCTOption1(matrix), i1): Ref).VCTArray_Ref___item, j1): Ref) } { data[i1][j1] } 0 <= i1 && i1 < M && (0 <= j1 && j1 < N) ==> (loc((loc(getVCTOption1(matrix), i1): Ref).VCTArray_Ref___item, j1): Ref).Integer__item == data[i1][j1])
  ensures (forall i1: Int :: { (loc(getVCTOption1(hist), i1): Ref) } 0 <= i1 && i1 < P ==> acc((loc(getVCTOption1(hist), i1): Ref).Integer__item, write))
  ensures (forall k: Int :: { (loc(getVCTOption1(hist), k): Ref) } 0 <= k && k < P ==> (loc(getVCTOption1(hist), k): Ref).Integer__item == (msum(product(vrange(0, M), vrange(0, N)), (mcmp((mseq(data): MatrixExpression[Int]), (mrep(k): MatrixExpression[Int])): MatrixExpression[Int])): Int))
{
  Ref_parrallel_region_main_1_Integer_Fraction_Integer_Integer_Integer_Option$Array$Cell$Array$Cell$Integer$$$$$_Option$Array$Cell$Integer$$$_Sequence$Sequence$Integer$$(diz, P, p, M, N, step, matrix, hist, data)
  Ref_parrallel_region_main_2_Integer_Integer_Fraction_Integer_Integer_Option$Array$Cell$Array$Cell$Integer$$$$$_Option$Array$Cell$Integer$$$_Sequence$Sequence$Integer$$(diz, M, N, p, P, step, matrix, hist, data)
}