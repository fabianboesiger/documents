// Generated on 2021-03-23 at 23:34:20
domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_List(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  unique function class_MagicWands(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom List_directSuperclass {
    directSuperclass(class_List()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom MagicWands_directSuperclass {
    directSuperclass(class_MagicWands()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field List_val: Int

//  a field 
field List_next: Ref

function List_get_next_EncodedGlobalVariables_Sequence$Integer$(diz: Ref, globals: Ref, L: Seq[Int]): Ref
  requires diz != null
  requires acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz, globals, L), write)
{
  (unfolding acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz, globals, L), write) in diz.List_next)
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


predicate List_list_EncodedGlobalVariables_Sequence$Integer$(diz: Ref, globals: Ref, c: Seq[Int]) {
  diz != null && (acc(diz.List_val, write) && acc(diz.List_next, write) && (diz.List_next == null ? c == Seq(diz.List_val) : 0 < |c| && c[0] == diz.List_val && acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz.List_next, globals, c[1..]), write)))
}

predicate MagicWands_Wand_list_for_list_List_EncodedGlobalVariables_Sequence$Integer$_List_EncodedGlobalVariables_Sequence$Integer$(x_0: Ref, x_1: Ref, x_2: Seq[Int], x_3: Ref, x_4: Ref, x_5: Seq[Int]) 

method java_DOT_lang_DOT_Object_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method java_DOT_lang_DOT_Object_internal_Object_EncodedGlobalVariables(globals: Ref) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method List___contract_unsatisfiable__List_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, v: Int)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method List_List_EncodedGlobalVariables_Integer(globals: Ref, v: Int) returns (sys__result: Ref)
  ensures sys__result != null
  ensures type_of(sys__result) == class_List()
  ensures acc(List_list_EncodedGlobalVariables_Sequence$Integer$(sys__result, globals, Seq(v)), write)
{
  var diz__1: Ref
  diz__1 := new(List_val, List_next)
  inhale type_of(diz__1) == class_List()
  diz__1.List_val := v
  diz__1.List_next := null
  fold acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz__1, globals, Seq(v)), write)
  sys__result := diz__1
  // assert
  assert sys__result != null && type_of(sys__result) == class_List() && acc(List_list_EncodedGlobalVariables_Sequence$Integer$(sys__result, globals, Seq(v)), write)
  inhale false
}

method List___contract_unsatisfiable__append_rec_EncodedGlobalVariables_List_Sequence$Integer$_Sequence$Integer$(diz: Ref, globals: Ref, l: Ref, L1: Seq[Int], L2: Seq[Int])
  requires diz != null
{
  inhale true && (acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz, globals, L1), write) && l != null && acc(List_list_EncodedGlobalVariables_Sequence$Integer$(l, globals, L2), write))
  // assert
  assert false
  inhale false
}

method List_append_rec_EncodedGlobalVariables_List_Sequence$Integer$_Sequence$Integer$(diz: Ref, globals: Ref, l: Ref, L1: Seq[Int], L2: Seq[Int])
  requires diz != null
  requires acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz, globals, L1), write)
  requires l != null
  requires acc(List_list_EncodedGlobalVariables_Sequence$Integer$(l, globals, L2), write)
  ensures acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz, globals, L1 ++ L2), write)
{
  unfold acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz, globals, L1), write)
  if (diz.List_next == null) {
    diz.List_next := l
    fold acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz, globals, L1 ++ L2), write)
  } else {
    List_append_rec_EncodedGlobalVariables_List_Sequence$Integer$_Sequence$Integer$(diz.List_next, globals, l, L1[1..], L2)
    fold acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz, globals, Seq(L1[0]) ++ (L1[1..] ++ L2)), write)
    // assert
    assert 0 < |L1|
    // assert
    assert Seq(L1[0]) ++ (L1[1..] ++ L2) == L1 ++ L2
  }
}

method List___contract_unsatisfiable__append_iter_EncodedGlobalVariables_List_Sequence$Integer$_Sequence$Integer$(diz: Ref, globals: Ref, l: Ref, L1: Seq[Int], L2: Seq[Int])
  requires diz != null
{
  inhale true && (acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz, globals, L1), write) && l != null && acc(List_list_EncodedGlobalVariables_Sequence$Integer$(l, globals, L2), write))
  // assert
  assert false
  inhale false
}

method List_lemma_1_EncodedGlobalVariables_Sequence$Integer$_Sequence$Integer$(diz: Ref, globals: Ref, L1: Seq[Int], L2: Seq[Int])
  requires diz != null
  requires acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz, globals, L1 ++ L2), write)
  ensures acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz, globals, L1 ++ L2), write)
{
  
}

method List_lemma_2_List_List_Sequence$Integer$_Sequence$Integer$_EncodedGlobalVariables_Sequence$Integer$_Sequence$Integer$(diz: Ref, tmp: Ref, cursor: Ref, tmp_suffix: Seq[Int], suffix: Seq[Int], globals: Ref, L2: Seq[Int], L1: Seq[Int])
  requires diz != null
  requires acc(tmp.List_val, write)
  requires acc(tmp.List_next, write)
  requires tmp.List_next == cursor
  requires cursor != null
  requires tmp_suffix == Seq(tmp.List_val) ++ suffix
  requires acc(MagicWands_Wand_list_for_list_List_EncodedGlobalVariables_Sequence$Integer$_List_EncodedGlobalVariables_Sequence$Integer$(tmp, globals, tmp_suffix ++ L2, diz, globals, L1 ++ L2), write)
  requires acc(List_list_EncodedGlobalVariables_Sequence$Integer$(cursor, globals, suffix ++ L2), write)
  ensures acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz, globals, L1 ++ L2), write)
{
  fold acc(List_list_EncodedGlobalVariables_Sequence$Integer$(tmp, globals, tmp_suffix ++ L2), write)
  exhale acc(MagicWands_Wand_list_for_list_List_EncodedGlobalVariables_Sequence$Integer$_List_EncodedGlobalVariables_Sequence$Integer$(tmp, globals, tmp_suffix ++ L2, diz, globals, L1 ++ L2), write)
  exhale acc(List_list_EncodedGlobalVariables_Sequence$Integer$(tmp, globals, tmp_suffix ++ L2), write)
  inhale acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz, globals, L1 ++ L2), write)
}

method List_append_iter_EncodedGlobalVariables_List_Sequence$Integer$_Sequence$Integer$(diz: Ref, globals: Ref, l: Ref, L1: Seq[Int], L2: Seq[Int])
  requires diz != null
  requires acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz, globals, L1), write)
  requires l != null
  requires acc(List_list_EncodedGlobalVariables_Sequence$Integer$(l, globals, L2), write)
  ensures acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz, globals, L1 ++ L2), write)
{
  var tmp_suffix__8: Seq[Int]
  var tmp__7: Ref
  var cursor__2: Ref
  var prefix__3: Seq[Int]
  var __flatten_2__4: Seq[Int]
  var suffix__5: Seq[Int]
  var __flatten_3__6: Seq[Int]
  cursor__2 := diz
  __flatten_2__4 := Seq[Int]()
  prefix__3 := __flatten_2__4
  suffix__5 := L1
  exhale true
  inhale acc(MagicWands_Wand_list_for_list_List_EncodedGlobalVariables_Sequence$Integer$_List_EncodedGlobalVariables_Sequence$Integer$(diz, globals, L1 ++ L2, diz, globals, L1 ++ L2), write)
  while (List_get_next_EncodedGlobalVariables_Sequence$Integer$(cursor__2, globals, suffix__5) != null)
    invariant cursor__2 != null
    invariant acc(List_list_EncodedGlobalVariables_Sequence$Integer$(cursor__2, globals, suffix__5), write)
    invariant prefix__3 ++ suffix__5 == L1
    invariant l != null
    invariant acc(List_list_EncodedGlobalVariables_Sequence$Integer$(l, globals, L2), write)
    invariant acc(MagicWands_Wand_list_for_list_List_EncodedGlobalVariables_Sequence$Integer$_List_EncodedGlobalVariables_Sequence$Integer$(cursor__2, globals, suffix__5 ++ L2, diz, globals, L1 ++ L2), write) 
  {
    tmp__7 := cursor__2
    tmp_suffix__8 := suffix__5
    unfold acc(List_list_EncodedGlobalVariables_Sequence$Integer$(cursor__2, globals, suffix__5), write)
    __flatten_3__6 := Seq(cursor__2.List_val)
    prefix__3 := prefix__3 ++ __flatten_3__6
    suffix__5 := suffix__5[1..]
    cursor__2 := cursor__2.List_next
    exhale acc(tmp__7.List_val, write) && acc(tmp__7.List_next, write) && tmp__7.List_next == cursor__2 && cursor__2 != null && tmp_suffix__8 == Seq(tmp__7.List_val) ++ suffix__5 && acc(MagicWands_Wand_list_for_list_List_EncodedGlobalVariables_Sequence$Integer$_List_EncodedGlobalVariables_Sequence$Integer$(tmp__7, globals, tmp_suffix__8 ++ L2, diz, globals, L1 ++ L2), write)
    inhale acc(MagicWands_Wand_list_for_list_List_EncodedGlobalVariables_Sequence$Integer$_List_EncodedGlobalVariables_Sequence$Integer$(cursor__2, globals, suffix__5 ++ L2, diz, globals, L1 ++ L2), write)
  }
  unfold acc(List_list_EncodedGlobalVariables_Sequence$Integer$(cursor__2, globals, suffix__5), write)
  cursor__2.List_next := l
  fold acc(List_list_EncodedGlobalVariables_Sequence$Integer$(cursor__2, globals, suffix__5 ++ L2), write)
  exhale acc(MagicWands_Wand_list_for_list_List_EncodedGlobalVariables_Sequence$Integer$_List_EncodedGlobalVariables_Sequence$Integer$(cursor__2, globals, suffix__5 ++ L2, diz, globals, L1 ++ L2), write)
  exhale acc(List_list_EncodedGlobalVariables_Sequence$Integer$(cursor__2, globals, suffix__5 ++ L2), write)
  inhale acc(List_list_EncodedGlobalVariables_Sequence$Integer$(diz, globals, L1 ++ L2), write)
}