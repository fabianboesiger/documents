// Generated on 2021-03-23 at 23:30:18
domain TYPE {
  
  unique function class_Ref(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Ref_directSuperclass {
    directSuperclass(class_Ref()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


method Ref___contract_unsatisfiable__types_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Ref_types_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var L__1: Seq[Int]
  var S__2: Set[Int]
  var B__3: Multiset[Int]
  var __flatten_1__4: Seq[Int]
  var __flatten_2__5: Set[Int]
  var __flatten_3__6: Multiset[Int]
  __flatten_1__4 := Seq(1, 2, 3)
  L__1 := __flatten_1__4
  // assert
  assert L__1 == Seq(1, 2, 3)
  __flatten_2__5 := Set(1, 2, 3)
  S__2 := __flatten_2__5
  // assert
  assert S__2 == Set(2, 1, 3)
  // assert
  assert S__2 == Set(1, 1, 2, 3, 3)
  __flatten_3__6 := Multiset(1, 1, 2, 3)
  B__3 := __flatten_3__6
  // assert
  assert B__3 == Multiset(1, 1, 2, 3)
  // assert
  assert (1 in B__3) == 2
}