// Generated on 2021-03-23 at 23:28:44
domain TYPE {
  
  unique function class_Problem(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Problem_directSuperclass {
    directSuperclass(class_Problem()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

domain VCTArray[CT] {
  
  function loc(a: VCTArray[CT], i: Int): CT
  
  function alen(a: VCTArray[CT]): Int
  
  function first(r: CT): VCTArray[CT]
  
  function second(r: CT): Int
  
  axiom all_diff {
    (forall a: VCTArray[CT], i: Int :: { (loc(a, i): CT) } (first((loc(a, i): CT)): VCTArray[CT]) == a && (second((loc(a, i): CT)): Int) == i)
  }
  
  axiom len_nonneg {
    (forall a: VCTArray[CT] :: { (alen(a): Int) } (alen(a): Int) >= 0)
  }
}

domain VCTOption[T] {
  
  function VCTNone(): VCTOption[T]
  
  function VCTSome(t: T): VCTOption[T]
  
  function getVCTOption(o: VCTOption[T]): T
  
  function getVCTOptionOrElse(o: VCTOption[T], default: T): T
  
  axiom not_equal_vct {
    (forall x: T :: { (VCTSome(x): VCTOption[T]) } (VCTNone(): VCTOption[T]) != (VCTSome(x): VCTOption[T]))
  }
  
  axiom get_axiom_vct {
    (forall x: T :: { (getVCTOption((VCTSome(x): VCTOption[T])): T) } (getVCTOption((VCTSome(x): VCTOption[T])): T) == x)
  }
  
  axiom get_axiom_vct_2 {
    (forall x: VCTOption[T] :: { (VCTSome((getVCTOption(x): T)): VCTOption[T]) } (VCTSome((getVCTOption(x): T)): VCTOption[T]) == x)
  }
  
  axiom get_or_else_axiom_1 {
    (forall val: T, default: T :: { (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) == val)
  }
  
  axiom get_or_else_axiom_2 {
    (forall default: T :: { (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) == default)
  }
}

//  a field 
field Integer__item: Int

function Problem_vals_function_EncodedGlobalVariables_Fraction_Option$Array$Cell$Integer$$$(globals: Ref, p: frac, ar: VCTOption[VCTArray[Ref]]): Seq[Int]
  requires frac_val(p) != none
  requires ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (forall i: Int :: { (loc(getVCTOption1(ar), i): Ref) } 0 <= i && i < (alen(getVCTOption1(ar)): Int) ==> acc((loc(getVCTOption1(ar), i): Ref).Integer__item, frac_val(p)))
  ensures |result| == (alen(getVCTOption1(ar)): Int)
  ensures (forall i: Int :: { (loc(getVCTOption1(ar), i): Ref) } { result[i] } 0 <= i && i < (alen(getVCTOption1(ar)): Int) ==> (loc(getVCTOption1(ar), i): Ref).Integer__item == result[i])


function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


function getVCTOption1(x: VCTOption[VCTArray[Ref]]): VCTArray[Ref]
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
{
  (getVCTOption(x): VCTArray[Ref])
}

method Problem_vals_method_EncodedGlobalVariables_Fraction_Option$Array$Cell$Integer$$$(globals: Ref, p: frac, ar: VCTOption[VCTArray[Ref]]) returns (sys__result: Seq[Int])
  requires frac_val(p) != none
  requires ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (forall i: Int :: { (loc(getVCTOption1(ar), i): Ref) } 0 <= i && i < (alen(getVCTOption1(ar)): Int) ==> acc((loc(getVCTOption1(ar), i): Ref).Integer__item, frac_val(p)))
  ensures frac_val(p) != none
  ensures ar != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (forall i: Int :: { (loc(getVCTOption1(ar), i): Ref) } 0 <= i && i < (alen(getVCTOption1(ar)): Int) ==> acc((loc(getVCTOption1(ar), i): Ref).Integer__item, frac_val(p)))
  ensures (forall i: Int :: { (loc(getVCTOption1(ar), i): Ref) } 0 <= i && i < (alen(getVCTOption1(ar)): Int) ==> (loc(getVCTOption1(ar), i): Ref).Integer__item == old((loc(getVCTOption1(ar), i): Ref).Integer__item))
  ensures |sys__result| == (alen(getVCTOption1(ar)): Int)
  ensures (forall i: Int :: { (loc(getVCTOption1(ar), i): Ref) } { sys__result[i] } 0 <= i && i < (alen(getVCTOption1(ar)): Int) ==> (loc(getVCTOption1(ar), i): Ref).Integer__item == sys__result[i])
{
  inhale false
}

method Problem___contract_unsatisfiable__asmethod_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Problem_asmethod_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var array__1: VCTOption[VCTArray[Ref]]
  var __flatten_2__2: Ref
  var __flatten_3__3: Ref
  var xs__4: Seq[Int]
  array__1 := array_new_Option_Array_Cell_Integer____Integer(2)
  __flatten_2__2 := (loc(getVCTOption1(array__1), 0): Ref)
  __flatten_2__2.Integer__item := 1
  __flatten_3__3 := (loc(getVCTOption1(array__1), 1): Ref)
  __flatten_3__3.Integer__item := 2
  xs__4 := Problem_vals_method_EncodedGlobalVariables_Fraction_Option$Array$Cell$Integer$$$(globals, new_frac(1 / 2), array__1)
  // assert
  assert |xs__4| == (alen(getVCTOption1(array__1)): Int)
  // assert
  assert (forall i__5: Int :: { xs__4[i__5] } { (loc(getVCTOption1(array__1), i__5): Ref) } 0 <= i__5 && i__5 < 2 ==> xs__4[i__5] == (loc(getVCTOption1(array__1), i__5): Ref).Integer__item)
  // assert
  assert xs__4 == Seq(1, 2)
}

method Problem___contract_unsatisfiable__asfunction_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method Problem_asfunction_EncodedGlobalVariables(diz: Ref, globals: Ref)
  requires diz != null
{
  var array__6: VCTOption[VCTArray[Ref]]
  var __flatten_6__7: Ref
  var __flatten_7__8: Ref
  var xs__9: Seq[Int]
  array__6 := array_new_Option_Array_Cell_Integer____Integer(2)
  __flatten_6__7 := (loc(getVCTOption1(array__6), 0): Ref)
  __flatten_6__7.Integer__item := 1
  __flatten_7__8 := (loc(getVCTOption1(array__6), 1): Ref)
  __flatten_7__8.Integer__item := 2
  xs__9 := Problem_vals_function_EncodedGlobalVariables_Fraction_Option$Array$Cell$Integer$$$(globals, new_frac(1 / 2), array__6)
  // assert
  assert |xs__9| == (alen(getVCTOption1(array__6)): Int)
  // assert
  assert (forall i__10: Int :: { xs__9[i__10] } { (loc(getVCTOption1(array__6), i__10): Ref) } 0 <= i__10 && i__10 < 2 ==> xs__9[i__10] == (loc(getVCTOption1(array__6), i__10): Ref).Integer__item)
  // assert
  assert xs__9 == Seq(1, 2)
}

method array_new_Option_Array_Cell_Integer____Integer(size0: Int) returns (sys__result: VCTOption[VCTArray[Ref]])
  ensures sys__result != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(sys__result)): Int) == size0
  ensures (forall i0: Int :: { (loc(getVCTOption1(sys__result), i0): Ref).Integer__item } 0 <= i0 && i0 < size0 ==> acc((loc(getVCTOption1(sys__result), i0): Ref).Integer__item, write))
  ensures (forall i0: Int :: { (loc(getVCTOption1(sys__result), i0): Ref).Integer__item } 0 <= i0 && i0 < size0 ==> (loc(getVCTOption1(sys__result), i0): Ref).Integer__item == 0)
{
  inhale false
}