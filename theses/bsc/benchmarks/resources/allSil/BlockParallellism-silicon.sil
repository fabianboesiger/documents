// Generated on 2021-03-23 at 23:29:29
domain TYPE {
  
  unique function class_Ref(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom Ref_directSuperclass {
    directSuperclass(class_Ref()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field Ref_x: Int

//  a field 
field Ref_y: Int

//  a field 
field Ref_z: Int

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


method Ref___contract_unsatisfiable__main_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, c: Int)
  requires diz != null
{
  inhale true && (acc(diz.Ref_x, write) && acc(diz.Ref_y, write) && acc(diz.Ref_z, 1 / 2) && diz.Ref_x + diz.Ref_y == diz.Ref_z)
  // assert
  assert false
  inhale false
}

method Ref_loop_body_4_Integer(diz: Ref, c: Int)
  requires diz != null
  requires acc(diz.Ref_x, write)
  ensures acc(diz.Ref_x, write)
  ensures diz.Ref_x == old(diz.Ref_x) + c
{
  var __flatten_1__1: Int
  __flatten_1__1 := diz.Ref_x + c
  diz.Ref_x := __flatten_1__1
}

method Ref_loop_body_5_Integer(diz: Ref, c: Int)
  requires diz != null
  requires acc(diz.Ref_y, write)
  ensures acc(diz.Ref_y, write)
  ensures diz.Ref_y == old(diz.Ref_y) - c
{
  var __flatten_2__2: Int
  __flatten_2__2 := diz.Ref_y - c
  diz.Ref_y := __flatten_2__2
}

method Ref_parrallel_region_main_1_Integer(diz: Ref, c: Int)
  requires diz != null
  requires true ==> acc(diz.Ref_x, write)
  requires true ==> acc(diz.Ref_y, write)
  ensures true ==> acc(diz.Ref_x, write)
  ensures true ==> diz.Ref_x == old(diz.Ref_x) + c
  ensures true ==> acc(diz.Ref_y, write)
  ensures true ==> diz.Ref_y == old(diz.Ref_y) - c
{
  inhale false
}

method Ref_main_EncodedGlobalVariables_Integer(diz: Ref, globals: Ref, c: Int)
  requires diz != null
  requires acc(diz.Ref_x, write)
  requires acc(diz.Ref_y, write)
  requires acc(diz.Ref_z, 1 / 2)
  requires diz.Ref_x + diz.Ref_y == diz.Ref_z
  ensures acc(diz.Ref_x, write)
  ensures acc(diz.Ref_y, write)
  ensures acc(diz.Ref_z, 1 / 2)
  ensures diz.Ref_x + diz.Ref_y == diz.Ref_z
{
  Ref_parrallel_region_main_1_Integer(diz, c)
}