// Generated on 2021-03-23 at 23:35:03
domain TYPE {
  
  unique function class_BlackOrRed(): TYPE
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom BlackOrRed_directSuperclass {
    directSuperclass(class_BlackOrRed()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
}

function instanceof_TYPE_TYPE(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


method BlackOrRed___contract_unsatisfiable__isBlack_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Bool)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method BlackOrRed_isBlack_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Bool)
  requires diz != null
{
  sys__result := true
  // assert
  assert true
  inhale false
}

method BlackOrRed___contract_unsatisfiable__isRed_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Bool)
  requires diz != null
{
  inhale true && true
  // assert
  assert false
  inhale false
}

method BlackOrRed_isRed_EncodedGlobalVariables(diz: Ref, globals: Ref) returns (sys__result: Bool)
  requires diz != null
{
  var __flatten_1__1: Bool
  __flatten_1__1 := BlackOrRed_isBlack_EncodedGlobalVariables(diz, globals)
  sys__result := !__flatten_1__1
  // assert
  assert true
  inhale false
}