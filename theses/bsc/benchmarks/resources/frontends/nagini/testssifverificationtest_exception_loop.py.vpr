domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function ConnectionRefusedError(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function PSeq_basic(): PyType
  
  function PSeq(arg0: PyType): PyType
  
  function PSeq_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function PMultiset_basic(): PyType
  
  function PMultiset(arg0: PyType): PyType
  
  function PMultiset_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function py_range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function Place(): PyType
  
  unique function __prim__Seq_type(): PyType
  
  unique function Container(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: { list(arg0),list_arg(Z, 0) } issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: { set(arg0),set_arg(Z, 0) } issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: { dict(arg0, arg1),dict_arg(Z, 0) } issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: { dict(arg0, arg1),dict_arg(Z, 1) } issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_ConnectionRefusedError {
    extends_(ConnectionRefusedError(), Exception()) && get_basic(ConnectionRefusedError()) == ConnectionRefusedError()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_PSeq {
    (forall var0: PyType :: { PSeq(var0) } extends_(PSeq(var0), object()) && get_basic(PSeq(var0)) == PSeq_basic())
  }
  
  axiom PSeq_args0 {
    (forall Z: PyType, arg0: PyType :: { PSeq(arg0),PSeq_arg(Z, 0) } issubtype(Z, PSeq(arg0)) ==> PSeq_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: { PSet(arg0),PSet_arg(Z, 0) } issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PMultiset {
    (forall var0: PyType :: { PMultiset(var0) } extends_(PMultiset(var0), object()) && get_basic(PMultiset(var0)) == PMultiset_basic())
  }
  
  axiom PMultiset_args0 {
    (forall Z: PyType, arg0: PyType :: { PMultiset(arg0),PMultiset_arg(Z, 0) } issubtype(Z, PMultiset(arg0)) ==> PMultiset_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_py_range {
    extends_(py_range(), object()) && get_basic(py_range()) == py_range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: { Iterator(arg0),Iterator_arg(Z, 0) } issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_LevelType {
    extends_(LevelType(), object()) && get_basic(LevelType()) == LevelType()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype___prim__Seq_type {
    extends_(__prim__Seq_type(), object()) && get_basic(__prim__Seq_type()) == __prim__Seq_type()
  }
  
  axiom subtype_Container {
    extends_(Container(), object()) && get_basic(Container()) == Container()
  }
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
}

domain _list_ce_helper {
  
  function seq_ref_length(___s: Seq[Ref]): Int
  
  function seq_ref_index(___s: Seq[Ref], i: Int): Ref
  
  axiom relate_length {
    (forall ___s: Seq[Ref] :: { |___s| } |___s| == seq_ref_length(___s))
  }
  
  axiom relate_index {
    (forall ___s: Seq[Ref], ___i: Int :: { ___s[___i] } ___s[___i] == seq_ref_index(___s, ___i))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _dict_ce_helper {
  
  function dict_get_helper(___s: Set[Ref], ___s2: Ref, ___s3: Ref): Ref
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _name_type(n: _Name): Bool
  
  function _is_single(n: _Name): Bool
  
  function _is_combined(n: _Name): Bool
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom compose_single {
    (forall n: _Name :: { _get_value(n) } _is_single(n) ==> n == _single(_get_value(n)))
  }
  
  axiom type_of_single {
    (forall i: Int :: { _single(i) } _name_type(_single(i)))
  }
  
  axiom decompose_combined {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1 && _get_combined_name(_combine(n1, n2)) == n2)
  }
  
  axiom compose_combined {
    (forall n: _Name :: { _get_combined_prefix(n) } { _get_combined_name(n) } _is_combined(n) ==> n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom type_of_composed {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_name_type(_combine(n1, n2)))
  }
  
  axiom type_is_single {
    (forall n: _Name :: { _name_type(n) } _name_type(n) == _is_single(n))
  }
  
  axiom type_is_combined {
    (forall n: _Name :: { _name_type(n) } !_name_type(n) == _is_combined(n))
  }
}

field _val: Ref

field _valp: Ref

field __container: Ref

field __containerp: Ref

field __iter_index: Int

field __iter_indexp: Int

field __previous: Seq[Ref]

field __previousp: Seq[Ref]

field list_acc: Seq[Ref]

field list_accp: Seq[Ref]

field set_acc: Set[Ref]

field set_accp: Set[Ref]

field dict_acc: Set[Ref]

field dict_accp: Set[Ref]

field dict_acc2: Ref

field dict_acc2p: Ref

field Measure$acc: Seq[Ref]

field Measure$accp: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseBoundedp: Int

field MustReleaseUnbounded: Int

field MustReleaseUnboundedp: Int

field Container_value: Ref

field Container_valuep: Ref

function __file__(): Ref


function __name__(): Ref


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0)


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int())
{
  int___unbox__(self) == int___unbox__(other)
}

function Level(r: Ref): Perm


function str___len__(self: Ref): Int
  ensures result >= 0


function str___val__(self: Ref): Int


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str()


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other)


predicate MustTerminate(r: Ref) 

predicate MustTerminate_0(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeBounded_0(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeUnbounded_0(r: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate _MaySet_0(rec: Ref, id: Int) 

method break_out_exception(p1: Bool, p2: Bool, _cthread_157: Ref, _cthread_157_0: Ref, _caller_measures_157: Seq[Measure$], _caller_measures_157_0: Seq[Measure$], _residue_157: Perm, _residue_157_0: Perm, c: Ref, c_9: Ref, b: Ref, b_9: Ref) returns (_current_wait_level_157: Perm, _current_wait_level_157_0: Perm, _err: Ref, _err_0: Ref)
  requires (p1 ==> _cthread_157 != null) && (p2 ==> _cthread_157_0 != null)
  requires (p1 ==> issubtype(typeof(_cthread_157), Thread_0())) && (p2 ==> issubtype(typeof(_cthread_157_0), Thread_0()))
  requires (p1 ==> issubtype(typeof(c), Container())) && (p2 ==> issubtype(typeof(c_9), Container()))
  requires (p1 ==> issubtype(typeof(b), bool())) && (p2 ==> issubtype(typeof(b_9), bool()))
  requires (p1 ==> acc(c.Container_value, write)) && (p2 ==> acc(c_9.Container_valuep, write)) && ((p1 ==> issubtype(typeof(c.Container_value), int())) && (p2 ==> issubtype(typeof(c_9.Container_valuep), int())))
  requires (p1 ==> [true, perm(MustTerminate(_cthread_157)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))]) && (p2 ==> [true, perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_3: Ref [MustInvokeBounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBoundedp] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnboundedp] :: false))))])
  ensures (p1 ==> [(forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_157) && ((forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]) && (p2 ==> [(forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: Level(_r_1) <= _current_wait_level_157_0) && ((forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: Level(_r_1) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0), true])
  ensures (p1 ==> _err == null ==> acc(c.Container_value, write) && issubtype(typeof(c.Container_value), int()) && int___eq__(c.Container_value, __prim__int___box__(8))) && (p2 ==> _err_0 == null ==> acc(c_9.Container_valuep, write) && issubtype(typeof(c_9.Container_valuep), int()) && int___eq__(c_9.Container_valuep, __prim__int___box__(8)))
  ensures (p1 ==> _err != null && issubtype(typeof(_err), Exception()) ==> acc(c.Container_value, write) && issubtype(typeof(c.Container_value), int()) && int___eq__(c.Container_value, __prim__int___box__(7))) && (p2 ==> _err_0 != null && issubtype(typeof(_err_0), Exception()) ==> acc(c_9.Container_valuep, write) && issubtype(typeof(c_9.Container_valuep), int()) && int___eq__(c_9.Container_valuep, __prim__int___box__(7)))
  ensures (p1 ==> _err != null ==> issubtype(typeof(_err), Exception())) && (p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception()))
  ensures (p1 ==> [true, (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))]) && (p2 ==> [true, (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)))])
{
  var break1: Bool
  var break2: Bool
  var except1: Bool
  var except2: Bool
  inhale p1
  break1 := false
  break2 := false
  except1 := false
  except2 := false
  var c_4: Ref
  var c_4_0: Ref
  var b_4: Ref
  var b_4_0: Ref
  var _loop_measures: Seq[Measure$]
  var _loop_measures_4: Seq[Measure$]
  var _loop_check_before: Bool
  var _loop_check_before_4: Bool
  var _loop_termination_flag: Bool
  var _loop_termination_flag_4: Bool
  var _loop_original_must_terminate: Perm
  var _loop_original_must_terminate_4: Perm
  var _residue_162: Perm
  var _residue_162_0: Perm
  var Exception_res: Ref
  var Exception_res_2: Ref
  var _cwl_157: Perm
  var _cwl_157_0: Perm
  var _method_measures_157: Seq[Measure$]
  var _method_measures_157_0: Seq[Measure$]
  if (p1 && (!break1 && !except1)) {
    _method_measures_157 := Seq[Measure$]()
    _err := null
    c_4 := c
    b_4 := b
    // Save current MustTerminate amount.
    _loop_original_must_terminate := perm(MustTerminate(_cthread_157))
    // Save loop termination promise.
    _loop_termination_flag := false
    // We are before loop.
    _loop_check_before := true
  }
  if (p2 && (!break2 && !except2)) {
    _method_measures_157_0 := Seq[Measure$]()
    _err_0 := null
    c_4_0 := c_9
    b_4_0 := b_9
    // Save current MustTerminate amount.
    _loop_original_must_terminate_4 := perm(MustTerminate_0(_cthread_157_0))
    // Save loop termination promise.
    _loop_termination_flag_4 := false
    // We are before loop.
    _loop_check_before_4 := true
  }
  var bypass1: Bool
  var bypass2: Bool
  var tmp1: Seq[Measure$]
  var tmp2: Seq[Measure$]
  var tmp1_0: Ref
  var tmp2_0: Ref
  var tmp1_1: Bool
  var tmp2_1: Bool
  var tmp1_2: Ref
  var tmp2_2: Ref
  var tmp1_3: Bool
  var tmp2_3: Bool
  var tmp1_4: Bool
  var tmp2_4: Bool
  var oldbreak1: Bool
  var oldbreak2: Bool
  var oldexcept1: Bool
  var oldexcept2: Bool
  var p1_0: Bool
  var p2_0: Bool
  var idle1: Bool
  var idle2: Bool
  bypass1 := !(p1 && (!break1 && !except1))
  bypass2 := !(p2 && (!break2 && !except2))
  if (bypass1) {
    tmp1 := _loop_measures
    tmp1_0 := Exception_res
    tmp1_1 := except1
    tmp1_2 := _err
    tmp1_3 := _loop_check_before
    tmp1_4 := break1
  }
  if (bypass2) {
    tmp2 := _loop_measures_4
    tmp2_0 := Exception_res_2
    tmp2_1 := except2
    tmp2_2 := _err_0
    tmp2_3 := _loop_check_before_4
    tmp2_4 := break2
  }
  oldbreak1 := break1
  oldbreak2 := break2
  oldexcept1 := except1
  oldexcept2 := except2
  idle1 := false
  idle2 := false
  while (p1 && (!break1 && !except1) && !bypass1 && true || p2 && (!break2 && !except2) && !bypass2 && true)
    invariant (p1 && !bypass1 ==> [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_162) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_162) && _residue_157 <= _residue_162), true]) && (p2 && !bypass2 ==> [(forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _residue_162_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _residue_162_0) && _residue_157_0 <= _residue_162_0), true])
    invariant (p1 && !bypass1 ==> acc(c_4.Container_value, write)) && (p2 && !bypass2 ==> acc(c_4_0.Container_valuep, write)) && ((p1 && !bypass1 ==> issubtype(typeof(c_4.Container_value), int())) && (p2 && !bypass2 ==> issubtype(typeof(c_4_0.Container_valuep), int())))
    invariant (p1 && !bypass1 ==> [true, !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))]) && (p2 && !bypass2 ==> [true, !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))])
    invariant (p1 && !bypass1 ==> [true, !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]) && (p2 && !bypass2 ==> [true, !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))])
    invariant bypass1 ==> tmp1_1 == except1
    invariant bypass1 ==> tmp1_4 == break1
    invariant bypass1 ==> tmp1_0 == Exception_res
    invariant bypass1 ==> tmp1_2 == _err
    invariant bypass1 ==> tmp1_3 == _loop_check_before
    invariant bypass1 ==> tmp1 == _loop_measures
    invariant bypass2 ==> tmp2 == _loop_measures_4
    invariant bypass2 ==> tmp2_1 == except2
    invariant bypass2 ==> tmp2_3 == _loop_check_before_4
    invariant bypass2 ==> tmp2_4 == break2
    invariant bypass2 ==> tmp2_2 == _err_0
    invariant bypass2 ==> tmp2_0 == Exception_res_2 
  {
    p1_0 := p1 && (!break1 && !except1) && true
    p2_0 := p2 && (!break2 && !except2) && true
    idle1 := p1 && (!break1 && !except1) && !true
    idle2 := p2 && (!break2 && !except2) && !true
    if (p1_0 && (!break1 && !except1)) {
      _loop_measures := Seq[Measure$]()
    }
    if (p2_0 && (!break2 && !except2)) {
      _loop_measures_4 := Seq[Measure$]()
    }
    var p1_1: Bool
    var p2_1: Bool
    var p3: Bool
    var p4: Bool
    p1_1 := p1_0 && (!break1 && !except1) && bool___unbox__(b_4)
    p2_1 := p2_0 && (!break2 && !except2) && bool___unbox__(b_4_0)
    p3 := p1_0 && (!break1 && !except1) && !bool___unbox__(b_4)
    p4 := p2_0 && (!break2 && !except2) && !bool___unbox__(b_4_0)
    var p1_2: Bool
    var p2_2: Bool
    var p3_0: Bool
    var p4_0: Bool
    p1_2 := p1_1 && (!break1 && !except1) && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
    p2_2 := p2_1 && (!break2 && !except2) && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
    p3_0 := p1_1 && (!break1 && !except1) && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
    p4_0 := p2_1 && (!break2 && !except2) && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
    if (p1_2 && (!break1 && !except1)) {
      exhale acc(_MaySet(c_4, 526803611440346310908232101056638787), write)
      inhale acc(c_4.Container_value, write)
    }
    if (p2_2 && (!break2 && !except2)) {
      exhale acc(_MaySet_0(c_4_0, 526803611440346310908232101056638787), write)
      inhale acc(c_4_0.Container_valuep, write)
    }
    if (p1_1 && (!break1 && !except1)) {
      c_4.Container_value := __prim__int___box__(7)
    }
    if (p2_1 && (!break2 && !except2)) {
      c_4_0.Container_valuep := __prim__int___box__(7)
    }
    var tmp: Ref
    tmp := new()
    if (p1_1 && (!break1 && !except1)) {
      Exception_res := tmp
    }
    if (p2_1 && (!break2 && !except2)) {
      Exception_res_2 := tmp
    }
    if (p1_1 && (!break1 && !except1)) {
      inhale typeof(Exception_res) == Exception()
    }
    if (p2_1 && (!break2 && !except2)) {
      inhale typeof(Exception_res_2) == Exception()
    }
    if (p1_1 && (!break1 && !except1)) {
      _err := Exception_res
      except1 := true
    }
    if (p2_1 && (!break2 && !except2)) {
      _err_0 := Exception_res_2
      except2 := true
    }
    var p1_3: Bool
    var p2_3: Bool
    var p3_1: Bool
    var p4_1: Bool
    p1_3 := p3 && (!break1 && !except1) && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
    p2_3 := p4 && (!break2 && !except2) && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
    p3_1 := p3 && (!break1 && !except1) && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
    p4_1 := p4 && (!break2 && !except2) && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
    if (p1_3 && (!break1 && !except1)) {
      exhale acc(_MaySet(c_4, 526803611440346310908232101056638787), write)
      inhale acc(c_4.Container_value, write)
    }
    if (p2_3 && (!break2 && !except2)) {
      exhale acc(_MaySet_0(c_4_0, 526803611440346310908232101056638787), write)
      inhale acc(c_4_0.Container_valuep, write)
    }
    if (p3 && (!break1 && !except1)) {
      c_4.Container_value := __prim__int___box__(8)
    }
    if (p4 && (!break2 && !except2)) {
      c_4_0.Container_valuep := __prim__int___box__(8)
    }
    if (p3 && (!break1 && !except1)) {
      break1 := true
    }
    if (p4 && (!break2 && !except2)) {
      break2 := true
    }
    if (p1_0 && (!break1 && !except1)) {
      // We are after loop body.
      _loop_check_before := false
    }
    if (p2_0 && (!break2 && !except2)) {
      // We are after loop body.
      _loop_check_before_4 := false
    }
    assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) && (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
  }
  // Loop Reconstruction.
  
  if (!bypass1 && (break1 || except1) || !bypass2 && (break2 || except2)) {
    break1 := oldbreak1
    break2 := oldbreak2
    except1 := oldexcept1
    except2 := oldexcept2
    inhale p1 && (!break1 && !except1) ==> true
    inhale p2 && (!break1 && !except1) ==> true
    p1_0 := p1 && (!break1 && !except1) && true
    p2_0 := p2 && (!break2 && !except2) && true
    idle1 := p1 && (!break1 && !except1) && !true
    idle2 := p2 && (!break2 && !except2) && !true
    if (p1_0 && (!break1 && !except1)) {
      _loop_measures := Seq[Measure$]()
    }
    if (p2_0 && (!break2 && !except2)) {
      _loop_measures_4 := Seq[Measure$]()
    }
    var p1_1: Bool
    var p2_1: Bool
    var p3: Bool
    var p4: Bool
    p1_1 := p1_0 && (!break1 && !except1) && bool___unbox__(b_4)
    p2_1 := p2_0 && (!break2 && !except2) && bool___unbox__(b_4_0)
    p3 := p1_0 && (!break1 && !except1) && !bool___unbox__(b_4)
    p4 := p2_0 && (!break2 && !except2) && !bool___unbox__(b_4_0)
    var p1_2: Bool
    var p2_2: Bool
    var p3_0: Bool
    var p4_0: Bool
    p1_2 := p1_1 && (!break1 && !except1) && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
    p2_2 := p2_1 && (!break2 && !except2) && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
    p3_0 := p1_1 && (!break1 && !except1) && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
    p4_0 := p2_1 && (!break2 && !except2) && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
    if (p1_2 && (!break1 && !except1)) {
      exhale acc(_MaySet(c_4, 526803611440346310908232101056638787), write)
      inhale acc(c_4.Container_value, write)
    }
    if (p2_2 && (!break2 && !except2)) {
      exhale acc(_MaySet_0(c_4_0, 526803611440346310908232101056638787), write)
      inhale acc(c_4_0.Container_valuep, write)
    }
    if (p1_1 && (!break1 && !except1)) {
      c_4.Container_value := __prim__int___box__(7)
    }
    if (p2_1 && (!break2 && !except2)) {
      c_4_0.Container_valuep := __prim__int___box__(7)
    }
    var tmp: Ref
    tmp := new()
    if (p1_1 && (!break1 && !except1)) {
      Exception_res := tmp
    }
    if (p2_1 && (!break2 && !except2)) {
      Exception_res_2 := tmp
    }
    if (p1_1 && (!break1 && !except1)) {
      inhale typeof(Exception_res) == Exception()
    }
    if (p2_1 && (!break2 && !except2)) {
      inhale typeof(Exception_res_2) == Exception()
    }
    if (p1_1 && (!break1 && !except1)) {
      _err := Exception_res
      except1 := true
    }
    if (p2_1 && (!break2 && !except2)) {
      _err_0 := Exception_res_2
      except2 := true
    }
    var p1_3: Bool
    var p2_3: Bool
    var p3_1: Bool
    var p4_1: Bool
    p1_3 := p3 && (!break1 && !except1) && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
    p2_3 := p4 && (!break2 && !except2) && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
    p3_1 := p3 && (!break1 && !except1) && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
    p4_1 := p4 && (!break2 && !except2) && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
    if (p1_3 && (!break1 && !except1)) {
      exhale acc(_MaySet(c_4, 526803611440346310908232101056638787), write)
      inhale acc(c_4.Container_value, write)
    }
    if (p2_3 && (!break2 && !except2)) {
      exhale acc(_MaySet_0(c_4_0, 526803611440346310908232101056638787), write)
      inhale acc(c_4_0.Container_valuep, write)
    }
    if (p3 && (!break1 && !except1)) {
      c_4.Container_value := __prim__int___box__(8)
    }
    if (p4 && (!break2 && !except2)) {
      c_4_0.Container_valuep := __prim__int___box__(8)
    }
    if (p3 && (!break1 && !except1)) {
      break1 := true
    }
    if (p4 && (!break2 && !except2)) {
      break2 := true
    }
    if (p1_0 && (!break1 && !except1)) {
      // We are after loop body.
      _loop_check_before := false
    }
    if (p2_0 && (!break2 && !except2)) {
      // We are after loop body.
      _loop_check_before_4 := false
    }
    assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) && (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
    inhale !p1_0 || !(!break1 && !except1)
    inhale !p2_0 || !(!break2 && !except2)
  }
  if (!bypass1) {
    break1 := false
  }
  if (!bypass2) {
    break2 := false
  }
  if (p1 && (!break1 && !except1)) {
    // Reset MustTerminate amount to original level.
    exhale perm(MustTerminate(_cthread_157)) > none ==> acc(MustTerminate(_cthread_157), perm(MustTerminate(_cthread_157)) - _loop_original_must_terminate)
    _err := null
  }
  if (p2 && (!break2 && !except2)) {
    // Reset MustTerminate amount to original level.
    exhale perm(MustTerminate_0(_cthread_157_0)) > none ==> acc(MustTerminate_0(_cthread_157_0), perm(MustTerminate_0(_cthread_157_0)) - _loop_original_must_terminate_4)
    _err_0 := null
  }
}

method break_out_exception_2(p1_4: Bool, p2_4: Bool, _cthread_158: Ref, _cthread_158_0: Ref, _caller_measures_158: Seq[Measure$], _caller_measures_158_0: Seq[Measure$], _residue_158: Perm, _residue_158_0: Perm, c_0: Ref, c_0_0: Ref, b_0: Ref, b_0_0: Ref) returns (_current_wait_level_158: Perm, _current_wait_level_158_0: Perm, _err: Ref, _err_1: Ref)
  requires (p1_4 ==> _cthread_158 != null) && (p2_4 ==> _cthread_158_0 != null)
  requires (p1_4 ==> issubtype(typeof(_cthread_158), Thread_0())) && (p2_4 ==> issubtype(typeof(_cthread_158_0), Thread_0()))
  requires (p1_4 ==> issubtype(typeof(c_0), Container())) && (p2_4 ==> issubtype(typeof(c_0_0), Container()))
  requires (p1_4 ==> issubtype(typeof(b_0), bool())) && (p2_4 ==> issubtype(typeof(b_0_0), bool()))
  requires (p1_4 ==> acc(c_0.Container_value, write)) && (p2_4 ==> acc(c_0_0.Container_valuep, write)) && ((p1_4 ==> issubtype(typeof(c_0.Container_value), int())) && (p2_4 ==> issubtype(typeof(c_0_0.Container_valuep), int())))
  requires (p1_4 ==> [true, perm(MustTerminate(_cthread_158)) == none && ((forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false))))]) && (p2_4 ==> [true, perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_8: Ref [MustInvokeBounded_0(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded_0(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: false))))])
  ensures (p1_4 ==> [(forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_158) && ((forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158), true]) && (p2_4 ==> [(forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: Level(_r_6) <= _current_wait_level_158_0) && ((forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: Level(_r_6) <= _current_wait_level_158_0) && _residue_158_0 <= _current_wait_level_158_0), true])
  ensures (p1_4 ==> _err == null ==> acc(c_0.Container_value, write) && issubtype(typeof(c_0.Container_value), int()) && int___eq__(c_0.Container_value, __prim__int___box__(9))) && (p2_4 ==> _err_1 == null ==> acc(c_0_0.Container_valuep, write) && issubtype(typeof(c_0_0.Container_valuep), int()) && int___eq__(c_0_0.Container_valuep, __prim__int___box__(9)))
  ensures (p1_4 ==> _err != null && issubtype(typeof(_err), Exception()) ==> acc(c_0.Container_value, write) && issubtype(typeof(c_0.Container_value), int()) && int___eq__(c_0.Container_value, __prim__int___box__(7))) && (p2_4 ==> _err_1 != null && issubtype(typeof(_err_1), Exception()) ==> acc(c_0_0.Container_valuep, write) && issubtype(typeof(c_0_0.Container_valuep), int()) && int___eq__(c_0_0.Container_valuep, __prim__int___box__(7)))
  ensures (p1_4 ==> _err != null ==> issubtype(typeof(_err), Exception())) && (p2_4 ==> _err_1 != null ==> issubtype(typeof(_err_1), Exception()))
  ensures (p1_4 ==> [true, (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))]) && (p2_4 ==> [true, (forperm _r_7: Ref [MustInvokeBounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBoundedp] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnboundedp] :: false)))])
{
  var break1_0: Bool
  var break2_0: Bool
  var except1_0: Bool
  var except2_0: Bool
  inhale p1_4
  break1_0 := false
  break2_0 := false
  except1_0 := false
  except2_0 := false
  var c_5: Ref
  var c_5_0: Ref
  var b_5: Ref
  var b_5_0: Ref
  var _loop_measures_0: Seq[Measure$]
  var _loop_measures_0_0: Seq[Measure$]
  var _loop_check_before_0: Bool
  var _loop_check_before_0_0: Bool
  var _loop_termination_flag_0: Bool
  var _loop_termination_flag_0_0: Bool
  var _loop_original_must_terminate_0: Perm
  var _loop_original_must_terminate_0_0: Perm
  var _residue_163: Perm
  var _residue_163_0: Perm
  var Exception_res_0: Ref
  var Exception_res_0_0: Ref
  var _cwl_158: Perm
  var _cwl_158_0: Perm
  var _method_measures_158: Seq[Measure$]
  var _method_measures_158_0: Seq[Measure$]
  if (p1_4 && (!break1_0 && !except1_0)) {
    _method_measures_158 := Seq[Measure$]()
    _err := null
    c_5 := c_0
    b_5 := b_0
    // Save current MustTerminate amount.
    _loop_original_must_terminate_0 := perm(MustTerminate(_cthread_158))
    // Save loop termination promise.
    _loop_termination_flag_0 := false
    // We are before loop.
    _loop_check_before_0 := true
  }
  if (p2_4 && (!break2_0 && !except2_0)) {
    _method_measures_158_0 := Seq[Measure$]()
    _err_1 := null
    c_5_0 := c_0_0
    b_5_0 := b_0_0
    // Save current MustTerminate amount.
    _loop_original_must_terminate_0_0 := perm(MustTerminate_0(_cthread_158_0))
    // Save loop termination promise.
    _loop_termination_flag_0_0 := false
    // We are before loop.
    _loop_check_before_0_0 := true
  }
  var bypass1_0: Bool
  var bypass2_0: Bool
  var tmp1_5: Seq[Measure$]
  var tmp2_5: Seq[Measure$]
  var tmp1_6: Ref
  var tmp2_6: Ref
  var tmp1_7: Bool
  var tmp2_7: Bool
  var tmp1_8: Ref
  var tmp2_8: Ref
  var tmp1_9: Bool
  var tmp2_9: Bool
  var tmp1_10: Bool
  var tmp2_10: Bool
  var oldbreak1_0: Bool
  var oldbreak2_0: Bool
  var oldexcept1_0: Bool
  var oldexcept2_0: Bool
  var p1_5: Bool
  var p2_5: Bool
  var idle1_0: Bool
  var idle2_0: Bool
  bypass1_0 := !(p1_4 && (!break1_0 && !except1_0))
  bypass2_0 := !(p2_4 && (!break2_0 && !except2_0))
  if (bypass1_0) {
    tmp1_5 := _loop_measures_0
    tmp1_6 := Exception_res_0
    tmp1_7 := except1_0
    tmp1_8 := _err
    tmp1_9 := _loop_check_before_0
    tmp1_10 := break1_0
  }
  if (bypass2_0) {
    tmp2_5 := _loop_measures_0_0
    tmp2_6 := Exception_res_0_0
    tmp2_7 := except2_0
    tmp2_8 := _err_1
    tmp2_9 := _loop_check_before_0_0
    tmp2_10 := break2_0
  }
  oldbreak1_0 := break1_0
  oldbreak2_0 := break2_0
  oldexcept1_0 := except1_0
  oldexcept2_0 := except2_0
  idle1_0 := false
  idle2_0 := false
  while (p1_4 && (!break1_0 && !except1_0) && !bypass1_0 && true || p2_4 && (!break2_0 && !except2_0) && !bypass2_0 && true)
    invariant (p1_4 && !bypass1_0 ==> [(forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_163) && ((forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_163) && _residue_158 <= _residue_163), true]) && (p2_4 && !bypass2_0 ==> [(forperm _r_4: Ref [_r_4.MustReleaseBoundedp] :: Level(_r_4) <= _residue_163_0) && ((forperm _r_4: Ref [_r_4.MustReleaseUnboundedp] :: Level(_r_4) <= _residue_163_0) && _residue_158_0 <= _residue_163_0), true])
    invariant (p1_4 && !bypass1_0 ==> acc(c_5.Container_value, write)) && (p2_4 && !bypass2_0 ==> acc(c_5_0.Container_valuep, write)) && ((p1_4 && !bypass1_0 ==> issubtype(typeof(c_5.Container_value), int())) && (p2_4 && !bypass2_0 ==> issubtype(typeof(c_5_0.Container_valuep), int())))
    invariant (p1_4 && !bypass1_0 ==> [true, !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))]) && (p2_4 && !bypass2_0 ==> [true, !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))])
    invariant (p1_4 && !bypass1_0 ==> [true, !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))]) && (p2_4 && !bypass2_0 ==> [true, !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))])
    invariant bypass1_0 ==> tmp1_7 == except1_0
    invariant bypass1_0 ==> tmp1_6 == Exception_res_0
    invariant bypass1_0 ==> tmp1_10 == break1_0
    invariant bypass1_0 ==> tmp1_9 == _loop_check_before_0
    invariant bypass1_0 ==> tmp1_8 == _err
    invariant bypass1_0 ==> tmp1_5 == _loop_measures_0
    invariant bypass2_0 ==> tmp2_5 == _loop_measures_0_0
    invariant bypass2_0 ==> tmp2_8 == _err_1
    invariant bypass2_0 ==> tmp2_10 == break2_0
    invariant bypass2_0 ==> tmp2_7 == except2_0
    invariant bypass2_0 ==> tmp2_6 == Exception_res_0_0
    invariant bypass2_0 ==> tmp2_9 == _loop_check_before_0_0 
  {
    p1_5 := p1_4 && (!break1_0 && !except1_0) && true
    p2_5 := p2_4 && (!break2_0 && !except2_0) && true
    idle1_0 := p1_4 && (!break1_0 && !except1_0) && !true
    idle2_0 := p2_4 && (!break2_0 && !except2_0) && !true
    if (p1_5 && (!break1_0 && !except1_0)) {
      _loop_measures_0 := Seq[Measure$]()
    }
    if (p2_5 && (!break2_0 && !except2_0)) {
      _loop_measures_0_0 := Seq[Measure$]()
    }
    var p1_6: Bool
    var p2_6: Bool
    var p3_2: Bool
    var p4_2: Bool
    p1_6 := p1_5 && (!break1_0 && !except1_0) && bool___unbox__(b_5)
    p2_6 := p2_5 && (!break2_0 && !except2_0) && bool___unbox__(b_5_0)
    p3_2 := p1_5 && (!break1_0 && !except1_0) && !bool___unbox__(b_5)
    p4_2 := p2_5 && (!break2_0 && !except2_0) && !bool___unbox__(b_5_0)
    var p1_7: Bool
    var p2_7: Bool
    var p3_3: Bool
    var p4_3: Bool
    p1_7 := p1_6 && (!break1_0 && !except1_0) && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
    p2_7 := p2_6 && (!break2_0 && !except2_0) && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
    p3_3 := p1_6 && (!break1_0 && !except1_0) && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
    p4_3 := p2_6 && (!break2_0 && !except2_0) && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
    if (p1_7 && (!break1_0 && !except1_0)) {
      exhale acc(_MaySet(c_5, 526803611440346310908232101056638787), write)
      inhale acc(c_5.Container_value, write)
    }
    if (p2_7 && (!break2_0 && !except2_0)) {
      exhale acc(_MaySet_0(c_5_0, 526803611440346310908232101056638787), write)
      inhale acc(c_5_0.Container_valuep, write)
    }
    if (p1_6 && (!break1_0 && !except1_0)) {
      c_5.Container_value := __prim__int___box__(7)
    }
    if (p2_6 && (!break2_0 && !except2_0)) {
      c_5_0.Container_valuep := __prim__int___box__(7)
    }
    var tmp_0: Ref
    tmp_0 := new()
    if (p1_6 && (!break1_0 && !except1_0)) {
      Exception_res_0 := tmp_0
    }
    if (p2_6 && (!break2_0 && !except2_0)) {
      Exception_res_0_0 := tmp_0
    }
    if (p1_6 && (!break1_0 && !except1_0)) {
      inhale typeof(Exception_res_0) == Exception()
    }
    if (p2_6 && (!break2_0 && !except2_0)) {
      inhale typeof(Exception_res_0_0) == Exception()
    }
    if (p1_6 && (!break1_0 && !except1_0)) {
      _err := Exception_res_0
      except1_0 := true
    }
    if (p2_6 && (!break2_0 && !except2_0)) {
      _err_1 := Exception_res_0_0
      except2_0 := true
    }
    var p1_8: Bool
    var p2_8: Bool
    var p3_4: Bool
    var p4_4: Bool
    p1_8 := p3_2 && (!break1_0 && !except1_0) && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
    p2_8 := p4_2 && (!break2_0 && !except2_0) && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
    p3_4 := p3_2 && (!break1_0 && !except1_0) && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
    p4_4 := p4_2 && (!break2_0 && !except2_0) && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
    if (p1_8 && (!break1_0 && !except1_0)) {
      exhale acc(_MaySet(c_5, 526803611440346310908232101056638787), write)
      inhale acc(c_5.Container_value, write)
    }
    if (p2_8 && (!break2_0 && !except2_0)) {
      exhale acc(_MaySet_0(c_5_0, 526803611440346310908232101056638787), write)
      inhale acc(c_5_0.Container_valuep, write)
    }
    if (p3_2 && (!break1_0 && !except1_0)) {
      c_5.Container_value := __prim__int___box__(8)
    }
    if (p4_2 && (!break2_0 && !except2_0)) {
      c_5_0.Container_valuep := __prim__int___box__(8)
    }
    if (p3_2 && (!break1_0 && !except1_0)) {
      break1_0 := true
    }
    if (p4_2 && (!break2_0 && !except2_0)) {
      break2_0 := true
    }
    if (p1_5 && (!break1_0 && !except1_0)) {
      // We are after loop body.
      _loop_check_before_0 := false
    }
    if (p2_5 && (!break2_0 && !except2_0)) {
      // We are after loop body.
      _loop_check_before_0_0 := false
    }
    assert (p1_5 && (!break1_0 && !except1_0) ==> _loop_termination_flag_0 ==> !true) && (p2_5 && (!break2_0 && !except2_0) ==> _loop_termination_flag_0_0 ==> !true)
  }
  // Loop Reconstruction.
  
  if (!bypass1_0 && (break1_0 || except1_0) || !bypass2_0 && (break2_0 || except2_0)) {
    break1_0 := oldbreak1_0
    break2_0 := oldbreak2_0
    except1_0 := oldexcept1_0
    except2_0 := oldexcept2_0
    inhale p1_4 && (!break1_0 && !except1_0) ==> true
    inhale p2_4 && (!break1_0 && !except1_0) ==> true
    p1_5 := p1_4 && (!break1_0 && !except1_0) && true
    p2_5 := p2_4 && (!break2_0 && !except2_0) && true
    idle1_0 := p1_4 && (!break1_0 && !except1_0) && !true
    idle2_0 := p2_4 && (!break2_0 && !except2_0) && !true
    if (p1_5 && (!break1_0 && !except1_0)) {
      _loop_measures_0 := Seq[Measure$]()
    }
    if (p2_5 && (!break2_0 && !except2_0)) {
      _loop_measures_0_0 := Seq[Measure$]()
    }
    var p1_6: Bool
    var p2_6: Bool
    var p3_2: Bool
    var p4_2: Bool
    p1_6 := p1_5 && (!break1_0 && !except1_0) && bool___unbox__(b_5)
    p2_6 := p2_5 && (!break2_0 && !except2_0) && bool___unbox__(b_5_0)
    p3_2 := p1_5 && (!break1_0 && !except1_0) && !bool___unbox__(b_5)
    p4_2 := p2_5 && (!break2_0 && !except2_0) && !bool___unbox__(b_5_0)
    var p1_7: Bool
    var p2_7: Bool
    var p3_3: Bool
    var p4_3: Bool
    p1_7 := p1_6 && (!break1_0 && !except1_0) && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
    p2_7 := p2_6 && (!break2_0 && !except2_0) && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
    p3_3 := p1_6 && (!break1_0 && !except1_0) && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
    p4_3 := p2_6 && (!break2_0 && !except2_0) && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
    if (p1_7 && (!break1_0 && !except1_0)) {
      exhale acc(_MaySet(c_5, 526803611440346310908232101056638787), write)
      inhale acc(c_5.Container_value, write)
    }
    if (p2_7 && (!break2_0 && !except2_0)) {
      exhale acc(_MaySet_0(c_5_0, 526803611440346310908232101056638787), write)
      inhale acc(c_5_0.Container_valuep, write)
    }
    if (p1_6 && (!break1_0 && !except1_0)) {
      c_5.Container_value := __prim__int___box__(7)
    }
    if (p2_6 && (!break2_0 && !except2_0)) {
      c_5_0.Container_valuep := __prim__int___box__(7)
    }
    var tmp_0: Ref
    tmp_0 := new()
    if (p1_6 && (!break1_0 && !except1_0)) {
      Exception_res_0 := tmp_0
    }
    if (p2_6 && (!break2_0 && !except2_0)) {
      Exception_res_0_0 := tmp_0
    }
    if (p1_6 && (!break1_0 && !except1_0)) {
      inhale typeof(Exception_res_0) == Exception()
    }
    if (p2_6 && (!break2_0 && !except2_0)) {
      inhale typeof(Exception_res_0_0) == Exception()
    }
    if (p1_6 && (!break1_0 && !except1_0)) {
      _err := Exception_res_0
      except1_0 := true
    }
    if (p2_6 && (!break2_0 && !except2_0)) {
      _err_1 := Exception_res_0_0
      except2_0 := true
    }
    var p1_8: Bool
    var p2_8: Bool
    var p3_4: Bool
    var p4_4: Bool
    p1_8 := p3_2 && (!break1_0 && !except1_0) && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
    p2_8 := p4_2 && (!break2_0 && !except2_0) && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
    p3_4 := p3_2 && (!break1_0 && !except1_0) && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
    p4_4 := p4_2 && (!break2_0 && !except2_0) && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
    if (p1_8 && (!break1_0 && !except1_0)) {
      exhale acc(_MaySet(c_5, 526803611440346310908232101056638787), write)
      inhale acc(c_5.Container_value, write)
    }
    if (p2_8 && (!break2_0 && !except2_0)) {
      exhale acc(_MaySet_0(c_5_0, 526803611440346310908232101056638787), write)
      inhale acc(c_5_0.Container_valuep, write)
    }
    if (p3_2 && (!break1_0 && !except1_0)) {
      c_5.Container_value := __prim__int___box__(8)
    }
    if (p4_2 && (!break2_0 && !except2_0)) {
      c_5_0.Container_valuep := __prim__int___box__(8)
    }
    if (p3_2 && (!break1_0 && !except1_0)) {
      break1_0 := true
    }
    if (p4_2 && (!break2_0 && !except2_0)) {
      break2_0 := true
    }
    if (p1_5 && (!break1_0 && !except1_0)) {
      // We are after loop body.
      _loop_check_before_0 := false
    }
    if (p2_5 && (!break2_0 && !except2_0)) {
      // We are after loop body.
      _loop_check_before_0_0 := false
    }
    assert (p1_5 && (!break1_0 && !except1_0) ==> _loop_termination_flag_0 ==> !true) && (p2_5 && (!break2_0 && !except2_0) ==> _loop_termination_flag_0_0 ==> !true)
    inhale !p1_5 || !(!break1_0 && !except1_0)
    inhale !p2_5 || !(!break2_0 && !except2_0)
  }
  if (!bypass1_0) {
    break1_0 := false
  }
  if (!bypass2_0) {
    break2_0 := false
  }
  if (p1_4 && (!break1_0 && !except1_0)) {
    // Reset MustTerminate amount to original level.
    exhale perm(MustTerminate(_cthread_158)) > none ==> acc(MustTerminate(_cthread_158), perm(MustTerminate(_cthread_158)) - _loop_original_must_terminate_0)
    _err := null
  }
  if (p2_4 && (!break2_0 && !except2_0)) {
    // Reset MustTerminate amount to original level.
    exhale perm(MustTerminate_0(_cthread_158_0)) > none ==> acc(MustTerminate_0(_cthread_158_0), perm(MustTerminate_0(_cthread_158_0)) - _loop_original_must_terminate_0_0)
    _err_1 := null
  }
}

method break_out_exception_3(p1_9: Bool, p2_9: Bool, _cthread_159: Ref, _cthread_159_0: Ref, _caller_measures_159: Seq[Measure$], _caller_measures_159_0: Seq[Measure$], _residue_159: Perm, _residue_159_0: Perm, c_1: Ref, c_1_0: Ref, b_1: Ref, b_1_0: Ref) returns (_current_wait_level_159: Perm, _current_wait_level_159_0: Perm, _err: Ref, _err_2: Ref)
  requires (p1_9 ==> _cthread_159 != null) && (p2_9 ==> _cthread_159_0 != null)
  requires (p1_9 ==> issubtype(typeof(_cthread_159), Thread_0())) && (p2_9 ==> issubtype(typeof(_cthread_159_0), Thread_0()))
  requires (p1_9 ==> issubtype(typeof(c_1), Container())) && (p2_9 ==> issubtype(typeof(c_1_0), Container()))
  requires (p1_9 ==> issubtype(typeof(b_1), bool())) && (p2_9 ==> issubtype(typeof(b_1_0), bool()))
  requires (p1_9 ==> acc(c_1.Container_value, write)) && (p2_9 ==> acc(c_1_0.Container_valuep, write)) && ((p1_9 ==> issubtype(typeof(c_1.Container_value), int())) && (p2_9 ==> issubtype(typeof(c_1_0.Container_valuep), int())))
  requires (p1_9 ==> [true, perm(MustTerminate(_cthread_159)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]) && (p2_9 ==> [true, perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_13: Ref [MustInvokeBounded_0(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded_0(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBoundedp] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnboundedp] :: false))))])
  ensures (p1_9 ==> [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_159) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159), true]) && (p2_9 ==> [(forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_159_0) && ((forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_159_0) && _residue_159_0 <= _current_wait_level_159_0), true])
  ensures (p1_9 ==> _err == null ==> acc(c_1.Container_value, write) && issubtype(typeof(c_1.Container_value), int()) && int___eq__(c_1.Container_value, __prim__int___box__(8))) && (p2_9 ==> _err_2 == null ==> acc(c_1_0.Container_valuep, write) && issubtype(typeof(c_1_0.Container_valuep), int()) && int___eq__(c_1_0.Container_valuep, __prim__int___box__(8)))
  ensures (p1_9 ==> _err != null && issubtype(typeof(_err), Exception()) ==> acc(c_1.Container_value, write) && issubtype(typeof(c_1.Container_value), int()) && int___eq__(c_1.Container_value, __prim__int___box__(9))) && (p2_9 ==> _err_2 != null && issubtype(typeof(_err_2), Exception()) ==> acc(c_1_0.Container_valuep, write) && issubtype(typeof(c_1_0.Container_valuep), int()) && int___eq__(c_1_0.Container_valuep, __prim__int___box__(9)))
  ensures (p1_9 ==> _err != null ==> issubtype(typeof(_err), Exception())) && (p2_9 ==> _err_2 != null ==> issubtype(typeof(_err_2), Exception()))
  ensures (p1_9 ==> [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]) && (p2_9 ==> [true, (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))])
{
  var break1_1: Bool
  var break2_1: Bool
  var except1_1: Bool
  var except2_1: Bool
  inhale p1_9
  break1_1 := false
  break2_1 := false
  except1_1 := false
  except2_1 := false
  var c_6: Ref
  var c_6_0: Ref
  var b_6: Ref
  var b_6_0: Ref
  var _loop_measures_1: Seq[Measure$]
  var _loop_measures_1_0: Seq[Measure$]
  var _loop_check_before_1: Bool
  var _loop_check_before_1_0: Bool
  var _loop_termination_flag_1: Bool
  var _loop_termination_flag_1_0: Bool
  var _loop_original_must_terminate_1: Perm
  var _loop_original_must_terminate_1_0: Perm
  var _residue_164: Perm
  var _residue_164_0: Perm
  var Exception_res_1: Ref
  var Exception_res_1_0: Ref
  var _cwl_159: Perm
  var _cwl_159_0: Perm
  var _method_measures_159: Seq[Measure$]
  var _method_measures_159_0: Seq[Measure$]
  if (p1_9 && (!break1_1 && !except1_1)) {
    _method_measures_159 := Seq[Measure$]()
    _err := null
    c_6 := c_1
    b_6 := b_1
    // Save current MustTerminate amount.
    _loop_original_must_terminate_1 := perm(MustTerminate(_cthread_159))
    // Save loop termination promise.
    _loop_termination_flag_1 := false
    // We are before loop.
    _loop_check_before_1 := true
  }
  if (p2_9 && (!break2_1 && !except2_1)) {
    _method_measures_159_0 := Seq[Measure$]()
    _err_2 := null
    c_6_0 := c_1_0
    b_6_0 := b_1_0
    // Save current MustTerminate amount.
    _loop_original_must_terminate_1_0 := perm(MustTerminate_0(_cthread_159_0))
    // Save loop termination promise.
    _loop_termination_flag_1_0 := false
    // We are before loop.
    _loop_check_before_1_0 := true
  }
  var bypass1_1: Bool
  var bypass2_1: Bool
  var tmp1_11: Seq[Measure$]
  var tmp2_11: Seq[Measure$]
  var tmp1_12: Ref
  var tmp2_12: Ref
  var tmp1_13: Bool
  var tmp2_13: Bool
  var tmp1_14: Ref
  var tmp2_14: Ref
  var tmp1_15: Bool
  var tmp2_15: Bool
  var tmp1_16: Bool
  var tmp2_16: Bool
  var oldbreak1_1: Bool
  var oldbreak2_1: Bool
  var oldexcept1_1: Bool
  var oldexcept2_1: Bool
  var p1_10: Bool
  var p2_10: Bool
  var idle1_1: Bool
  var idle2_1: Bool
  bypass1_1 := !(p1_9 && (!break1_1 && !except1_1))
  bypass2_1 := !(p2_9 && (!break2_1 && !except2_1))
  if (bypass1_1) {
    tmp1_11 := _loop_measures_1
    tmp1_12 := Exception_res_1
    tmp1_13 := except1_1
    tmp1_14 := _err
    tmp1_15 := _loop_check_before_1
    tmp1_16 := break1_1
  }
  if (bypass2_1) {
    tmp2_11 := _loop_measures_1_0
    tmp2_12 := Exception_res_1_0
    tmp2_13 := except2_1
    tmp2_14 := _err_2
    tmp2_15 := _loop_check_before_1_0
    tmp2_16 := break2_1
  }
  oldbreak1_1 := break1_1
  oldbreak2_1 := break2_1
  oldexcept1_1 := except1_1
  oldexcept2_1 := except2_1
  idle1_1 := false
  idle2_1 := false
  while (p1_9 && (!break1_1 && !except1_1) && !bypass1_1 && true || p2_9 && (!break2_1 && !except2_1) && !bypass2_1 && true)
    invariant (p1_9 && !bypass1_1 ==> [(forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _residue_164) && ((forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _residue_164) && _residue_159 <= _residue_164), true]) && (p2_9 && !bypass2_1 ==> [(forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: Level(_r_9) <= _residue_164_0) && ((forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: Level(_r_9) <= _residue_164_0) && _residue_159_0 <= _residue_164_0), true])
    invariant (p1_9 && !bypass1_1 ==> acc(c_6.Container_value, write)) && (p2_9 && !bypass2_1 ==> acc(c_6_0.Container_valuep, write)) && ((p1_9 && !bypass1_1 ==> issubtype(typeof(c_6.Container_value), int())) && (p2_9 && !bypass2_1 ==> issubtype(typeof(c_6_0.Container_valuep), int())))
    invariant (p1_9 && !bypass1_1 ==> [true, !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]) && (p2_9 && !bypass2_1 ==> [true, !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))])
    invariant (p1_9 && !bypass1_1 ==> [true, !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))]) && (p2_9 && !bypass2_1 ==> [true, !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))])
    invariant bypass1_1 ==> tmp1_13 == except1_1
    invariant bypass1_1 ==> tmp1_16 == break1_1
    invariant bypass1_1 ==> tmp1_11 == _loop_measures_1
    invariant bypass1_1 ==> tmp1_14 == _err
    invariant bypass1_1 ==> tmp1_15 == _loop_check_before_1
    invariant bypass1_1 ==> tmp1_12 == Exception_res_1
    invariant bypass2_1 ==> tmp2_11 == _loop_measures_1_0
    invariant bypass2_1 ==> tmp2_15 == _loop_check_before_1_0
    invariant bypass2_1 ==> tmp2_12 == Exception_res_1_0
    invariant bypass2_1 ==> tmp2_14 == _err_2
    invariant bypass2_1 ==> tmp2_13 == except2_1
    invariant bypass2_1 ==> tmp2_16 == break2_1 
  {
    p1_10 := p1_9 && (!break1_1 && !except1_1) && true
    p2_10 := p2_9 && (!break2_1 && !except2_1) && true
    idle1_1 := p1_9 && (!break1_1 && !except1_1) && !true
    idle2_1 := p2_9 && (!break2_1 && !except2_1) && !true
    if (p1_10 && (!break1_1 && !except1_1)) {
      _loop_measures_1 := Seq[Measure$]()
    }
    if (p2_10 && (!break2_1 && !except2_1)) {
      _loop_measures_1_0 := Seq[Measure$]()
    }
    var p1_11: Bool
    var p2_11: Bool
    var p3_5: Bool
    var p4_5: Bool
    p1_11 := p1_10 && (!break1_1 && !except1_1) && bool___unbox__(b_6)
    p2_11 := p2_10 && (!break2_1 && !except2_1) && bool___unbox__(b_6_0)
    p3_5 := p1_10 && (!break1_1 && !except1_1) && !bool___unbox__(b_6)
    p4_5 := p2_10 && (!break2_1 && !except2_1) && !bool___unbox__(b_6_0)
    var p1_12: Bool
    var p2_12: Bool
    var p3_6: Bool
    var p4_6: Bool
    p1_12 := p1_11 && (!break1_1 && !except1_1) && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
    p2_12 := p2_11 && (!break2_1 && !except2_1) && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
    p3_6 := p1_11 && (!break1_1 && !except1_1) && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
    p4_6 := p2_11 && (!break2_1 && !except2_1) && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
    if (p1_12 && (!break1_1 && !except1_1)) {
      exhale acc(_MaySet(c_6, 526803611440346310908232101056638787), write)
      inhale acc(c_6.Container_value, write)
    }
    if (p2_12 && (!break2_1 && !except2_1)) {
      exhale acc(_MaySet_0(c_6_0, 526803611440346310908232101056638787), write)
      inhale acc(c_6_0.Container_valuep, write)
    }
    if (p1_11 && (!break1_1 && !except1_1)) {
      c_6.Container_value := __prim__int___box__(7)
    }
    if (p2_11 && (!break2_1 && !except2_1)) {
      c_6_0.Container_valuep := __prim__int___box__(7)
    }
    var tmp_1: Ref
    tmp_1 := new()
    if (p1_11 && (!break1_1 && !except1_1)) {
      Exception_res_1 := tmp_1
    }
    if (p2_11 && (!break2_1 && !except2_1)) {
      Exception_res_1_0 := tmp_1
    }
    if (p1_11 && (!break1_1 && !except1_1)) {
      inhale typeof(Exception_res_1) == Exception()
    }
    if (p2_11 && (!break2_1 && !except2_1)) {
      inhale typeof(Exception_res_1_0) == Exception()
    }
    if (p1_11 && (!break1_1 && !except1_1)) {
      _err := Exception_res_1
      except1_1 := true
    }
    if (p2_11 && (!break2_1 && !except2_1)) {
      _err_2 := Exception_res_1_0
      except2_1 := true
    }
    var p1_13: Bool
    var p2_13: Bool
    var p3_7: Bool
    var p4_7: Bool
    p1_13 := p3_5 && (!break1_1 && !except1_1) && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
    p2_13 := p4_5 && (!break2_1 && !except2_1) && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
    p3_7 := p3_5 && (!break1_1 && !except1_1) && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
    p4_7 := p4_5 && (!break2_1 && !except2_1) && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
    if (p1_13 && (!break1_1 && !except1_1)) {
      exhale acc(_MaySet(c_6, 526803611440346310908232101056638787), write)
      inhale acc(c_6.Container_value, write)
    }
    if (p2_13 && (!break2_1 && !except2_1)) {
      exhale acc(_MaySet_0(c_6_0, 526803611440346310908232101056638787), write)
      inhale acc(c_6_0.Container_valuep, write)
    }
    if (p3_5 && (!break1_1 && !except1_1)) {
      c_6.Container_value := __prim__int___box__(8)
    }
    if (p4_5 && (!break2_1 && !except2_1)) {
      c_6_0.Container_valuep := __prim__int___box__(8)
    }
    if (p3_5 && (!break1_1 && !except1_1)) {
      break1_1 := true
    }
    if (p4_5 && (!break2_1 && !except2_1)) {
      break2_1 := true
    }
    if (p1_10 && (!break1_1 && !except1_1)) {
      // We are after loop body.
      _loop_check_before_1 := false
    }
    if (p2_10 && (!break2_1 && !except2_1)) {
      // We are after loop body.
      _loop_check_before_1_0 := false
    }
    assert (p1_10 && (!break1_1 && !except1_1) ==> _loop_termination_flag_1 ==> !true) && (p2_10 && (!break2_1 && !except2_1) ==> _loop_termination_flag_1_0 ==> !true)
  }
  // Loop Reconstruction.
  
  if (!bypass1_1 && (break1_1 || except1_1) || !bypass2_1 && (break2_1 || except2_1)) {
    break1_1 := oldbreak1_1
    break2_1 := oldbreak2_1
    except1_1 := oldexcept1_1
    except2_1 := oldexcept2_1
    inhale p1_9 && (!break1_1 && !except1_1) ==> true
    inhale p2_9 && (!break1_1 && !except1_1) ==> true
    p1_10 := p1_9 && (!break1_1 && !except1_1) && true
    p2_10 := p2_9 && (!break2_1 && !except2_1) && true
    idle1_1 := p1_9 && (!break1_1 && !except1_1) && !true
    idle2_1 := p2_9 && (!break2_1 && !except2_1) && !true
    if (p1_10 && (!break1_1 && !except1_1)) {
      _loop_measures_1 := Seq[Measure$]()
    }
    if (p2_10 && (!break2_1 && !except2_1)) {
      _loop_measures_1_0 := Seq[Measure$]()
    }
    var p1_11: Bool
    var p2_11: Bool
    var p3_5: Bool
    var p4_5: Bool
    p1_11 := p1_10 && (!break1_1 && !except1_1) && bool___unbox__(b_6)
    p2_11 := p2_10 && (!break2_1 && !except2_1) && bool___unbox__(b_6_0)
    p3_5 := p1_10 && (!break1_1 && !except1_1) && !bool___unbox__(b_6)
    p4_5 := p2_10 && (!break2_1 && !except2_1) && !bool___unbox__(b_6_0)
    var p1_12: Bool
    var p2_12: Bool
    var p3_6: Bool
    var p4_6: Bool
    p1_12 := p1_11 && (!break1_1 && !except1_1) && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
    p2_12 := p2_11 && (!break2_1 && !except2_1) && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
    p3_6 := p1_11 && (!break1_1 && !except1_1) && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
    p4_6 := p2_11 && (!break2_1 && !except2_1) && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
    if (p1_12 && (!break1_1 && !except1_1)) {
      exhale acc(_MaySet(c_6, 526803611440346310908232101056638787), write)
      inhale acc(c_6.Container_value, write)
    }
    if (p2_12 && (!break2_1 && !except2_1)) {
      exhale acc(_MaySet_0(c_6_0, 526803611440346310908232101056638787), write)
      inhale acc(c_6_0.Container_valuep, write)
    }
    if (p1_11 && (!break1_1 && !except1_1)) {
      c_6.Container_value := __prim__int___box__(7)
    }
    if (p2_11 && (!break2_1 && !except2_1)) {
      c_6_0.Container_valuep := __prim__int___box__(7)
    }
    var tmp_1: Ref
    tmp_1 := new()
    if (p1_11 && (!break1_1 && !except1_1)) {
      Exception_res_1 := tmp_1
    }
    if (p2_11 && (!break2_1 && !except2_1)) {
      Exception_res_1_0 := tmp_1
    }
    if (p1_11 && (!break1_1 && !except1_1)) {
      inhale typeof(Exception_res_1) == Exception()
    }
    if (p2_11 && (!break2_1 && !except2_1)) {
      inhale typeof(Exception_res_1_0) == Exception()
    }
    if (p1_11 && (!break1_1 && !except1_1)) {
      _err := Exception_res_1
      except1_1 := true
    }
    if (p2_11 && (!break2_1 && !except2_1)) {
      _err_2 := Exception_res_1_0
      except2_1 := true
    }
    var p1_13: Bool
    var p2_13: Bool
    var p3_7: Bool
    var p4_7: Bool
    p1_13 := p3_5 && (!break1_1 && !except1_1) && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
    p2_13 := p4_5 && (!break2_1 && !except2_1) && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
    p3_7 := p3_5 && (!break1_1 && !except1_1) && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
    p4_7 := p4_5 && (!break2_1 && !except2_1) && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
    if (p1_13 && (!break1_1 && !except1_1)) {
      exhale acc(_MaySet(c_6, 526803611440346310908232101056638787), write)
      inhale acc(c_6.Container_value, write)
    }
    if (p2_13 && (!break2_1 && !except2_1)) {
      exhale acc(_MaySet_0(c_6_0, 526803611440346310908232101056638787), write)
      inhale acc(c_6_0.Container_valuep, write)
    }
    if (p3_5 && (!break1_1 && !except1_1)) {
      c_6.Container_value := __prim__int___box__(8)
    }
    if (p4_5 && (!break2_1 && !except2_1)) {
      c_6_0.Container_valuep := __prim__int___box__(8)
    }
    if (p3_5 && (!break1_1 && !except1_1)) {
      break1_1 := true
    }
    if (p4_5 && (!break2_1 && !except2_1)) {
      break2_1 := true
    }
    if (p1_10 && (!break1_1 && !except1_1)) {
      // We are after loop body.
      _loop_check_before_1 := false
    }
    if (p2_10 && (!break2_1 && !except2_1)) {
      // We are after loop body.
      _loop_check_before_1_0 := false
    }
    assert (p1_10 && (!break1_1 && !except1_1) ==> _loop_termination_flag_1 ==> !true) && (p2_10 && (!break2_1 && !except2_1) ==> _loop_termination_flag_1_0 ==> !true)
    inhale !p1_10 || !(!break1_1 && !except1_1)
    inhale !p2_10 || !(!break2_1 && !except2_1)
  }
  if (!bypass1_1) {
    break1_1 := false
  }
  if (!bypass2_1) {
    break2_1 := false
  }
  if (p1_9 && (!break1_1 && !except1_1)) {
    // Reset MustTerminate amount to original level.
    exhale perm(MustTerminate(_cthread_159)) > none ==> acc(MustTerminate(_cthread_159), perm(MustTerminate(_cthread_159)) - _loop_original_must_terminate_1)
    _err := null
  }
  if (p2_9 && (!break2_1 && !except2_1)) {
    // Reset MustTerminate amount to original level.
    exhale perm(MustTerminate_0(_cthread_159_0)) > none ==> acc(MustTerminate_0(_cthread_159_0), perm(MustTerminate_0(_cthread_159_0)) - _loop_original_must_terminate_1_0)
    _err_2 := null
  }
}

method break_out(p1_14: Bool, p2_14: Bool, _cthread_160: Ref, _cthread_160_0: Ref, _caller_measures_160: Seq[Measure$], _caller_measures_160_0: Seq[Measure$], _residue_160: Perm, _residue_160_0: Perm, c_2: Ref, c_2_0: Ref, b_2: Ref, b_2_0: Ref) returns (_current_wait_level_160: Perm, _current_wait_level_160_0: Perm, _res: Ref, _res_0: Ref)
  requires (p1_14 ==> _cthread_160 != null) && (p2_14 ==> _cthread_160_0 != null)
  requires (p1_14 ==> issubtype(typeof(_cthread_160), Thread_0())) && (p2_14 ==> issubtype(typeof(_cthread_160_0), Thread_0()))
  requires (p1_14 ==> issubtype(typeof(c_2), Container())) && (p2_14 ==> issubtype(typeof(c_2_0), Container()))
  requires (p1_14 ==> issubtype(typeof(b_2), bool())) && (p2_14 ==> issubtype(typeof(b_2_0), bool()))
  requires (p1_14 ==> acc(c_2.Container_value, write)) && (p2_14 ==> acc(c_2_0.Container_valuep, write)) && ((p1_14 ==> issubtype(typeof(c_2.Container_value), int())) && (p2_14 ==> issubtype(typeof(c_2_0.Container_valuep), int())))
  requires (p1_14 ==> [true, perm(MustTerminate(_cthread_160)) == none && ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false))))]) && (p2_14 ==> [true, perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false))))])
  ensures (p1_14 ==> [(forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_160) && ((forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160), true]) && (p2_14 ==> [(forperm _r_16: Ref [_r_16.MustReleaseBoundedp] :: Level(_r_16) <= _current_wait_level_160_0) && ((forperm _r_16: Ref [_r_16.MustReleaseUnboundedp] :: Level(_r_16) <= _current_wait_level_160_0) && _residue_160_0 <= _current_wait_level_160_0), true])
  ensures (p1_14 ==> _res == null || issubtype(typeof(_res), int())) && (p2_14 ==> _res_0 == null || issubtype(typeof(_res_0), int()))
  ensures (p1_14 ==> acc(c_2.Container_value, write)) && (p2_14 ==> acc(c_2_0.Container_valuep, write)) && ((p1_14 ==> issubtype(typeof(c_2.Container_value), int())) && (p2_14 ==> issubtype(typeof(c_2_0.Container_valuep), int()))) && ((p1_14 ==> int___eq__(c_2.Container_value, __prim__int___box__(8))) && (p2_14 ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(8))))
  ensures (p1_14 ==> [true, (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)))]) && (p2_14 ==> [true, (forperm _r_17: Ref [MustInvokeBounded_0(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded_0(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: false)))])
{
  var break1_2: Bool
  var break2_2: Bool
  inhale p1_14
  break1_2 := false
  break2_2 := false
  var _err: Ref
  var _err_3: Ref
  var c_7: Ref
  var c_7_0: Ref
  var b_7: Ref
  var b_7_0: Ref
  var _loop_measures_2: Seq[Measure$]
  var _loop_measures_2_0: Seq[Measure$]
  var _loop_check_before_2: Bool
  var _loop_check_before_2_0: Bool
  var _loop_termination_flag_2: Bool
  var _loop_termination_flag_2_0: Bool
  var _loop_original_must_terminate_2: Perm
  var _loop_original_must_terminate_2_0: Perm
  var _residue_165: Perm
  var _residue_165_0: Perm
  var _cwl_160: Perm
  var _cwl_160_0: Perm
  var _method_measures_160: Seq[Measure$]
  var _method_measures_160_0: Seq[Measure$]
  if (p1_14 && !break1_2) {
    _method_measures_160 := Seq[Measure$]()
    _res := null
    _err := null
    c_7 := c_2
    b_7 := b_2
    // Save current MustTerminate amount.
    _loop_original_must_terminate_2 := perm(MustTerminate(_cthread_160))
    // Save loop termination promise.
    _loop_termination_flag_2 := false
    // We are before loop.
    _loop_check_before_2 := true
  }
  if (p2_14 && !break2_2) {
    _method_measures_160_0 := Seq[Measure$]()
    _res_0 := null
    _err_3 := null
    c_7_0 := c_2_0
    b_7_0 := b_2_0
    // Save current MustTerminate amount.
    _loop_original_must_terminate_2_0 := perm(MustTerminate_0(_cthread_160_0))
    // Save loop termination promise.
    _loop_termination_flag_2_0 := false
    // We are before loop.
    _loop_check_before_2_0 := true
  }
  var bypass1_2: Bool
  var bypass2_2: Bool
  var tmp1_17: Seq[Measure$]
  var tmp2_17: Seq[Measure$]
  var tmp1_18: Bool
  var tmp2_18: Bool
  var tmp1_19: Bool
  var tmp2_19: Bool
  var oldbreak1_2: Bool
  var oldbreak2_2: Bool
  var p1_15: Bool
  var p2_15: Bool
  var idle1_2: Bool
  var idle2_2: Bool
  bypass1_2 := !(p1_14 && !break1_2)
  bypass2_2 := !(p2_14 && !break2_2)
  if (bypass1_2) {
    tmp1_17 := _loop_measures_2
    tmp1_18 := _loop_check_before_2
    tmp1_19 := break1_2
  }
  if (bypass2_2) {
    tmp2_17 := _loop_measures_2_0
    tmp2_18 := _loop_check_before_2_0
    tmp2_19 := break2_2
  }
  oldbreak1_2 := break1_2
  oldbreak2_2 := break2_2
  idle1_2 := false
  idle2_2 := false
  while (p1_14 && !break1_2 && !bypass1_2 && true || p2_14 && !break2_2 && !bypass2_2 && true)
    invariant (p1_14 && !bypass1_2 ==> [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _residue_165) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _residue_165) && _residue_160 <= _residue_165), true]) && (p2_14 && !bypass2_2 ==> [(forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _residue_165_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _residue_165_0) && _residue_160_0 <= _residue_165_0), true])
    invariant (p1_14 && !bypass1_2 ==> acc(c_7.Container_value, write)) && (p2_14 && !bypass2_2 ==> acc(c_7_0.Container_valuep, write)) && ((p1_14 && !bypass1_2 ==> issubtype(typeof(c_7.Container_value), int())) && (p2_14 && !bypass2_2 ==> issubtype(typeof(c_7_0.Container_valuep), int())))
    invariant (p1_14 && !bypass1_2 ==> [true, !idle1_2 ==> _loop_check_before_2 ==> _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))]) && (p2_14 && !bypass2_2 ==> [true, !idle2_2 ==> _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))])
    invariant (p1_14 && !bypass1_2 ==> [true, !idle1_2 ==> !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]) && (p2_14 && !bypass2_2 ==> [true, !idle2_2 ==> !_loop_check_before_2_0 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))])
    invariant bypass1_2 ==> tmp1_17 == _loop_measures_2
    invariant bypass1_2 ==> tmp1_18 == _loop_check_before_2
    invariant bypass1_2 ==> tmp1_19 == break1_2
    invariant bypass2_2 ==> tmp2_17 == _loop_measures_2_0
    invariant bypass2_2 ==> tmp2_18 == _loop_check_before_2_0
    invariant bypass2_2 ==> tmp2_19 == break2_2 
  {
    p1_15 := p1_14 && !break1_2 && true
    p2_15 := p2_14 && !break2_2 && true
    idle1_2 := p1_14 && !break1_2 && !true
    idle2_2 := p2_14 && !break2_2 && !true
    if (p1_15 && !break1_2) {
      _loop_measures_2 := Seq[Measure$]()
    }
    if (p2_15 && !break2_2) {
      _loop_measures_2_0 := Seq[Measure$]()
    }
    var p1_16: Bool
    var p2_16: Bool
    var p3_8: Bool
    var p4_8: Bool
    p1_16 := p1_15 && !break1_2 && perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none
    p2_16 := p2_15 && !break2_2 && perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none
    p3_8 := p1_15 && !break1_2 && !(perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none)
    p4_8 := p2_15 && !break2_2 && !(perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none)
    if (p1_16 && !break1_2) {
      exhale acc(_MaySet(c_7, 526803611440346310908232101056638787), write)
      inhale acc(c_7.Container_value, write)
    }
    if (p2_16 && !break2_2) {
      exhale acc(_MaySet_0(c_7_0, 526803611440346310908232101056638787), write)
      inhale acc(c_7_0.Container_valuep, write)
    }
    if (p1_15 && !break1_2) {
      c_7.Container_value := __prim__int___box__(8)
    }
    if (p2_15 && !break2_2) {
      c_7_0.Container_valuep := __prim__int___box__(8)
    }
    if (p1_15 && !break1_2) {
      break1_2 := true
    }
    if (p2_15 && !break2_2) {
      break2_2 := true
    }
    if (p1_15 && !break1_2) {
      // We are after loop body.
      _loop_check_before_2 := false
    }
    if (p2_15 && !break2_2) {
      // We are after loop body.
      _loop_check_before_2_0 := false
    }
    assert (p1_15 && !break1_2 ==> _loop_termination_flag_2 ==> !true) && (p2_15 && !break2_2 ==> _loop_termination_flag_2_0 ==> !true)
  }
  // Loop Reconstruction.
  
  if (!bypass1_2 && break1_2 || !bypass2_2 && break2_2) {
    break1_2 := oldbreak1_2
    break2_2 := oldbreak2_2
    inhale p1_14 && !break1_2 ==> true
    inhale p2_14 && !break1_2 ==> true
    p1_15 := p1_14 && !break1_2 && true
    p2_15 := p2_14 && !break2_2 && true
    idle1_2 := p1_14 && !break1_2 && !true
    idle2_2 := p2_14 && !break2_2 && !true
    if (p1_15 && !break1_2) {
      _loop_measures_2 := Seq[Measure$]()
    }
    if (p2_15 && !break2_2) {
      _loop_measures_2_0 := Seq[Measure$]()
    }
    var p1_16: Bool
    var p2_16: Bool
    var p3_8: Bool
    var p4_8: Bool
    p1_16 := p1_15 && !break1_2 && perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none
    p2_16 := p2_15 && !break2_2 && perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none
    p3_8 := p1_15 && !break1_2 && !(perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none)
    p4_8 := p2_15 && !break2_2 && !(perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none)
    if (p1_16 && !break1_2) {
      exhale acc(_MaySet(c_7, 526803611440346310908232101056638787), write)
      inhale acc(c_7.Container_value, write)
    }
    if (p2_16 && !break2_2) {
      exhale acc(_MaySet_0(c_7_0, 526803611440346310908232101056638787), write)
      inhale acc(c_7_0.Container_valuep, write)
    }
    if (p1_15 && !break1_2) {
      c_7.Container_value := __prim__int___box__(8)
    }
    if (p2_15 && !break2_2) {
      c_7_0.Container_valuep := __prim__int___box__(8)
    }
    if (p1_15 && !break1_2) {
      break1_2 := true
    }
    if (p2_15 && !break2_2) {
      break2_2 := true
    }
    if (p1_15 && !break1_2) {
      // We are after loop body.
      _loop_check_before_2 := false
    }
    if (p2_15 && !break2_2) {
      // We are after loop body.
      _loop_check_before_2_0 := false
    }
    assert (p1_15 && !break1_2 ==> _loop_termination_flag_2 ==> !true) && (p2_15 && !break2_2 ==> _loop_termination_flag_2_0 ==> !true)
    inhale !p1_15 || !!break1_2
    inhale !p2_15 || !!break2_2
  }
  if (!bypass1_2) {
    break1_2 := false
  }
  if (!bypass2_2) {
    break2_2 := false
  }
  if (p1_14 && !break1_2) {
    // Reset MustTerminate amount to original level.
    exhale perm(MustTerminate(_cthread_160)) > none ==> acc(MustTerminate(_cthread_160), perm(MustTerminate(_cthread_160)) - _loop_original_must_terminate_2)
    _res := null
  }
  if (p2_14 && !break2_2) {
    // Reset MustTerminate amount to original level.
    exhale perm(MustTerminate_0(_cthread_160_0)) > none ==> acc(MustTerminate_0(_cthread_160_0), perm(MustTerminate_0(_cthread_160_0)) - _loop_original_must_terminate_2_0)
    _res_0 := null
  }
  assert true
}

method break_out_2(p1_17: Bool, p2_17: Bool, _cthread_161: Ref, _cthread_161_0: Ref, _caller_measures_161: Seq[Measure$], _caller_measures_161_0: Seq[Measure$], _residue_161: Perm, _residue_161_0: Perm, c_3: Ref, c_3_0: Ref, b_3: Ref, b_3_0: Ref) returns (_current_wait_level_161: Perm, _current_wait_level_161_0: Perm, _res: Ref, _res_1: Ref)
  requires (p1_17 ==> _cthread_161 != null) && (p2_17 ==> _cthread_161_0 != null)
  requires (p1_17 ==> issubtype(typeof(_cthread_161), Thread_0())) && (p2_17 ==> issubtype(typeof(_cthread_161_0), Thread_0()))
  requires (p1_17 ==> issubtype(typeof(c_3), Container())) && (p2_17 ==> issubtype(typeof(c_3_0), Container()))
  requires (p1_17 ==> issubtype(typeof(b_3), bool())) && (p2_17 ==> issubtype(typeof(b_3_0), bool()))
  requires (p1_17 ==> acc(c_3.Container_value, write)) && (p2_17 ==> acc(c_3_0.Container_valuep, write)) && ((p1_17 ==> issubtype(typeof(c_3.Container_value), int())) && (p2_17 ==> issubtype(typeof(c_3_0.Container_valuep), int())))
  requires (p1_17 ==> [true, perm(MustTerminate(_cthread_161)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false))))]) && (p2_17 ==> [true, perm(MustTerminate_0(_cthread_161_0)) == none && ((forperm _r_23: Ref [MustInvokeBounded_0(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded_0(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBoundedp] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnboundedp] :: false))))])
  ensures (p1_17 ==> [(forperm _r_21: Ref [_r_21.MustReleaseBounded] :: Level(_r_21) <= _current_wait_level_161) && ((forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: Level(_r_21) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161), true]) && (p2_17 ==> [(forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: Level(_r_21) <= _current_wait_level_161_0) && ((forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: Level(_r_21) <= _current_wait_level_161_0) && _residue_161_0 <= _current_wait_level_161_0), true])
  ensures (p1_17 ==> _res == null || issubtype(typeof(_res), int())) && (p2_17 ==> _res_1 == null || issubtype(typeof(_res_1), int()))
  ensures (p1_17 ==> acc(c_3.Container_value, write)) && (p2_17 ==> acc(c_3_0.Container_valuep, write)) && ((p1_17 ==> issubtype(typeof(c_3.Container_value), int())) && (p2_17 ==> issubtype(typeof(c_3_0.Container_valuep), int()))) && ((p1_17 ==> int___eq__(c_3.Container_value, __prim__int___box__(9))) && (p2_17 ==> int___eq__(c_3_0.Container_valuep, __prim__int___box__(9))))
  ensures (p1_17 ==> [true, (forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false)))]) && (p2_17 ==> [true, (forperm _r_22: Ref [MustInvokeBounded_0(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded_0(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBoundedp] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnboundedp] :: false)))])
{
  var break1_3: Bool
  var break2_3: Bool
  inhale p1_17
  break1_3 := false
  break2_3 := false
  var _err: Ref
  var _err_4: Ref
  var c_8: Ref
  var c_8_0: Ref
  var b_8: Ref
  var b_8_0: Ref
  var _loop_measures_3: Seq[Measure$]
  var _loop_measures_3_0: Seq[Measure$]
  var _loop_check_before_3: Bool
  var _loop_check_before_3_0: Bool
  var _loop_termination_flag_3: Bool
  var _loop_termination_flag_3_0: Bool
  var _loop_original_must_terminate_3: Perm
  var _loop_original_must_terminate_3_0: Perm
  var _residue_166: Perm
  var _residue_166_0: Perm
  var _cwl_161: Perm
  var _cwl_161_0: Perm
  var _method_measures_161: Seq[Measure$]
  var _method_measures_161_0: Seq[Measure$]
  if (p1_17 && !break1_3) {
    _method_measures_161 := Seq[Measure$]()
    _res := null
    _err := null
    c_8 := c_3
    b_8 := b_3
    // Save current MustTerminate amount.
    _loop_original_must_terminate_3 := perm(MustTerminate(_cthread_161))
    // Save loop termination promise.
    _loop_termination_flag_3 := false
    // We are before loop.
    _loop_check_before_3 := true
  }
  if (p2_17 && !break2_3) {
    _method_measures_161_0 := Seq[Measure$]()
    _res_1 := null
    _err_4 := null
    c_8_0 := c_3_0
    b_8_0 := b_3_0
    // Save current MustTerminate amount.
    _loop_original_must_terminate_3_0 := perm(MustTerminate_0(_cthread_161_0))
    // Save loop termination promise.
    _loop_termination_flag_3_0 := false
    // We are before loop.
    _loop_check_before_3_0 := true
  }
  var bypass1_3: Bool
  var bypass2_3: Bool
  var tmp1_20: Seq[Measure$]
  var tmp2_20: Seq[Measure$]
  var tmp1_21: Bool
  var tmp2_21: Bool
  var tmp1_22: Bool
  var tmp2_22: Bool
  var oldbreak1_3: Bool
  var oldbreak2_3: Bool
  var p1_18: Bool
  var p2_18: Bool
  var idle1_3: Bool
  var idle2_3: Bool
  bypass1_3 := !(p1_17 && !break1_3)
  bypass2_3 := !(p2_17 && !break2_3)
  if (bypass1_3) {
    tmp1_20 := _loop_measures_3
    tmp1_21 := _loop_check_before_3
    tmp1_22 := break1_3
  }
  if (bypass2_3) {
    tmp2_20 := _loop_measures_3_0
    tmp2_21 := _loop_check_before_3_0
    tmp2_22 := break2_3
  }
  oldbreak1_3 := break1_3
  oldbreak2_3 := break2_3
  idle1_3 := false
  idle2_3 := false
  while (p1_17 && !break1_3 && !bypass1_3 && true || p2_17 && !break2_3 && !bypass2_3 && true)
    invariant (p1_17 && !bypass1_3 ==> [(forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _residue_166) && ((forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _residue_166) && _residue_161 <= _residue_166), true]) && (p2_17 && !bypass2_3 ==> [(forperm _r_19: Ref [_r_19.MustReleaseBoundedp] :: Level(_r_19) <= _residue_166_0) && ((forperm _r_19: Ref [_r_19.MustReleaseUnboundedp] :: Level(_r_19) <= _residue_166_0) && _residue_161_0 <= _residue_166_0), true])
    invariant (p1_17 && !bypass1_3 ==> acc(c_8.Container_value, write)) && (p2_17 && !bypass2_3 ==> acc(c_8_0.Container_valuep, write)) && ((p1_17 && !bypass1_3 ==> issubtype(typeof(c_8.Container_value), int())) && (p2_17 && !bypass2_3 ==> issubtype(typeof(c_8_0.Container_valuep), int())))
    invariant (p1_17 && !bypass1_3 ==> [true, !idle1_3 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate(_cthread_161)) == none && ((forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false))))]) && (p2_17 && !bypass2_3 ==> [true, !idle2_3 ==> _loop_check_before_3_0 ==> _loop_termination_flag_3_0 || perm(MustTerminate_0(_cthread_161_0)) == none && ((forperm _r_20: Ref [MustInvokeBounded_0(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded_0(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBoundedp] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnboundedp] :: false))))])
    invariant (p1_17 && !bypass1_3 ==> [true, !idle1_3 ==> !_loop_check_before_3 ==> (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))]) && (p2_17 && !bypass2_3 ==> [true, !idle2_3 ==> !_loop_check_before_3_0 ==> (forperm _r_20: Ref [MustInvokeBounded_0(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded_0(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBoundedp] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnboundedp] :: false)))])
    invariant bypass1_3 ==> tmp1_20 == _loop_measures_3
    invariant bypass1_3 ==> tmp1_21 == _loop_check_before_3
    invariant bypass1_3 ==> tmp1_22 == break1_3
    invariant bypass2_3 ==> tmp2_20 == _loop_measures_3_0
    invariant bypass2_3 ==> tmp2_21 == _loop_check_before_3_0
    invariant bypass2_3 ==> tmp2_22 == break2_3 
  {
    p1_18 := p1_17 && !break1_3 && true
    p2_18 := p2_17 && !break2_3 && true
    idle1_3 := p1_17 && !break1_3 && !true
    idle2_3 := p2_17 && !break2_3 && !true
    if (p1_18 && !break1_3) {
      _loop_measures_3 := Seq[Measure$]()
    }
    if (p2_18 && !break2_3) {
      _loop_measures_3_0 := Seq[Measure$]()
    }
    var p1_19: Bool
    var p2_19: Bool
    var p3_9: Bool
    var p4_9: Bool
    p1_19 := p1_18 && !break1_3 && perm(_MaySet(c_8, 526803611440346310908232101056638787)) > none
    p2_19 := p2_18 && !break2_3 && perm(_MaySet_0(c_8_0, 526803611440346310908232101056638787)) > none
    p3_9 := p1_18 && !break1_3 && !(perm(_MaySet(c_8, 526803611440346310908232101056638787)) > none)
    p4_9 := p2_18 && !break2_3 && !(perm(_MaySet_0(c_8_0, 526803611440346310908232101056638787)) > none)
    if (p1_19 && !break1_3) {
      exhale acc(_MaySet(c_8, 526803611440346310908232101056638787), write)
      inhale acc(c_8.Container_value, write)
    }
    if (p2_19 && !break2_3) {
      exhale acc(_MaySet_0(c_8_0, 526803611440346310908232101056638787), write)
      inhale acc(c_8_0.Container_valuep, write)
    }
    if (p1_18 && !break1_3) {
      c_8.Container_value := __prim__int___box__(8)
    }
    if (p2_18 && !break2_3) {
      c_8_0.Container_valuep := __prim__int___box__(8)
    }
    if (p1_18 && !break1_3) {
      break1_3 := true
    }
    if (p2_18 && !break2_3) {
      break2_3 := true
    }
    if (p1_18 && !break1_3) {
      // We are after loop body.
      _loop_check_before_3 := false
    }
    if (p2_18 && !break2_3) {
      // We are after loop body.
      _loop_check_before_3_0 := false
    }
    assert (p1_18 && !break1_3 ==> _loop_termination_flag_3 ==> !true) && (p2_18 && !break2_3 ==> _loop_termination_flag_3_0 ==> !true)
  }
  // Loop Reconstruction.
  
  if (!bypass1_3 && break1_3 || !bypass2_3 && break2_3) {
    break1_3 := oldbreak1_3
    break2_3 := oldbreak2_3
    inhale p1_17 && !break1_3 ==> true
    inhale p2_17 && !break1_3 ==> true
    p1_18 := p1_17 && !break1_3 && true
    p2_18 := p2_17 && !break2_3 && true
    idle1_3 := p1_17 && !break1_3 && !true
    idle2_3 := p2_17 && !break2_3 && !true
    if (p1_18 && !break1_3) {
      _loop_measures_3 := Seq[Measure$]()
    }
    if (p2_18 && !break2_3) {
      _loop_measures_3_0 := Seq[Measure$]()
    }
    var p1_19: Bool
    var p2_19: Bool
    var p3_9: Bool
    var p4_9: Bool
    p1_19 := p1_18 && !break1_3 && perm(_MaySet(c_8, 526803611440346310908232101056638787)) > none
    p2_19 := p2_18 && !break2_3 && perm(_MaySet_0(c_8_0, 526803611440346310908232101056638787)) > none
    p3_9 := p1_18 && !break1_3 && !(perm(_MaySet(c_8, 526803611440346310908232101056638787)) > none)
    p4_9 := p2_18 && !break2_3 && !(perm(_MaySet_0(c_8_0, 526803611440346310908232101056638787)) > none)
    if (p1_19 && !break1_3) {
      exhale acc(_MaySet(c_8, 526803611440346310908232101056638787), write)
      inhale acc(c_8.Container_value, write)
    }
    if (p2_19 && !break2_3) {
      exhale acc(_MaySet_0(c_8_0, 526803611440346310908232101056638787), write)
      inhale acc(c_8_0.Container_valuep, write)
    }
    if (p1_18 && !break1_3) {
      c_8.Container_value := __prim__int___box__(8)
    }
    if (p2_18 && !break2_3) {
      c_8_0.Container_valuep := __prim__int___box__(8)
    }
    if (p1_18 && !break1_3) {
      break1_3 := true
    }
    if (p2_18 && !break2_3) {
      break2_3 := true
    }
    if (p1_18 && !break1_3) {
      // We are after loop body.
      _loop_check_before_3 := false
    }
    if (p2_18 && !break2_3) {
      // We are after loop body.
      _loop_check_before_3_0 := false
    }
    assert (p1_18 && !break1_3 ==> _loop_termination_flag_3 ==> !true) && (p2_18 && !break2_3 ==> _loop_termination_flag_3_0 ==> !true)
    inhale !p1_18 || !!break1_3
    inhale !p2_18 || !!break2_3
  }
  if (!bypass1_3) {
    break1_3 := false
  }
  if (!bypass2_3) {
    break2_3 := false
  }
  if (p1_17 && !break1_3) {
    // Reset MustTerminate amount to original level.
    exhale perm(MustTerminate(_cthread_161)) > none ==> acc(MustTerminate(_cthread_161), perm(MustTerminate(_cthread_161)) - _loop_original_must_terminate_3)
    _res := null
  }
  if (p2_17 && !break2_3) {
    // Reset MustTerminate amount to original level.
    exhale perm(MustTerminate_0(_cthread_161_0)) > none ==> acc(MustTerminate_0(_cthread_161_0), perm(MustTerminate_0(_cthread_161_0)) - _loop_original_must_terminate_3_0)
    _res_1 := null
  }
  assert true
}

method Container___init__(p1_20: Bool, p2_20: Bool, _cthread_156: Ref, _cthread_156_0: Ref, _caller_measures_156: Seq[Measure$], _caller_measures_156_0: Seq[Measure$], _residue_156: Perm, _residue_156_0: Perm, self: Ref, self_1: Ref) returns (_current_wait_level_156: Perm, _current_wait_level_156_0: Perm)
  requires (p1_20 ==> _cthread_156 != null) && (p2_20 ==> _cthread_156_0 != null)
  requires (p1_20 ==> issubtype(typeof(_cthread_156), Thread_0())) && (p2_20 ==> issubtype(typeof(_cthread_156_0), Thread_0()))
  requires (p1_20 ==> self != null) && (p2_20 ==> self_1 != null)
  requires (p1_20 ==> acc(_MaySet(self, 526803611440346310908232101056638787), write)) && (p2_20 ==> acc(_MaySet_0(self_1, 526803611440346310908232101056638787), write))
  requires (p1_20 ==> issubtype(typeof(self), Container())) && (p2_20 ==> issubtype(typeof(self_1), Container()))
  requires (p1_20 ==> self != null) && (p2_20 ==> self_1 != null)
  requires (p1_20 ==> [true, perm(MustTerminate(_cthread_156)) == none && ((forperm _r_26: Ref [MustInvokeBounded(_r_26)] :: false) && ((forperm _r_26: Ref [MustInvokeUnbounded(_r_26)] :: false) && ((forperm _r_26: Ref [_r_26.MustReleaseBounded] :: false) && (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: false))))]) && (p2_20 ==> [true, perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_26: Ref [MustInvokeBounded_0(_r_26)] :: false) && ((forperm _r_26: Ref [MustInvokeUnbounded_0(_r_26)] :: false) && ((forperm _r_26: Ref [_r_26.MustReleaseBoundedp] :: false) && (forperm _r_26: Ref [_r_26.MustReleaseUnboundedp] :: false))))])
  ensures (p1_20 ==> [(forperm _r_24: Ref [_r_24.MustReleaseBounded] :: Level(_r_24) <= _current_wait_level_156) && ((forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: Level(_r_24) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]) && (p2_20 ==> [(forperm _r_24: Ref [_r_24.MustReleaseBoundedp] :: Level(_r_24) <= _current_wait_level_156_0) && ((forperm _r_24: Ref [_r_24.MustReleaseUnboundedp] :: Level(_r_24) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0), true])
  ensures (p1_20 ==> acc(self.Container_value, write)) && (p2_20 ==> acc(self_1.Container_valuep, write)) && ((p1_20 ==> issubtype(typeof(self.Container_value), int())) && (p2_20 ==> issubtype(typeof(self_1.Container_valuep), int()))) && ((p1_20 ==> int___eq__(self.Container_value, __prim__int___box__(0))) && (p2_20 ==> int___eq__(self_1.Container_valuep, __prim__int___box__(0))))
  ensures (p1_20 ==> [true, (forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false)))]) && (p2_20 ==> [true, (forperm _r_25: Ref [MustInvokeBounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBoundedp] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_20
  var _err: Ref
  var _err_5: Ref
  var self_0: Ref
  var self_0_0: Ref
  var _cwl_156: Perm
  var _cwl_156_0: Perm
  var _method_measures_156: Seq[Measure$]
  var _method_measures_156_0: Seq[Measure$]
  if (p1_20) {
    _method_measures_156 := Seq[Measure$]()
    inhale typeof(self) == Container()
    _err := null
    self_0 := self
  }
  if (p2_20) {
    _method_measures_156_0 := Seq[Measure$]()
    inhale typeof(self_1) == Container()
    _err_5 := null
    self_0_0 := self_1
  }
  var p1_21: Bool
  var p2_21: Bool
  var p3_10: Bool
  var p4_10: Bool
  p1_21 := p1_20 && perm(_MaySet(self_0, 526803611440346310908232101056638787)) > none
  p2_21 := p2_20 && perm(_MaySet_0(self_0_0, 526803611440346310908232101056638787)) > none
  p3_10 := p1_20 && !(perm(_MaySet(self_0, 526803611440346310908232101056638787)) > none)
  p4_10 := p2_20 && !(perm(_MaySet_0(self_0_0, 526803611440346310908232101056638787)) > none)
  if (p1_21) {
    exhale acc(_MaySet(self_0, 526803611440346310908232101056638787), write)
    inhale acc(self_0.Container_value, write)
  }
  if (p2_21) {
    exhale acc(_MaySet_0(self_0_0, 526803611440346310908232101056638787), write)
    inhale acc(self_0_0.Container_valuep, write)
  }
  if (p1_20) {
    self_0.Container_value := __prim__int___box__(0)
  }
  if (p2_20) {
    self_0_0.Container_valuep := __prim__int___box__(0)
  }
  assert true
}

method main(p1_22: Bool, p2_22: Bool, _cthread_162: Ref, _cthread_162_0: Ref, _caller_measures_162: Seq[Measure$], _caller_measures_162_0: Seq[Measure$], _residue_167: Perm, _residue_167_0: Perm) returns (_current_wait_level_162: Perm, _current_wait_level_162_0: Perm)
  requires (p1_22 ==> _cthread_162 != null) && (p2_22 ==> _cthread_162_0 != null)
  requires (p1_22 ==> issubtype(typeof(_cthread_162), Thread_0())) && (p2_22 ==> issubtype(typeof(_cthread_162_0), Thread_0()))
  requires (p1_22 ==> [true, perm(MustTerminate(_cthread_162)) == none && ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false))))]) && (p2_22 ==> [true, perm(MustTerminate_0(_cthread_162_0)) == none && ((forperm _r_29: Ref [MustInvokeBounded_0(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded_0(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBoundedp] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnboundedp] :: false))))])
  ensures (p1_22 ==> [(forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_162) && ((forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_162) && _residue_167 <= _current_wait_level_162), true]) && (p2_22 ==> [(forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: Level(_r_27) <= _current_wait_level_162_0) && ((forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: Level(_r_27) <= _current_wait_level_162_0) && _residue_167_0 <= _current_wait_level_162_0), true])
  ensures (p1_22 ==> [true, (forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false)))]) && (p2_22 ==> [true, (forperm _r_28: Ref [MustInvokeBounded_0(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded_0(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBoundedp] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_22
  var module_defined_0: Bool
  var module_defined_0_0: Bool
  var module_names_0: Set[_Name]
  var module_names_0_0: Set[_Name]
  var _err: Ref
  var _err_6: Ref
  var _cwl_162: Perm
  var _cwl_162_0: Perm
  var _method_measures_162: Seq[Measure$]
  var _method_measures_162_0: Seq[Measure$]
  if (p1_22) {
    _method_measures_162 := Seq[Measure$]()
    module_defined_0 := true
    module_names_0 := Set[_Name]()
    module_names_0 := (module_names_0 union Set(_single(6872323072689856351)))
    inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
    module_names_0 := (module_names_0 union Set(_single(6872323076851130207)))
    inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 6872332955275845471), __name__()._val)
    _err := null
    module_names_0 := (module_names_0 union Set(_single(7809644653626814543)))
    module_names_0 := (module_names_0 union Set(_single(6872339552563453791)))
    module_names_0 := (module_names_0 union Set(_single(2110237719515443916611)))
  }
  if (p2_22) {
    _method_measures_162_0 := Seq[Measure$]()
    module_defined_0_0 := true
    module_names_0_0 := Set[_Name]()
    module_names_0_0 := (module_names_0_0 union Set(_single(6872323072689856351)))
    inhale acc(__file__()._valp, 99 / 100) && issubtype(typeof(__file__()._valp), str()) && issubtype(typeof(__file__()._valp), str())
    module_names_0_0 := (module_names_0_0 union Set(_single(6872323076851130207)))
    inhale acc(__name__()._valp, 99 / 100) && issubtype(typeof(__name__()._valp), str()) && issubtype(typeof(__name__()._valp), str()) && str___eq__(str___create__(8, 6872332955275845471), __name__()._valp)
    _err_6 := null
    module_names_0_0 := (module_names_0_0 union Set(_single(7809644653626814543)))
    module_names_0_0 := (module_names_0_0 union Set(_single(6872339552563453791)))
    module_names_0_0 := (module_names_0_0 union Set(_single(2110237719515443916611)))
  }
  assert (p1_22 ==> true) && (p2_22 ==> true) && ((p1_22 ==> (_single(2110237719515443916611) in module_names_0)) && (p2_22 ==> (_single(2110237719515443916611) in module_names_0_0)))
  if (p1_22) {
    module_names_0 := (module_names_0 union Set(_single(2462787319999361794910321058731914341315342946)))
  }
  if (p2_22) {
    module_names_0_0 := (module_names_0_0 union Set(_single(2462787319999361794910321058731914341315342946)))
  }
  assert (p1_22 ==> true) && (p2_22 ==> true) && ((p1_22 ==> (_single(2110237719515443916611) in module_names_0)) && (p2_22 ==> (_single(2110237719515443916611) in module_names_0_0)))
  if (p1_22) {
    module_names_0 := (module_names_0 union Set(_single(73619898777093410026781300625263691048963386208866)))
  }
  if (p2_22) {
    module_names_0_0 := (module_names_0_0 union Set(_single(73619898777093410026781300625263691048963386208866)))
  }
  assert (p1_22 ==> true) && (p2_22 ==> true) && ((p1_22 ==> (_single(2110237719515443916611) in module_names_0)) && (p2_22 ==> (_single(2110237719515443916611) in module_names_0_0)))
  if (p1_22) {
    module_names_0 := (module_names_0 union Set(_single(75081400414424312944984985457979974068619318751842)))
  }
  if (p2_22) {
    module_names_0_0 := (module_names_0_0 union Set(_single(75081400414424312944984985457979974068619318751842)))
  }
  assert (p1_22 ==> true) && (p2_22 ==> true) && ((p1_22 ==> (_single(2110237719515443916611) in module_names_0)) && (p2_22 ==> (_single(2110237719515443916611) in module_names_0_0)))
  if (p1_22) {
    module_names_0 := (module_names_0 union Set(_single(2148284399689960616546)))
  }
  if (p2_22) {
    module_names_0_0 := (module_names_0_0 union Set(_single(2148284399689960616546)))
  }
  assert (p1_22 ==> true) && (p2_22 ==> true) && ((p1_22 ==> (_single(2110237719515443916611) in module_names_0)) && (p2_22 ==> (_single(2110237719515443916611) in module_names_0_0)))
  if (p1_22) {
    module_names_0 := (module_names_0 union Set(_single(60897064081003764991226466)))
  }
  if (p2_22) {
    module_names_0_0 := (module_names_0_0 union Set(_single(60897064081003764991226466)))
  }
  assert true
}