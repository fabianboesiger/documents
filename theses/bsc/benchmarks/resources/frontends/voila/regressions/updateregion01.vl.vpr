domain Map[U, V] {
  
  function Map_keys(m: Map[U, V]): Set[U]
  
  function Map_card(m: Map[U, V]): Int
  
  function Map_lookup(m: Map[U, V], u: U): V
  
  function Map_values(m: Map[U, V]): Set[V]
  
  function Map_empty(): Map[U, V]
  
  function Map_build(m: Map[U, V], u: U, v: V): Map[U, V]
  
  function Map_equal(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_disjoint(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_union(m1: Map[U, V], m2: Map[U, V]): Map[U, V]
  
  axiom Map_card_non_neg {
    (forall m: Map[U, V] :: { Map_card(m) } 0 <= Map_card(m))
  }
  
  axiom Map_card_domain {
    (forall m: Map[U, V] :: { |Map_keys(m)| } |Map_keys(m)| == Map_card(m))
  }
  
  axiom Map_values_def {
    (forall m: Map[U, V], v: V :: { (v in Map_values(m)) } (v in Map_values(m)) == (exists u: U :: (u in Map_keys(m)) && v == Map_lookup(m, u)))
  }
  
  axiom Map_empty_1 {
    (forall u: U :: { (u in Map_keys(Map_empty())) } !((u in Map_keys(Map_empty()))))
  }
  
  axiom Map_empty_2 {
    (forall m: Map[U, V] :: { Map_card(m) } (Map_card(m) == 0) == (m == Map_empty()) && (Map_card(m) != 0 ==> (exists u: U :: (u in Map_keys(m)))))
  }
  
  axiom Map_build_1 {
    (forall m: Map[U, V], u1: U, u2: U, v: V :: { (u2 in Map_keys(Map_build(m, u1, v))) } (u2 == u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) && Map_lookup(Map_build(m, u1, v), u1) == v) && (u2 != u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) == (u2 in Map_keys(m)) && Map_lookup(Map_build(m, u1, v), u2) == Map_lookup(m, u2)))
  }
  
  axiom Map_build_2 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } (u in Map_keys(m)) ==> Map_card(Map_build(m, u, v)) == Map_card(m))
  }
  
  axiom Map_build_3 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } !((u in Map_keys(m))) ==> Map_card(Map_build(m, u, v)) == Map_card(m) + 1)
  }
  
  axiom Map_equality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } (u in Map_keys(m1)) == (u in Map_keys(m2))))
  }
  
  axiom Map_extensionality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) ==> m1 == m2)
  }
  
  axiom Map_disjoint_def {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_disjoint(m1, m2) } Map_disjoint(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } !((u in Map_keys(m1))) || !((u in Map_keys(m2)))))
  }
  
  axiom Map_union_1 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { (u in Map_keys(Map_union(m1, m2))) } { (u in (Map_keys(m1) union Map_keys(m2))) } Map_disjoint(m1, m2) ==> (u in Map_keys(Map_union(m1, m2))) == (u in (Map_keys(m1) union Map_keys(m2))))
  }
  
  axiom Map_union_2 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m1)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m1, u))
  }
  
  axiom Map_union_3 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m2)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m2, u))
  }
}

domain trigger_functions {
  
  function Cell_state_T(r: Ref, lvl: Int, c: Ref): Bool
}

domain interferenceReference_Domain {
  
  function Cell_interferenceReference_df($p0: Int, r: Ref, lvl: Int, c: Ref): Bool
}

domain interferenceSet_Domain {
  
  function Cell_interferenceSet_df($p0: Int, r: Ref, lvl: Int, c: Ref): Set[Int]
}

domain atomicity_context_Domain {
  
  function Cell_atomicity_context_df(r: Ref, lvl: Int, c: Ref): Bool
}

field $diamond: Int

field $stepFrom_int: Int

field $stepTo_int: Int

field $cell_$value: Int

function IntSet(): Set[Int]
  ensures (forall n: Int :: (n in result))


function NatSet(): Set[Int]
  ensures (forall n: Int :: 0 <= n == (n in result))


function Cell_atomicity_context_hf(r: Ref, lvl: Int, c: Ref): Set[Int]
  requires acc(Cell_atomicity_context_fp(r, lvl, c), write)
  ensures [Cell_atomicity_context_df(r, lvl, c), true]


function Cell_interferenceSet_hf($p0: Int, r: Ref, lvl: Int, c: Ref): Set[Int]
  requires acc(Cell_interferenceContext_fp(r, lvl, c), write)
  ensures [(forall $_m: Int :: { ($_m in result) } ($_m in result) ==> ($_m in Cell_interferenceSet_df($p0, r, lvl, c))), true]


function Cell_interferenceReference_hf($p0: Int, r: Ref, lvl: Int, c: Ref): Int
  requires acc(Cell_interferenceContext_fp(r, lvl, c), write)
  ensures [Cell_interferenceReference_df($p0, r, lvl, c), true]


function Cell_sk_$_action_n(r: Ref, lvl: Int, c: Ref): Int
  requires acc(Cell_sk_fp(), write)


function Cell_sk_$_action_m(r: Ref, lvl: Int, c: Ref): Int
  requires acc(Cell_sk_fp(), write)


function Cell_state(r: Ref, lvl: Int, c: Ref): Int
  requires acc(Cell(r, lvl, c), write)
  ensures [Cell_state_T(r, lvl, c), true]
{
  (unfolding acc(Cell(r, lvl, c), write) in c.$cell_$value)
}

predicate Cell_G($r: Ref) 

predicate Cell_atomicity_context_fp(r: Ref, lvl: Int, c: Ref) 

predicate Cell_interferenceContext_fp(r: Ref, lvl: Int, c: Ref) 

predicate Cell_sk_fp() 

predicate Cell(r: Ref, lvl: Int, c: Ref) {
  acc(c.$cell_$value, write) && true
}

method havoc_Bool() returns ($r: Bool)


method havoc_Ref() returns ($r: Ref)


method havoc_Int() returns ($r: Int)


method ___silicon_hack407_havoc_all_Cell()


method ___silicon_hack407_havoc_all_Cell_interferenceContext_fp()


method test01(r: Ref, lvl: Int, c: Ref)
  requires acc(Cell(r, lvl, c), write) && (lvl >= 0 && Cell_state(r, lvl, c) == 0)
{
  var $_levelVar_0: Int
  var $_levelVar_1: Int
  var $_levelVar_2: Int
  inhale $_levelVar_0 >= 0 && $_levelVar_0 > lvl
  assert $_levelVar_0 >= 0
  inhale acc(Cell_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $c: Ref :: acc(Cell_interferenceContext_fp($r, $lvl, $c), write))
  
  // ------- Inferring interference context Cell (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer0
  
  // Inferring interference all instances of region Cell
  
  ___silicon_hack407_havoc_all_Cell_interferenceContext_fp()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: (forall $$_m: Int :: { ($$_m in Cell_interferenceSet_df(1, $r, $lvl, $c)) } none < old[pre_infer0](perm(Cell($r, $lvl, $c))) ==> ($$_m in Cell_interferenceSet_hf(1, $r, $lvl, $c)) == ((none < perm($r.$diamond) && none < perm(Cell_atomicity_context_fp($r, $lvl, $c)) ==> ($$_m in Cell_atomicity_context_hf($r, $lvl, $c))) && ($$_m == old[pre_infer0](Cell_state($r, $lvl, $c)) || Cell_sk_$_action_n($r, $lvl, $c) == old[pre_infer0](Cell_state($r, $lvl, $c)) && Cell_sk_$_action_m($r, $lvl, $c) == $$_m && true && perm(Cell_G($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_infer0](perm(Cell($r, $lvl, $c))) ==> Cell_interferenceReference_hf(1, $r, $lvl, $c) == old[pre_infer0](Cell_state($r, $lvl, $c)))
  
  // ------- Inferring interference context Cell (beginning of non atomic procedure) END 
  
  
  
  // ------- update-region BEGIN -----
  
  
  exhale acc(r.$diamond, write)
  label pre_region_update0
  assert $_levelVar_0 > lvl
  $_levelVar_1 := lvl
  exhale acc(Cell_atomicity_context_fp(r, lvl, c), write)
  unfold acc(Cell(r, lvl, c), write)
  
  // no interference context translation needed
  
  
  
  // ------- Havocking regions Cell (before update-region@16.3) BEGIN 
  
  
  label pre_havoc0
  
  // Havocking single instance of region Cell
  
  ___silicon_hack407_havoc_all_Cell()
  
  // ------- Havocking regions Cell (before update-region@16.3) END 
  
  
  
  // ------- heap-write BEGIN --------
  
  
  c.$cell_$value := 1
  
  // ------- heap-write END ----------
  
  
  fold acc(Cell(r, lvl, c), write)
  if (Cell_state(r, lvl, c) != old[pre_region_update0](Cell_state(r, lvl, c))) {
    inhale acc(r.$stepFrom_int, write) && acc(r.$stepTo_int, write)
    r.$stepFrom_int := old[pre_region_update0](Cell_state(r, lvl, c))
    r.$stepTo_int := Cell_state(r, lvl, c)
  } else {
    inhale acc(r.$diamond, write)
  }
  inhale acc(Cell_atomicity_context_fp(r, lvl, c), write)
  inhale Cell_atomicity_context_hf(r, lvl, c) == old[pre_region_update0](Cell_atomicity_context_hf(r, lvl, c))
  $_levelVar_2 := $_levelVar_0
  
  // ------- update-region END -------
  
  
  
  // ------- Stabilising regions Cell (after update-region@16.3) BEGIN 
  
  
  label pre_stabilize0
  
  // Stabilising all instances of region Cell
  
  ___silicon_hack407_havoc_all_Cell_interferenceContext_fp()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: (forall $$_m: Int :: { ($$_m in Cell_interferenceSet_df(2, $r, $lvl, $c)) } none < old[pre_stabilize0](perm(Cell($r, $lvl, $c))) ==> ($$_m in Cell_interferenceSet_hf(2, $r, $lvl, $c)) == ((none < perm($r.$diamond) && none < perm(Cell_atomicity_context_fp($r, $lvl, $c)) ==> ($$_m in Cell_atomicity_context_hf($r, $lvl, $c))) && ($$_m == old[pre_stabilize0](Cell_state($r, $lvl, $c)) || Cell_sk_$_action_n($r, $lvl, $c) == old[pre_stabilize0](Cell_state($r, $lvl, $c)) && Cell_sk_$_action_m($r, $lvl, $c) == $$_m && true && perm(Cell_G($r)) == none))))
  ___silicon_hack407_havoc_all_Cell()
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_stabilize0](perm(Cell($r, $lvl, $c))) ==> (Cell_state($r, $lvl, $c) in Cell_interferenceSet_hf(2, $r, $lvl, $c)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_stabilize0](perm(Cell($r, $lvl, $c))) ==> Cell_interferenceReference_hf(2, $r, $lvl, $c) == old[pre_stabilize0](Cell_state($r, $lvl, $c)))
  
  // ------- Stabilising regions Cell (after update-region@16.3) END 
  
  
}

method test02(r: Ref, lvl: Int, c: Ref)
  requires acc(Cell(r, lvl, c), write) && (lvl >= 0 && Cell_state(r, lvl, c) == 0)
{
  var $_levelVar_3: Int
  var $_levelVar_4: Int
  var $_levelVar_5: Int
  inhale $_levelVar_3 >= 0 && $_levelVar_3 > lvl
  assert $_levelVar_3 >= 0
  inhale acc(Cell_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $c: Ref :: acc(Cell_interferenceContext_fp($r, $lvl, $c), write))
  
  // ------- Inferring interference context Cell (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer
  
  // Inferring interference all instances of region Cell
  
  ___silicon_hack407_havoc_all_Cell_interferenceContext_fp()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: (forall $$_m: Int :: { ($$_m in Cell_interferenceSet_df(3, $r, $lvl, $c)) } none < old[pre_infer](perm(Cell($r, $lvl, $c))) ==> ($$_m in Cell_interferenceSet_hf(3, $r, $lvl, $c)) == ((none < perm($r.$diamond) && none < perm(Cell_atomicity_context_fp($r, $lvl, $c)) ==> ($$_m in Cell_atomicity_context_hf($r, $lvl, $c))) && ($$_m == old[pre_infer](Cell_state($r, $lvl, $c)) || Cell_sk_$_action_n($r, $lvl, $c) == old[pre_infer](Cell_state($r, $lvl, $c)) && Cell_sk_$_action_m($r, $lvl, $c) == $$_m && true && perm(Cell_G($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_infer](perm(Cell($r, $lvl, $c))) ==> Cell_interferenceReference_hf(3, $r, $lvl, $c) == old[pre_infer](Cell_state($r, $lvl, $c)))
  
  // ------- Inferring interference context Cell (beginning of non atomic procedure) END 
  
  
  
  // ------- inhale BEGIN ------------
  
  
  inhale acc(r.$diamond, write)
  
  // ------- inhale END --------------
  
  
  
  // ------- update-region BEGIN -----
  
  
  exhale acc(r.$diamond, write)
  label pre_region_update
  assert $_levelVar_3 > lvl
  $_levelVar_4 := lvl
  exhale acc(Cell_atomicity_context_fp(r, lvl, c), write)
  unfold acc(Cell(r, lvl, c), write)
  
  // no interference context translation needed
  
  
  
  // ------- Havocking regions Cell (before update-region@30.3) BEGIN 
  
  
  label pre_havoc
  
  // Havocking single instance of region Cell
  
  ___silicon_hack407_havoc_all_Cell()
  
  // ------- Havocking regions Cell (before update-region@30.3) END 
  
  
  
  // ------- heap-write BEGIN --------
  
  
  c.$cell_$value := 1
  
  // ------- heap-write END ----------
  
  
  fold acc(Cell(r, lvl, c), write)
  if (Cell_state(r, lvl, c) != old[pre_region_update](Cell_state(r, lvl, c))) {
    inhale acc(r.$stepFrom_int, write) && acc(r.$stepTo_int, write)
    r.$stepFrom_int := old[pre_region_update](Cell_state(r, lvl, c))
    r.$stepTo_int := Cell_state(r, lvl, c)
  } else {
    inhale acc(r.$diamond, write)
  }
  inhale acc(Cell_atomicity_context_fp(r, lvl, c), write)
  inhale Cell_atomicity_context_hf(r, lvl, c) == old[pre_region_update](Cell_atomicity_context_hf(r, lvl, c))
  $_levelVar_5 := $_levelVar_3
  
  // ------- update-region END -------
  
  
  
  // ------- Stabilising regions Cell (after seq-comp@27.3) BEGIN 
  
  
  label pre_stabilize
  
  // Stabilising all instances of region Cell
  
  ___silicon_hack407_havoc_all_Cell_interferenceContext_fp()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: (forall $$_m: Int :: { ($$_m in Cell_interferenceSet_df(4, $r, $lvl, $c)) } none < old[pre_stabilize](perm(Cell($r, $lvl, $c))) ==> ($$_m in Cell_interferenceSet_hf(4, $r, $lvl, $c)) == ((none < perm($r.$diamond) && none < perm(Cell_atomicity_context_fp($r, $lvl, $c)) ==> ($$_m in Cell_atomicity_context_hf($r, $lvl, $c))) && ($$_m == old[pre_stabilize](Cell_state($r, $lvl, $c)) || Cell_sk_$_action_n($r, $lvl, $c) == old[pre_stabilize](Cell_state($r, $lvl, $c)) && Cell_sk_$_action_m($r, $lvl, $c) == $$_m && true && perm(Cell_G($r)) == none))))
  ___silicon_hack407_havoc_all_Cell()
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_stabilize](perm(Cell($r, $lvl, $c))) ==> (Cell_state($r, $lvl, $c) in Cell_interferenceSet_hf(4, $r, $lvl, $c)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_stabilize](perm(Cell($r, $lvl, $c))) ==> Cell_interferenceReference_hf(4, $r, $lvl, $c) == old[pre_stabilize](Cell_state($r, $lvl, $c)))
  
  // ------- Stabilising regions Cell (after seq-comp@27.3) END 
  
  
}

method test03(r: Ref, lvl: Int, c: Ref)
  requires acc(Cell(r, lvl, c), write) && (lvl >= 0 && Cell_state(r, lvl, c) == 0) && acc(Cell_G(r), write)
  requires (Cell_state(r, lvl, c) in Set(0))
{
  var $_levelVar_6: Int
  var $_levelVar_7: Int
  var $_levelVar_8: Int
  var $_levelVar_9: Int
  inhale $_levelVar_6 >= 0 && $_levelVar_6 > lvl
  assert $_levelVar_6 >= 0
  inhale acc(Cell_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $c: Ref :: acc(Cell_interferenceContext_fp($r, $lvl, $c), write))
  inhale Cell_interferenceSet_hf(4, r, lvl, c) == Set(0)
  inhale Cell_interferenceReference_hf(4, r, lvl, c) == old(Cell_state(r, lvl, c))
  
  // ------- make-atomic BEGIN -------
  
  
  label guard_arg_eval0
  exhale acc(Cell_G(r), write)
  exhale acc(Cell(r, lvl, c), write)
  label preFrame0
  
  // ------- Stabilising regions Cell (stabelizing the frame) BEGIN 
  
  
  label pre_stabilize2
  
  // Stabilising all instances of region Cell
  
  ___silicon_hack407_havoc_all_Cell()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_stabilize2](perm(Cell($r, $lvl, $c))) ==> (none < perm($r.$diamond) && none < perm(Cell_atomicity_context_fp($r, $lvl, $c)) ==> (Cell_state($r, $lvl, $c) in Cell_atomicity_context_hf($r, $lvl, $c))) && (Cell_state($r, $lvl, $c) == old[pre_stabilize2](Cell_state($r, $lvl, $c)) || Cell_sk_$_action_n($r, $lvl, $c) == old[pre_stabilize2](Cell_state($r, $lvl, $c)) && Cell_sk_$_action_m($r, $lvl, $c) == Cell_state($r, $lvl, $c) && true && perm(Cell_G($r)) == none))
  
  // ------- Stabilising regions Cell (stabelizing the frame) END 
  
  
  exhale (forall $r: Ref, $lvl: Int, $c: Ref :: acc(Cell($r, $lvl, $c), old[preFrame0](perm(Cell($r, $lvl, $c)))))
  exhale (forall $$r: Ref :: acc(Cell_G($$r), old[preFrame0](perm(Cell_G($$r)))))
  exhale (forall $$_r: Ref :: acc($$_r.$cell_$value, old[preFrame0](perm($$_r.$cell_$value))))
  inhale acc(Cell(r, lvl, c), write)
  inhale acc(r.$diamond, write)
  $_levelVar_7 := lvl
  assert perm(Cell_atomicity_context_fp(r, lvl, c)) == none
  inhale acc(Cell_atomicity_context_fp(r, lvl, c), write)
  inhale Cell_atomicity_context_hf(r, lvl, c) == Cell_interferenceSet_hf(4, r, lvl, c)
  
  // ------- Stabilising regions Cell (before atomic) BEGIN 
  
  
  label pre_stabilize3
  
  // Stabilising single instance of region Cell
  
  ___silicon_hack407_havoc_all_Cell_interferenceContext_fp()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forall $$_m: Int :: { ($$_m in Cell_interferenceSet_df(5, r, lvl, c)) } ($$_m in Cell_interferenceSet_hf(5, r, lvl, c)) == ((none < perm(r.$diamond) && none < perm(Cell_atomicity_context_fp(r, lvl, c)) ==> ($$_m in Cell_atomicity_context_hf(r, lvl, c))) && ($$_m == old[pre_stabilize3](Cell_state(r, lvl, c)) || Cell_sk_$_action_n(r, lvl, c) == old[pre_stabilize3](Cell_state(r, lvl, c)) && Cell_sk_$_action_m(r, lvl, c) == $$_m && true && perm(Cell_G(r)) == none)))
  ___silicon_hack407_havoc_all_Cell()
  inhale (Cell_state(r, lvl, c) in Cell_interferenceSet_hf(5, r, lvl, c))
  
  // havoc performed by other front resource
  
  
  inhale Cell_interferenceReference_hf(5, r, lvl, c) == old[pre_stabilize3](Cell_state(r, lvl, c))
  
  // ------- Stabilising regions Cell (before atomic) END 
  
  
  
  // ------- update-region BEGIN -----
  
  
  exhale acc(r.$diamond, write)
  label pre_region_update2
  assert $_levelVar_6 > lvl
  $_levelVar_8 := lvl
  exhale acc(Cell_atomicity_context_fp(r, lvl, c), write)
  unfold acc(Cell(r, lvl, c), write)
  
  // no interference context translation needed
  
  
  
  // ------- Havocking regions Cell (before update-region@44.5) BEGIN 
  
  
  label pre_havoc2
  
  // Havocking single instance of region Cell
  
  ___silicon_hack407_havoc_all_Cell()
  
  // ------- Havocking regions Cell (before update-region@44.5) END 
  
  
  
  // ------- heap-write BEGIN --------
  
  
  c.$cell_$value := 1
  
  // ------- heap-write END ----------
  
  
  fold acc(Cell(r, lvl, c), write)
  if (Cell_state(r, lvl, c) != old[pre_region_update2](Cell_state(r, lvl, c))) {
    inhale acc(r.$stepFrom_int, write) && acc(r.$stepTo_int, write)
    r.$stepFrom_int := old[pre_region_update2](Cell_state(r, lvl, c))
    r.$stepTo_int := Cell_state(r, lvl, c)
  } else {
    inhale acc(r.$diamond, write)
  }
  inhale acc(Cell_atomicity_context_fp(r, lvl, c), write)
  inhale Cell_atomicity_context_hf(r, lvl, c) == old[pre_region_update2](Cell_atomicity_context_hf(r, lvl, c))
  $_levelVar_9 := $_levelVar_6
  
  // ------- update-region END -------
  
  
  
  // ------- Stabilising regions Cell (after update-region@44.5) BEGIN 
  
  
  label pre_stabilize5
  
  // Stabilising all instances of region Cell
  
  ___silicon_hack407_havoc_all_Cell_interferenceContext_fp()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: (forall $$_m: Int :: { ($$_m in Cell_interferenceSet_df(6, $r, $lvl, $c)) } none < old[pre_stabilize5](perm(Cell($r, $lvl, $c))) ==> ($$_m in Cell_interferenceSet_hf(6, $r, $lvl, $c)) == ((none < perm($r.$diamond) && none < perm(Cell_atomicity_context_fp($r, $lvl, $c)) ==> ($$_m in Cell_atomicity_context_hf($r, $lvl, $c))) && ($$_m == old[pre_stabilize5](Cell_state($r, $lvl, $c)) || Cell_sk_$_action_n($r, $lvl, $c) == old[pre_stabilize5](Cell_state($r, $lvl, $c)) && Cell_sk_$_action_m($r, $lvl, $c) == $$_m && true && perm(Cell_G($r)) == none))))
  ___silicon_hack407_havoc_all_Cell()
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_stabilize5](perm(Cell($r, $lvl, $c))) ==> (Cell_state($r, $lvl, $c) in Cell_interferenceSet_hf(6, $r, $lvl, $c)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_stabilize5](perm(Cell($r, $lvl, $c))) ==> Cell_interferenceReference_hf(6, $r, $lvl, $c) == old[pre_stabilize5](Cell_state($r, $lvl, $c)))
  
  // ------- Stabilising regions Cell (after update-region@44.5) END 
  
  
  assert (r.$stepFrom_int in Cell_atomicity_context_hf(r, lvl, c))
  assert true
  
  // ------- Stabilising regions Cell (after atomic) BEGIN 
  
  
  label pre_stabilize4
  
  // Stabilising single instance of region Cell
  
  ___silicon_hack407_havoc_all_Cell()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (none < perm(r.$diamond) && none < perm(Cell_atomicity_context_fp(r, lvl, c)) ==> (Cell_state(r, lvl, c) in Cell_atomicity_context_hf(r, lvl, c))) && (Cell_state(r, lvl, c) == old[pre_stabilize4](Cell_state(r, lvl, c)) || Cell_sk_$_action_n(r, lvl, c) == old[pre_stabilize4](Cell_state(r, lvl, c)) && Cell_sk_$_action_m(r, lvl, c) == Cell_state(r, lvl, c) && true && perm(Cell_G(r)) == none)
  
  // ------- Stabilising regions Cell (after atomic) END 
  
  
  
  inhale Cell_state(r, lvl, c) == r.$stepTo_int
  inhale old(Cell_state(r, lvl, c)) == r.$stepFrom_int
  inhale acc(Cell_G(r), write)
  exhale acc(r.$stepFrom_int, write) && acc(r.$stepTo_int, write)
  exhale acc(Cell_atomicity_context_fp(r, lvl, c), write)
  inhale (forall $r: Ref, $lvl: Int, $c: Ref :: acc(Cell($r, $lvl, $c), old[preFrame0](perm(Cell($r, $lvl, $c)))))
  inhale (forall $r: Ref, $lvl: Int, $c: Ref :: { Cell_state_T($r, $lvl, $c) } none < old[preFrame0](perm(Cell($r, $lvl, $c))) ==> Cell_state($r, $lvl, $c) == old[preFrame0](Cell_state($r, $lvl, $c)))
  inhale (forall $$r: Ref :: acc(Cell_G($$r), old[preFrame0](perm(Cell_G($$r)))))
  inhale (forall $$_r: Ref :: acc($$_r.$cell_$value, old[preFrame0](perm($$_r.$cell_$value))))
  inhale (forall $$_r: Ref :: { $$_r.$cell_$value } none < old[preFrame0](perm($$_r.$cell_$value)) ==> $$_r.$cell_$value == old[preFrame0]($$_r.$cell_$value))
  
  // ------- make-atomic END ---------
  
  
}

method test04(r: Ref, lvl: Int, c: Ref)
  requires acc(Cell(r, lvl, c), write) && (lvl >= 0 && Cell_state(r, lvl, c) == 0) && acc(Cell_G(r), write)
  requires (Cell_state(r, lvl, c) in Set(0))
{
  var $_levelVar_10: Int
  var $_levelVar_11: Int
  var $_levelVar_12: Int
  var $_levelVar_13: Int
  inhale $_levelVar_10 >= 0 && $_levelVar_10 > lvl
  assert $_levelVar_10 >= 0
  inhale acc(Cell_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $c: Ref :: acc(Cell_interferenceContext_fp($r, $lvl, $c), write))
  inhale Cell_interferenceSet_hf(6, r, lvl, c) == Set(0)
  inhale Cell_interferenceReference_hf(6, r, lvl, c) == old(Cell_state(r, lvl, c))
  
  // ------- make-atomic BEGIN -------
  
  
  label guard_arg_eval
  exhale acc(Cell_G(r), write)
  exhale acc(Cell(r, lvl, c), write)
  label preFrame
  
  // ------- Stabilising regions Cell (stabelizing the frame) BEGIN 
  
  
  label pre_stabilize6
  
  // Stabilising all instances of region Cell
  
  ___silicon_hack407_havoc_all_Cell()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_stabilize6](perm(Cell($r, $lvl, $c))) ==> (none < perm($r.$diamond) && none < perm(Cell_atomicity_context_fp($r, $lvl, $c)) ==> (Cell_state($r, $lvl, $c) in Cell_atomicity_context_hf($r, $lvl, $c))) && (Cell_state($r, $lvl, $c) == old[pre_stabilize6](Cell_state($r, $lvl, $c)) || Cell_sk_$_action_n($r, $lvl, $c) == old[pre_stabilize6](Cell_state($r, $lvl, $c)) && Cell_sk_$_action_m($r, $lvl, $c) == Cell_state($r, $lvl, $c) && true && perm(Cell_G($r)) == none))
  
  // ------- Stabilising regions Cell (stabelizing the frame) END 
  
  
  exhale (forall $r: Ref, $lvl: Int, $c: Ref :: acc(Cell($r, $lvl, $c), old[preFrame](perm(Cell($r, $lvl, $c)))))
  exhale (forall $$r: Ref :: acc(Cell_G($$r), old[preFrame](perm(Cell_G($$r)))))
  exhale (forall $$_r: Ref :: acc($$_r.$cell_$value, old[preFrame](perm($$_r.$cell_$value))))
  inhale acc(Cell(r, lvl, c), write)
  inhale acc(r.$diamond, write)
  $_levelVar_11 := lvl
  assert perm(Cell_atomicity_context_fp(r, lvl, c)) == none
  inhale acc(Cell_atomicity_context_fp(r, lvl, c), write)
  inhale Cell_atomicity_context_hf(r, lvl, c) == Cell_interferenceSet_hf(6, r, lvl, c)
  
  // ------- Stabilising regions Cell (before atomic) BEGIN 
  
  
  label pre_stabilize7
  
  // Stabilising single instance of region Cell
  
  ___silicon_hack407_havoc_all_Cell_interferenceContext_fp()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forall $$_m: Int :: { ($$_m in Cell_interferenceSet_df(7, r, lvl, c)) } ($$_m in Cell_interferenceSet_hf(7, r, lvl, c)) == ((none < perm(r.$diamond) && none < perm(Cell_atomicity_context_fp(r, lvl, c)) ==> ($$_m in Cell_atomicity_context_hf(r, lvl, c))) && ($$_m == old[pre_stabilize7](Cell_state(r, lvl, c)) || Cell_sk_$_action_n(r, lvl, c) == old[pre_stabilize7](Cell_state(r, lvl, c)) && Cell_sk_$_action_m(r, lvl, c) == $$_m && true && perm(Cell_G(r)) == none)))
  ___silicon_hack407_havoc_all_Cell()
  inhale (Cell_state(r, lvl, c) in Cell_interferenceSet_hf(7, r, lvl, c))
  
  // havoc performed by other front resource
  
  
  inhale Cell_interferenceReference_hf(7, r, lvl, c) == old[pre_stabilize7](Cell_state(r, lvl, c))
  
  // ------- Stabilising regions Cell (before atomic) END 
  
  
  
  // ------- update-region BEGIN -----
  
  
  exhale acc(r.$diamond, write)
  label pre_region_update3
  assert $_levelVar_10 > lvl
  $_levelVar_12 := lvl
  exhale acc(Cell_atomicity_context_fp(r, lvl, c), write)
  unfold acc(Cell(r, lvl, c), write)
  
  // no interference context translation needed
  
  
  
  // ------- Havocking regions Cell (before update-region@60.5) BEGIN 
  
  
  label pre_havoc3
  
  // Havocking single instance of region Cell
  
  ___silicon_hack407_havoc_all_Cell()
  
  // ------- Havocking regions Cell (before update-region@60.5) END 
  
  
  
  // ------- heap-write BEGIN --------
  
  
  c.$cell_$value := 1
  
  // ------- heap-write END ----------
  
  
  fold acc(Cell(r, lvl, c), write)
  if (Cell_state(r, lvl, c) != old[pre_region_update3](Cell_state(r, lvl, c))) {
    inhale acc(r.$stepFrom_int, write) && acc(r.$stepTo_int, write)
    r.$stepFrom_int := old[pre_region_update3](Cell_state(r, lvl, c))
    r.$stepTo_int := Cell_state(r, lvl, c)
  } else {
    inhale acc(r.$diamond, write)
  }
  inhale acc(Cell_atomicity_context_fp(r, lvl, c), write)
  inhale Cell_atomicity_context_hf(r, lvl, c) == old[pre_region_update3](Cell_atomicity_context_hf(r, lvl, c))
  $_levelVar_13 := $_levelVar_10
  
  // ------- update-region END -------
  
  
  
  // ------- exhale BEGIN ------------
  
  
  exhale acc(r.$stepFrom_int, write) && r.$stepFrom_int == 0 && (acc(r.$stepTo_int, write) && r.$stepTo_int == 1)
  
  // ------- exhale END --------------
  
  
  
  // ------- Stabilising regions Cell (after seq-comp@60.5) BEGIN 
  
  
  label pre_stabilize9
  
  // Stabilising all instances of region Cell
  
  ___silicon_hack407_havoc_all_Cell_interferenceContext_fp()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: (forall $$_m: Int :: { ($$_m in Cell_interferenceSet_df(8, $r, $lvl, $c)) } none < old[pre_stabilize9](perm(Cell($r, $lvl, $c))) ==> ($$_m in Cell_interferenceSet_hf(8, $r, $lvl, $c)) == ((none < perm($r.$diamond) && none < perm(Cell_atomicity_context_fp($r, $lvl, $c)) ==> ($$_m in Cell_atomicity_context_hf($r, $lvl, $c))) && ($$_m == old[pre_stabilize9](Cell_state($r, $lvl, $c)) || Cell_sk_$_action_n($r, $lvl, $c) == old[pre_stabilize9](Cell_state($r, $lvl, $c)) && Cell_sk_$_action_m($r, $lvl, $c) == $$_m && true && perm(Cell_G($r)) == none))))
  ___silicon_hack407_havoc_all_Cell()
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_stabilize9](perm(Cell($r, $lvl, $c))) ==> (Cell_state($r, $lvl, $c) in Cell_interferenceSet_hf(8, $r, $lvl, $c)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_stabilize9](perm(Cell($r, $lvl, $c))) ==> Cell_interferenceReference_hf(8, $r, $lvl, $c) == old[pre_stabilize9](Cell_state($r, $lvl, $c)))
  
  // ------- Stabilising regions Cell (after seq-comp@60.5) END 
  
  
  assert (r.$stepFrom_int in Cell_atomicity_context_hf(r, lvl, c))
  assert true
  
  // ------- Stabilising regions Cell (after atomic) BEGIN 
  
  
  label pre_stabilize8
  
  // Stabilising single instance of region Cell
  
  ___silicon_hack407_havoc_all_Cell()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (none < perm(r.$diamond) && none < perm(Cell_atomicity_context_fp(r, lvl, c)) ==> (Cell_state(r, lvl, c) in Cell_atomicity_context_hf(r, lvl, c))) && (Cell_state(r, lvl, c) == old[pre_stabilize8](Cell_state(r, lvl, c)) || Cell_sk_$_action_n(r, lvl, c) == old[pre_stabilize8](Cell_state(r, lvl, c)) && Cell_sk_$_action_m(r, lvl, c) == Cell_state(r, lvl, c) && true && perm(Cell_G(r)) == none)
  
  // ------- Stabilising regions Cell (after atomic) END 
  
  
  
  inhale Cell_state(r, lvl, c) == r.$stepTo_int
  inhale old(Cell_state(r, lvl, c)) == r.$stepFrom_int
  inhale acc(Cell_G(r), write)
  exhale acc(r.$stepFrom_int, write) && acc(r.$stepTo_int, write)
  exhale acc(Cell_atomicity_context_fp(r, lvl, c), write)
  inhale (forall $r: Ref, $lvl: Int, $c: Ref :: acc(Cell($r, $lvl, $c), old[preFrame](perm(Cell($r, $lvl, $c)))))
  inhale (forall $r: Ref, $lvl: Int, $c: Ref :: { Cell_state_T($r, $lvl, $c) } none < old[preFrame](perm(Cell($r, $lvl, $c))) ==> Cell_state($r, $lvl, $c) == old[preFrame](Cell_state($r, $lvl, $c)))
  inhale (forall $$r: Ref :: acc(Cell_G($$r), old[preFrame](perm(Cell_G($$r)))))
  inhale (forall $$_r: Ref :: acc($$_r.$cell_$value, old[preFrame](perm($$_r.$cell_$value))))
  inhale (forall $$_r: Ref :: { $$_r.$cell_$value } none < old[preFrame](perm($$_r.$cell_$value)) ==> $$_r.$cell_$value == old[preFrame]($$_r.$cell_$value))
  
  // ------- make-atomic END ---------
  
  
}

method $_Cell_interpretation_stability_check(r: Ref, lvl: Int, c: Ref)
{
  inhale acc(Cell_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $c: Ref :: acc(Cell_interferenceContext_fp($r, $lvl, $c), write))
  inhale acc(c.$cell_$value, write) && true
  
  // ------- Stabilising regions Cell (check stability of region interpretation) BEGIN 
  
  
  label pre_stabilize10
  
  // Stabilising all instances of region Cell
  
  ___silicon_hack407_havoc_all_Cell()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_stabilize10](perm(Cell($r, $lvl, $c))) ==> (none < perm($r.$diamond) && none < perm(Cell_atomicity_context_fp($r, $lvl, $c)) ==> (Cell_state($r, $lvl, $c) in Cell_atomicity_context_hf($r, $lvl, $c))) && (Cell_state($r, $lvl, $c) == old[pre_stabilize10](Cell_state($r, $lvl, $c)) || Cell_sk_$_action_n($r, $lvl, $c) == old[pre_stabilize10](Cell_state($r, $lvl, $c)) && Cell_sk_$_action_m($r, $lvl, $c) == Cell_state($r, $lvl, $c) && true && perm(Cell_G($r)) == none))
  
  // ------- Stabilising regions Cell (check stability of region interpretation) END 
  
  
  assert acc(c.$cell_$value, write) && true
}

method $_Cell_action_transitivity_check()
{
  var G: Bool
  var $_action_n_0_x: Int
  var $_action_m_0_x: Int
  var $_action_n_0_y: Int
  var $_action_m_0_y: Int
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState || $_action_n_0_x == aState && $_action_m_0_x == bState && true && G
  inhale bState == cState || $_action_n_0_y == bState && $_action_m_0_y == cState && true && G
  assert aState == cState || aState == aState && cState == cState && true && G
}

method $_test01_condition_stability_precondition_check(r: Ref, lvl: Int, c: Ref)
  requires acc(Cell(r, lvl, c), write) && (lvl >= 0 && Cell_state(r, lvl, c) == 0)
{
  var $_levelVar_14: Int
  inhale $_levelVar_14 >= 0 && $_levelVar_14 > lvl
  inhale acc(Cell_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $c: Ref :: acc(Cell_interferenceContext_fp($r, $lvl, $c), write))
  
  // ------- Inferring interference context Cell (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer2
  
  // Inferring interference all instances of region Cell
  
  ___silicon_hack407_havoc_all_Cell_interferenceContext_fp()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: (forall $$_m: Int :: { ($$_m in Cell_interferenceSet_df(9, $r, $lvl, $c)) } none < old[pre_infer2](perm(Cell($r, $lvl, $c))) ==> ($$_m in Cell_interferenceSet_hf(9, $r, $lvl, $c)) == ((none < perm($r.$diamond) && none < perm(Cell_atomicity_context_fp($r, $lvl, $c)) ==> ($$_m in Cell_atomicity_context_hf($r, $lvl, $c))) && ($$_m == old[pre_infer2](Cell_state($r, $lvl, $c)) || Cell_sk_$_action_n($r, $lvl, $c) == old[pre_infer2](Cell_state($r, $lvl, $c)) && Cell_sk_$_action_m($r, $lvl, $c) == $$_m && true && perm(Cell_G($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_infer2](perm(Cell($r, $lvl, $c))) ==> Cell_interferenceReference_hf(9, $r, $lvl, $c) == old[pre_infer2](Cell_state($r, $lvl, $c)))
  
  // ------- Inferring interference context Cell (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Cell (check stability of method condition) BEGIN 
  
  
  label pre_stabilize11
  
  // Stabilising all instances of region Cell
  
  ___silicon_hack407_havoc_all_Cell()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_stabilize11](perm(Cell($r, $lvl, $c))) ==> (none < perm($r.$diamond) && none < perm(Cell_atomicity_context_fp($r, $lvl, $c)) ==> (Cell_state($r, $lvl, $c) in Cell_atomicity_context_hf($r, $lvl, $c))) && (Cell_state($r, $lvl, $c) == old[pre_stabilize11](Cell_state($r, $lvl, $c)) || Cell_sk_$_action_n($r, $lvl, $c) == old[pre_stabilize11](Cell_state($r, $lvl, $c)) && Cell_sk_$_action_m($r, $lvl, $c) == Cell_state($r, $lvl, $c) && true && perm(Cell_G($r)) == none))
  
  // ------- Stabilising regions Cell (check stability of method condition) END 
  
  
  assert acc(Cell(r, lvl, c), write) && (lvl >= 0 && Cell_state(r, lvl, c) == 0)
}

method $_test02_condition_stability_precondition_check(r: Ref, lvl: Int, c: Ref)
  requires acc(Cell(r, lvl, c), write) && (lvl >= 0 && Cell_state(r, lvl, c) == 0)
{
  var $_levelVar_15: Int
  inhale $_levelVar_15 >= 0 && $_levelVar_15 > lvl
  inhale acc(Cell_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $c: Ref :: acc(Cell_interferenceContext_fp($r, $lvl, $c), write))
  
  // ------- Inferring interference context Cell (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer3
  
  // Inferring interference all instances of region Cell
  
  ___silicon_hack407_havoc_all_Cell_interferenceContext_fp()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: (forall $$_m: Int :: { ($$_m in Cell_interferenceSet_df(10, $r, $lvl, $c)) } none < old[pre_infer3](perm(Cell($r, $lvl, $c))) ==> ($$_m in Cell_interferenceSet_hf(10, $r, $lvl, $c)) == ((none < perm($r.$diamond) && none < perm(Cell_atomicity_context_fp($r, $lvl, $c)) ==> ($$_m in Cell_atomicity_context_hf($r, $lvl, $c))) && ($$_m == old[pre_infer3](Cell_state($r, $lvl, $c)) || Cell_sk_$_action_n($r, $lvl, $c) == old[pre_infer3](Cell_state($r, $lvl, $c)) && Cell_sk_$_action_m($r, $lvl, $c) == $$_m && true && perm(Cell_G($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_infer3](perm(Cell($r, $lvl, $c))) ==> Cell_interferenceReference_hf(10, $r, $lvl, $c) == old[pre_infer3](Cell_state($r, $lvl, $c)))
  
  // ------- Inferring interference context Cell (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Cell (check stability of method condition) BEGIN 
  
  
  label pre_stabilize12
  
  // Stabilising all instances of region Cell
  
  ___silicon_hack407_havoc_all_Cell()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_stabilize12](perm(Cell($r, $lvl, $c))) ==> (none < perm($r.$diamond) && none < perm(Cell_atomicity_context_fp($r, $lvl, $c)) ==> (Cell_state($r, $lvl, $c) in Cell_atomicity_context_hf($r, $lvl, $c))) && (Cell_state($r, $lvl, $c) == old[pre_stabilize12](Cell_state($r, $lvl, $c)) || Cell_sk_$_action_n($r, $lvl, $c) == old[pre_stabilize12](Cell_state($r, $lvl, $c)) && Cell_sk_$_action_m($r, $lvl, $c) == Cell_state($r, $lvl, $c) && true && perm(Cell_G($r)) == none))
  
  // ------- Stabilising regions Cell (check stability of method condition) END 
  
  
  assert acc(Cell(r, lvl, c), write) && (lvl >= 0 && Cell_state(r, lvl, c) == 0)
}

method $_test03_condition_stability_precondition_check(r: Ref, lvl: Int, c: Ref)
  requires acc(Cell(r, lvl, c), write) && (lvl >= 0 && Cell_state(r, lvl, c) == 0) && acc(Cell_G(r), write)
{
  var $_levelVar_16: Int
  inhale $_levelVar_16 >= 0 && $_levelVar_16 > lvl
  inhale acc(Cell_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $c: Ref :: acc(Cell_interferenceContext_fp($r, $lvl, $c), write))
  inhale Cell_interferenceSet_hf(10, r, lvl, c) == Set(0)
  inhale Cell_interferenceReference_hf(10, r, lvl, c) == old(Cell_state(r, lvl, c))
  
  // ------- Stabilising regions Cell (check stability of method condition) BEGIN 
  
  
  label pre_stabilize13
  
  // Stabilising all instances of region Cell
  
  ___silicon_hack407_havoc_all_Cell()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_stabilize13](perm(Cell($r, $lvl, $c))) ==> (none < perm($r.$diamond) && none < perm(Cell_atomicity_context_fp($r, $lvl, $c)) ==> (Cell_state($r, $lvl, $c) in Cell_atomicity_context_hf($r, $lvl, $c))) && (Cell_state($r, $lvl, $c) == old[pre_stabilize13](Cell_state($r, $lvl, $c)) || Cell_sk_$_action_n($r, $lvl, $c) == old[pre_stabilize13](Cell_state($r, $lvl, $c)) && Cell_sk_$_action_m($r, $lvl, $c) == Cell_state($r, $lvl, $c) && true && perm(Cell_G($r)) == none))
  
  // ------- Stabilising regions Cell (check stability of method condition) END 
  
  
  assert acc(Cell(r, lvl, c), write) && (lvl >= 0 && Cell_state(r, lvl, c) == 0) && acc(Cell_G(r), write)
}

method $_test04_condition_stability_precondition_check(r: Ref, lvl: Int, c: Ref)
  requires acc(Cell(r, lvl, c), write) && (lvl >= 0 && Cell_state(r, lvl, c) == 0) && acc(Cell_G(r), write)
{
  var $_levelVar_17: Int
  inhale $_levelVar_17 >= 0 && $_levelVar_17 > lvl
  inhale acc(Cell_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $c: Ref :: acc(Cell_interferenceContext_fp($r, $lvl, $c), write))
  inhale Cell_interferenceSet_hf(10, r, lvl, c) == Set(0)
  inhale Cell_interferenceReference_hf(10, r, lvl, c) == old(Cell_state(r, lvl, c))
  
  // ------- Stabilising regions Cell (check stability of method condition) BEGIN 
  
  
  label pre_stabilize14
  
  // Stabilising all instances of region Cell
  
  ___silicon_hack407_havoc_all_Cell()
  exhale acc(Cell_sk_fp(), write)
  inhale acc(Cell_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $c: Ref [Cell($r, $lvl, $c)] :: none < old[pre_stabilize14](perm(Cell($r, $lvl, $c))) ==> (none < perm($r.$diamond) && none < perm(Cell_atomicity_context_fp($r, $lvl, $c)) ==> (Cell_state($r, $lvl, $c) in Cell_atomicity_context_hf($r, $lvl, $c))) && (Cell_state($r, $lvl, $c) == old[pre_stabilize14](Cell_state($r, $lvl, $c)) || Cell_sk_$_action_n($r, $lvl, $c) == old[pre_stabilize14](Cell_state($r, $lvl, $c)) && Cell_sk_$_action_m($r, $lvl, $c) == Cell_state($r, $lvl, $c) && true && perm(Cell_G($r)) == none))
  
  // ------- Stabilising regions Cell (check stability of method condition) END 
  
  
  assert acc(Cell(r, lvl, c), write) && (lvl >= 0 && Cell_state(r, lvl, c) == 0) && acc(Cell_G(r), write)
}