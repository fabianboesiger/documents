domain Map[U, V] {
  
  function Map_keys(m: Map[U, V]): Set[U]
  
  function Map_card(m: Map[U, V]): Int
  
  function Map_lookup(m: Map[U, V], u: U): V
  
  function Map_values(m: Map[U, V]): Set[V]
  
  function Map_empty(): Map[U, V]
  
  function Map_build(m: Map[U, V], u: U, v: V): Map[U, V]
  
  function Map_equal(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_disjoint(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_union(m1: Map[U, V], m2: Map[U, V]): Map[U, V]
  
  axiom Map_card_non_neg {
    (forall m: Map[U, V] :: { Map_card(m) } 0 <= Map_card(m))
  }
  
  axiom Map_card_domain {
    (forall m: Map[U, V] :: { |Map_keys(m)| } |Map_keys(m)| == Map_card(m))
  }
  
  axiom Map_values_def {
    (forall m: Map[U, V], v: V :: { (v in Map_values(m)) } (v in Map_values(m)) == (exists u: U :: (u in Map_keys(m)) && v == Map_lookup(m, u)))
  }
  
  axiom Map_empty_1 {
    (forall u: U :: { (u in Map_keys(Map_empty())) } !((u in Map_keys(Map_empty()))))
  }
  
  axiom Map_empty_2 {
    (forall m: Map[U, V] :: { Map_card(m) } (Map_card(m) == 0) == (m == Map_empty()) && (Map_card(m) != 0 ==> (exists u: U :: (u in Map_keys(m)))))
  }
  
  axiom Map_build_1 {
    (forall m: Map[U, V], u1: U, u2: U, v: V :: { (u2 in Map_keys(Map_build(m, u1, v))) } (u2 == u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) && Map_lookup(Map_build(m, u1, v), u1) == v) && (u2 != u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) == (u2 in Map_keys(m)) && Map_lookup(Map_build(m, u1, v), u2) == Map_lookup(m, u2)))
  }
  
  axiom Map_build_2 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } (u in Map_keys(m)) ==> Map_card(Map_build(m, u, v)) == Map_card(m))
  }
  
  axiom Map_build_3 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } !((u in Map_keys(m))) ==> Map_card(Map_build(m, u, v)) == Map_card(m) + 1)
  }
  
  axiom Map_equality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } (u in Map_keys(m1)) == (u in Map_keys(m2))))
  }
  
  axiom Map_extensionality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) ==> m1 == m2)
  }
  
  axiom Map_disjoint_def {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_disjoint(m1, m2) } Map_disjoint(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } !((u in Map_keys(m1))) || !((u in Map_keys(m2)))))
  }
  
  axiom Map_union_1 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { (u in Map_keys(Map_union(m1, m2))) } { (u in (Map_keys(m1) union Map_keys(m2))) } Map_disjoint(m1, m2) ==> (u in Map_keys(Map_union(m1, m2))) == (u in (Map_keys(m1) union Map_keys(m2))))
  }
  
  axiom Map_union_2 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m1)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m1, u))
  }
  
  axiom Map_union_3 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m2)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m2, u))
  }
}

domain trigger_functions {
  
  function R_state_T(s: Ref, lvl: Int): Bool
  
  function RR_state_T(s: Ref, lvl: Int): Bool
}

domain interferenceReference_Domain {
  
  function R_interferenceReference_df($p0: Int, s: Ref, lvl: Int): Bool
  
  function RR_interferenceReference_df($p0: Int, s: Ref, lvl: Int): Bool
}

domain interferenceSet_Domain {
  
  function R_interferenceSet_df($p0: Int, s: Ref, lvl: Int): Set[Bool]
  
  function RR_interferenceSet_df($p0: Int, s: Ref, lvl: Int): Set[Int]
}

domain atomicity_context_Domain {
  
  function R_atomicity_context_df(s: Ref, lvl: Int): Bool
  
  function RR_atomicity_context_df(s: Ref, lvl: Int): Bool
}

field $diamond: Int

field $stepFrom_bool: Bool

field $stepTo_bool: Bool

field $stepFrom_int: Int

field $stepTo_int: Int

function IntSet(): Set[Int]
  ensures (forall n: Int :: (n in result))


function NatSet(): Set[Int]
  ensures (forall n: Int :: 0 <= n == (n in result))


function comprehension_48_120($s_0: Int): Set[Int]
  ensures (forall $k: Int :: ($k in result) == $k <= $s_0)


function comprehension_10_90(): Set[Bool]
  ensures (forall $k: Bool :: ($k in result) == $k)


function comprehension_32_90($s_0: Bool): Set[Bool]
  ensures (forall $k: Bool :: ($k in result) == ($k == $s_0))


function R_atomicity_context_hf(s: Ref, lvl: Int): Set[Bool]
  requires acc(R_atomicity_context_fp(s, lvl), write)
  ensures [R_atomicity_context_df(s, lvl), true]


function R_interferenceSet_hf($p0: Int, s: Ref, lvl: Int): Set[Bool]
  requires acc(R_interferenceContext_fp(s, lvl), write)
  ensures [(forall $_m: Bool :: { ($_m in result) } ($_m in result) ==> ($_m in R_interferenceSet_df($p0, s, lvl))), true]


function R_interferenceReference_hf($p0: Int, s: Ref, lvl: Int): Bool
  requires acc(R_interferenceContext_fp(s, lvl), write)
  ensures [R_interferenceReference_df($p0, s, lvl), true]


function R_state(s: Ref, lvl: Int): Bool
  requires acc(R(s, lvl), write)
  ensures [R_state_T(s, lvl), true]
{
  (unfolding acc(R(s, lvl), write) in true)
}

function RR_atomicity_context_hf(s: Ref, lvl: Int): Set[Int]
  requires acc(RR_atomicity_context_fp(s, lvl), write)
  ensures [RR_atomicity_context_df(s, lvl), true]


function RR_interferenceSet_hf($p0: Int, s: Ref, lvl: Int): Set[Int]
  requires acc(RR_interferenceContext_fp(s, lvl), write)
  ensures [(forall $_m: Int :: { ($_m in result) } ($_m in result) ==> ($_m in RR_interferenceSet_df($p0, s, lvl))), true]


function RR_interferenceReference_hf($p0: Int, s: Ref, lvl: Int): Int
  requires acc(RR_interferenceContext_fp(s, lvl), write)
  ensures [RR_interferenceReference_df($p0, s, lvl), true]


function RR_state(s: Ref, lvl: Int): Int
  requires acc(RR(s, lvl), write)
  ensures [RR_state_T(s, lvl), true]
{
  (unfolding acc(RR(s, lvl), write) in 0)
}

predicate R_RG($r: Ref) 

predicate R_atomicity_context_fp(s: Ref, lvl: Int) 

predicate R_interferenceContext_fp(s: Ref, lvl: Int) 

predicate R_sk_fp() 

predicate R(s: Ref, lvl: Int) {
  true
}

predicate RR_RRG($r: Ref) 

predicate RR_atomicity_context_fp(s: Ref, lvl: Int) 

predicate RR_interferenceContext_fp(s: Ref, lvl: Int) 

predicate RR_sk_fp() 

predicate RR(s: Ref, lvl: Int) {
  true
}

method havoc_Bool() returns ($r: Bool)


method havoc_Set_Bool_() returns ($r: Set[Bool])


method havoc_Ref() returns ($r: Ref)


method havoc_Int() returns ($r: Int)


method havoc_Set_Int_() returns ($r: Set[Int])


method ___silicon_hack407_havoc_all_R()


method ___silicon_hack407_havoc_all_R_interferenceContext_fp()


method ___silicon_hack407_havoc_all_RR()


method ___silicon_hack407_havoc_all_RR_interferenceContext_fp()


method test01()
{
  var bs: Set[Bool]
  var $_levelVar_0: Int
  inhale $_levelVar_0 >= 0
  assert $_levelVar_0 >= 0
  inhale acc(R_sk_fp(), write) && acc(RR_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $s: Ref, $lvl: Int :: acc(R_interferenceContext_fp($s, $lvl), write))
  inhale (forall $s: Ref, $lvl: Int :: acc(RR_interferenceContext_fp($s, $lvl), write))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer0
  
  // Inferring interference all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(1, $s, $lvl)) } none < old[pre_infer0](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(1, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer0](R_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_infer0](perm(R($s, $lvl))) ==> R_interferenceReference_hf(1, $s, $lvl) == old[pre_infer0](R_state($s, $lvl)))
  
  // Inferring interference all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(1, $s, $lvl)) } none < old[pre_infer0](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(1, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer0](RR_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_infer0](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(1, $s, $lvl) == old[pre_infer0](RR_state($s, $lvl)))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) END 
  
  
  
  // ------- assign BEGIN ------------
  
  
  bs := comprehension_10_90()
  
  // ------- assign END --------------
  
  
  
  // ------- Stabilising regions R,RR (after assign@10.3) BEGIN 
  
  
  label pre_stabilize0
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(2, $s, $lvl)) } none < old[pre_stabilize0](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(2, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_stabilize0](R_state($s, $lvl)) || false))))
  ___silicon_hack407_havoc_all_R()
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize0](perm(R($s, $lvl))) ==> (R_state($s, $lvl) in R_interferenceSet_hf(2, $s, $lvl)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize0](perm(R($s, $lvl))) ==> R_interferenceReference_hf(2, $s, $lvl) == old[pre_stabilize0](R_state($s, $lvl)))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(2, $s, $lvl)) } none < old[pre_stabilize0](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(2, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_stabilize0](RR_state($s, $lvl)) || false))))
  ___silicon_hack407_havoc_all_RR()
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize0](perm(RR($s, $lvl))) ==> (RR_state($s, $lvl) in RR_interferenceSet_hf(2, $s, $lvl)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize0](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(2, $s, $lvl) == old[pre_stabilize0](RR_state($s, $lvl)))
  
  // ------- Stabilising regions R,RR (after assign@10.3) END 
  
  
}

method test02()
{
  var bs: Set[Bool]
  var $_levelVar_1: Int
  inhale $_levelVar_1 >= 0
  assert $_levelVar_1 >= 0
  inhale acc(R_sk_fp(), write) && acc(RR_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $s: Ref, $lvl: Int :: acc(R_interferenceContext_fp($s, $lvl), write))
  inhale (forall $s: Ref, $lvl: Int :: acc(RR_interferenceContext_fp($s, $lvl), write))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer
  
  // Inferring interference all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(3, $s, $lvl)) } none < old[pre_infer](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(3, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer](R_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_infer](perm(R($s, $lvl))) ==> R_interferenceReference_hf(3, $s, $lvl) == old[pre_infer](R_state($s, $lvl)))
  
  // Inferring interference all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(3, $s, $lvl)) } none < old[pre_infer](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(3, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer](RR_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_infer](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(3, $s, $lvl) == old[pre_infer](RR_state($s, $lvl)))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) END 
  
  
  
  // skip;
  
  
  
  // ------- Stabilising regions R,RR (after skip@17.1) BEGIN 
  
  
  label pre_stabilize
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(4, $s, $lvl)) } none < old[pre_stabilize](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(4, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_stabilize](R_state($s, $lvl)) || false))))
  ___silicon_hack407_havoc_all_R()
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize](perm(R($s, $lvl))) ==> (R_state($s, $lvl) in R_interferenceSet_hf(4, $s, $lvl)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize](perm(R($s, $lvl))) ==> R_interferenceReference_hf(4, $s, $lvl) == old[pre_stabilize](R_state($s, $lvl)))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(4, $s, $lvl)) } none < old[pre_stabilize](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(4, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_stabilize](RR_state($s, $lvl)) || false))))
  ___silicon_hack407_havoc_all_RR()
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize](perm(RR($s, $lvl))) ==> (RR_state($s, $lvl) in RR_interferenceSet_hf(4, $s, $lvl)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(4, $s, $lvl) == old[pre_stabilize](RR_state($s, $lvl)))
  
  // ------- Stabilising regions R,RR (after skip@17.1) END 
  
  
}

method test03(s: Ref, lvl: Int)
  requires acc(R(s, lvl), write) && (lvl >= 0 && true)
{
  var bs: Set[Bool]
  var $_levelVar_2: Int
  inhale $_levelVar_2 >= 0 && $_levelVar_2 > lvl
  assert $_levelVar_2 >= 0
  inhale acc(R_sk_fp(), write) && acc(RR_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $s: Ref, $lvl: Int :: acc(R_interferenceContext_fp($s, $lvl), write))
  inhale (forall $s: Ref, $lvl: Int :: acc(RR_interferenceContext_fp($s, $lvl), write))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer2
  
  // Inferring interference all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(5, $s, $lvl)) } none < old[pre_infer2](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(5, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer2](R_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_infer2](perm(R($s, $lvl))) ==> R_interferenceReference_hf(5, $s, $lvl) == old[pre_infer2](R_state($s, $lvl)))
  
  // Inferring interference all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(5, $s, $lvl)) } none < old[pre_infer2](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(5, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer2](RR_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_infer2](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(5, $s, $lvl) == old[pre_infer2](RR_state($s, $lvl)))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) END 
  
  
  
  // ------- assign BEGIN ------------
  
  
  bs := comprehension_32_90(old(R_state(s, lvl)))
  
  // ------- assign END --------------
  
  
  
  // ------- Stabilising regions R,RR (after assign@24.3) BEGIN 
  
  
  label pre_stabilize2
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(6, $s, $lvl)) } none < old[pre_stabilize2](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(6, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_stabilize2](R_state($s, $lvl)) || false))))
  ___silicon_hack407_havoc_all_R()
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize2](perm(R($s, $lvl))) ==> (R_state($s, $lvl) in R_interferenceSet_hf(6, $s, $lvl)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize2](perm(R($s, $lvl))) ==> R_interferenceReference_hf(6, $s, $lvl) == old[pre_stabilize2](R_state($s, $lvl)))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(6, $s, $lvl)) } none < old[pre_stabilize2](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(6, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_stabilize2](RR_state($s, $lvl)) || false))))
  ___silicon_hack407_havoc_all_RR()
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize2](perm(RR($s, $lvl))) ==> (RR_state($s, $lvl) in RR_interferenceSet_hf(6, $s, $lvl)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize2](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(6, $s, $lvl) == old[pre_stabilize2](RR_state($s, $lvl)))
  
  // ------- Stabilising regions R,RR (after assign@24.3) END 
  
  
}

method test04(s: Ref, lvl: Int)
  requires acc(R(s, lvl), write) && (lvl >= 0 && true)
{
  var bs: Set[Bool]
  var $_levelVar_3: Int
  inhale $_levelVar_3 >= 0 && $_levelVar_3 > lvl
  assert $_levelVar_3 >= 0
  inhale acc(R_sk_fp(), write) && acc(RR_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $s: Ref, $lvl: Int :: acc(R_interferenceContext_fp($s, $lvl), write))
  inhale (forall $s: Ref, $lvl: Int :: acc(RR_interferenceContext_fp($s, $lvl), write))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer3
  
  // Inferring interference all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(7, $s, $lvl)) } none < old[pre_infer3](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(7, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer3](R_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_infer3](perm(R($s, $lvl))) ==> R_interferenceReference_hf(7, $s, $lvl) == old[pre_infer3](R_state($s, $lvl)))
  
  // Inferring interference all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(7, $s, $lvl)) } none < old[pre_infer3](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(7, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer3](RR_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_infer3](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(7, $s, $lvl) == old[pre_infer3](RR_state($s, $lvl)))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) END 
  
  
  
  // ------- assign BEGIN ------------
  
  
  bs := comprehension_32_90(old(R_state(s, lvl)))
  
  // ------- assign END --------------
  
  
  
  // ------- Stabilising regions R,RR (after assign@32.3) BEGIN 
  
  
  label pre_stabilize3
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(8, $s, $lvl)) } none < old[pre_stabilize3](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(8, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_stabilize3](R_state($s, $lvl)) || false))))
  ___silicon_hack407_havoc_all_R()
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize3](perm(R($s, $lvl))) ==> (R_state($s, $lvl) in R_interferenceSet_hf(8, $s, $lvl)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize3](perm(R($s, $lvl))) ==> R_interferenceReference_hf(8, $s, $lvl) == old[pre_stabilize3](R_state($s, $lvl)))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(8, $s, $lvl)) } none < old[pre_stabilize3](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(8, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_stabilize3](RR_state($s, $lvl)) || false))))
  ___silicon_hack407_havoc_all_RR()
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize3](perm(RR($s, $lvl))) ==> (RR_state($s, $lvl) in RR_interferenceSet_hf(8, $s, $lvl)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize3](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(8, $s, $lvl) == old[pre_stabilize3](RR_state($s, $lvl)))
  
  // ------- Stabilising regions R,RR (after assign@32.3) END 
  
  
}

method callee01(xs: Set[Int])
{
  var $_levelVar_4: Int
  inhale $_levelVar_4 >= 0
  assert $_levelVar_4 >= 0
  inhale acc(R_sk_fp(), write) && acc(RR_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $s: Ref, $lvl: Int :: acc(R_interferenceContext_fp($s, $lvl), write))
  inhale (forall $s: Ref, $lvl: Int :: acc(RR_interferenceContext_fp($s, $lvl), write))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer4
  
  // Inferring interference all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(9, $s, $lvl)) } none < old[pre_infer4](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(9, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer4](R_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_infer4](perm(R($s, $lvl))) ==> R_interferenceReference_hf(9, $s, $lvl) == old[pre_infer4](R_state($s, $lvl)))
  
  // Inferring interference all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(9, $s, $lvl)) } none < old[pre_infer4](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(9, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer4](RR_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_infer4](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(9, $s, $lvl) == old[pre_infer4](RR_state($s, $lvl)))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) END 
  
  
  inhale false
}

method test05(s: Ref, lvl: Int)
  requires acc(RR(s, lvl), write) && (lvl >= 0 && true)
{
  var $_levelVar_5: Int
  inhale $_levelVar_5 >= 0 && $_levelVar_5 > lvl
  assert $_levelVar_5 >= 0
  inhale acc(R_sk_fp(), write) && acc(RR_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $s: Ref, $lvl: Int :: acc(R_interferenceContext_fp($s, $lvl), write))
  inhale (forall $s: Ref, $lvl: Int :: acc(RR_interferenceContext_fp($s, $lvl), write))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer5
  
  // Inferring interference all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(10, $s, $lvl)) } none < old[pre_infer5](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(10, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer5](R_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_infer5](perm(R($s, $lvl))) ==> R_interferenceReference_hf(10, $s, $lvl) == old[pre_infer5](R_state($s, $lvl)))
  
  // Inferring interference all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(10, $s, $lvl)) } none < old[pre_infer5](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(10, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer5](RR_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_infer5](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(10, $s, $lvl) == old[pre_infer5](RR_state($s, $lvl)))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) END 
  
  
  
  // ------- call:callee01 BEGIN -----
  
  
  assert true
  label pre_call0
  assert $_levelVar_5 >= 0
  assert true
  exhale true
  
  // ------- Stabilising regions R,RR (before call:callee01@48.3) BEGIN 
  
  
  label pre_stabilize4
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize4](perm(R($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> (R_state($s, $lvl) in R_atomicity_context_hf($s, $lvl))) && (R_state($s, $lvl) == old[pre_stabilize4](R_state($s, $lvl)) || false))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize4](perm(RR($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> (RR_state($s, $lvl) in RR_atomicity_context_hf($s, $lvl))) && (RR_state($s, $lvl) == old[pre_stabilize4](RR_state($s, $lvl)) || false))
  
  // ------- Stabilising regions R,RR (before call:callee01@48.3) END 
  
  
  inhale true
  
  // ------- call:callee01 END -------
  
  
  
  // ------- Stabilising regions R,RR (after call:callee01@48.3) BEGIN 
  
  
  label pre_stabilize5
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(11, $s, $lvl)) } none < old[pre_stabilize5](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(11, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_stabilize5](R_state($s, $lvl)) || false))))
  ___silicon_hack407_havoc_all_R()
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize5](perm(R($s, $lvl))) ==> (R_state($s, $lvl) in R_interferenceSet_hf(11, $s, $lvl)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize5](perm(R($s, $lvl))) ==> R_interferenceReference_hf(11, $s, $lvl) == old[pre_stabilize5](R_state($s, $lvl)))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(11, $s, $lvl)) } none < old[pre_stabilize5](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(11, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_stabilize5](RR_state($s, $lvl)) || false))))
  ___silicon_hack407_havoc_all_RR()
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize5](perm(RR($s, $lvl))) ==> (RR_state($s, $lvl) in RR_interferenceSet_hf(11, $s, $lvl)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize5](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(11, $s, $lvl) == old[pre_stabilize5](RR_state($s, $lvl)))
  
  // ------- Stabilising regions R,RR (after call:callee01@48.3) END 
  
  
}

method test06(s: Ref, lvl: Int)
  requires acc(RR(s, lvl), write) && (lvl >= 0 && true)
{
  var $_levelVar_6: Int
  inhale $_levelVar_6 >= 0 && $_levelVar_6 > lvl
  assert $_levelVar_6 >= 0
  inhale acc(R_sk_fp(), write) && acc(RR_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $s: Ref, $lvl: Int :: acc(R_interferenceContext_fp($s, $lvl), write))
  inhale (forall $s: Ref, $lvl: Int :: acc(RR_interferenceContext_fp($s, $lvl), write))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer6
  
  // Inferring interference all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(12, $s, $lvl)) } none < old[pre_infer6](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(12, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer6](R_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_infer6](perm(R($s, $lvl))) ==> R_interferenceReference_hf(12, $s, $lvl) == old[pre_infer6](R_state($s, $lvl)))
  
  // Inferring interference all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(12, $s, $lvl)) } none < old[pre_infer6](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(12, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer6](RR_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_infer6](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(12, $s, $lvl) == old[pre_infer6](RR_state($s, $lvl)))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) END 
  
  
  
  // ------- call:callee01 BEGIN -----
  
  
  assert true
  label pre_call
  assert $_levelVar_6 >= 0
  assert true
  exhale true
  
  // ------- Stabilising regions R,RR (before call:callee01@54.3) BEGIN 
  
  
  label pre_stabilize6
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize6](perm(R($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> (R_state($s, $lvl) in R_atomicity_context_hf($s, $lvl))) && (R_state($s, $lvl) == old[pre_stabilize6](R_state($s, $lvl)) || false))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize6](perm(RR($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> (RR_state($s, $lvl) in RR_atomicity_context_hf($s, $lvl))) && (RR_state($s, $lvl) == old[pre_stabilize6](RR_state($s, $lvl)) || false))
  
  // ------- Stabilising regions R,RR (before call:callee01@54.3) END 
  
  
  inhale true
  
  // ------- call:callee01 END -------
  
  
  
  // ------- Stabilising regions R,RR (after call:callee01@54.3) BEGIN 
  
  
  label pre_stabilize7
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(13, $s, $lvl)) } none < old[pre_stabilize7](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(13, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_stabilize7](R_state($s, $lvl)) || false))))
  ___silicon_hack407_havoc_all_R()
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize7](perm(R($s, $lvl))) ==> (R_state($s, $lvl) in R_interferenceSet_hf(13, $s, $lvl)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize7](perm(R($s, $lvl))) ==> R_interferenceReference_hf(13, $s, $lvl) == old[pre_stabilize7](R_state($s, $lvl)))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(13, $s, $lvl)) } none < old[pre_stabilize7](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(13, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_stabilize7](RR_state($s, $lvl)) || false))))
  ___silicon_hack407_havoc_all_RR()
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize7](perm(RR($s, $lvl))) ==> (RR_state($s, $lvl) in RR_interferenceSet_hf(13, $s, $lvl)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize7](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(13, $s, $lvl) == old[pre_stabilize7](RR_state($s, $lvl)))
  
  // ------- Stabilising regions R,RR (after call:callee01@54.3) END 
  
  
}

method $_R_interpretation_stability_check(s: Ref, lvl: Int)
{
  inhale acc(R_sk_fp(), write) && acc(RR_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $s: Ref, $lvl: Int :: acc(R_interferenceContext_fp($s, $lvl), write))
  inhale (forall $s: Ref, $lvl: Int :: acc(RR_interferenceContext_fp($s, $lvl), write))
  inhale true
  
  // ------- Stabilising regions R,RR (check stability of region interpretation) BEGIN 
  
  
  label pre_stabilize8
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize8](perm(R($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> (R_state($s, $lvl) in R_atomicity_context_hf($s, $lvl))) && (R_state($s, $lvl) == old[pre_stabilize8](R_state($s, $lvl)) || false))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize8](perm(RR($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> (RR_state($s, $lvl) in RR_atomicity_context_hf($s, $lvl))) && (RR_state($s, $lvl) == old[pre_stabilize8](RR_state($s, $lvl)) || false))
  
  // ------- Stabilising regions R,RR (check stability of region interpretation) END 
  
  
  assert true
}

method $_R_action_transitivity_check()
{
  var RG: Bool
  var aState: Bool
  var bState: Bool
  var cState: Bool
  inhale aState == bState
  inhale bState == cState
  assert aState == cState
}

method $_RR_interpretation_stability_check(s: Ref, lvl: Int)
{
  inhale acc(R_sk_fp(), write) && acc(RR_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $s: Ref, $lvl: Int :: acc(R_interferenceContext_fp($s, $lvl), write))
  inhale (forall $s: Ref, $lvl: Int :: acc(RR_interferenceContext_fp($s, $lvl), write))
  inhale true
  
  // ------- Stabilising regions R,RR (check stability of region interpretation) BEGIN 
  
  
  label pre_stabilize9
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize9](perm(R($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> (R_state($s, $lvl) in R_atomicity_context_hf($s, $lvl))) && (R_state($s, $lvl) == old[pre_stabilize9](R_state($s, $lvl)) || false))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize9](perm(RR($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> (RR_state($s, $lvl) in RR_atomicity_context_hf($s, $lvl))) && (RR_state($s, $lvl) == old[pre_stabilize9](RR_state($s, $lvl)) || false))
  
  // ------- Stabilising regions R,RR (check stability of region interpretation) END 
  
  
  assert true
}

method $_RR_action_transitivity_check()
{
  var RRG: Bool
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState
  inhale bState == cState
  assert aState == cState
}

method $_test01_condition_stability_precondition_check()
{
  var $_levelVar_7: Int
  var bs: Set[Bool]
  inhale $_levelVar_7 >= 0
  inhale acc(R_sk_fp(), write) && acc(RR_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $s: Ref, $lvl: Int :: acc(R_interferenceContext_fp($s, $lvl), write))
  inhale (forall $s: Ref, $lvl: Int :: acc(RR_interferenceContext_fp($s, $lvl), write))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer7
  
  // Inferring interference all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(14, $s, $lvl)) } none < old[pre_infer7](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(14, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer7](R_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_infer7](perm(R($s, $lvl))) ==> R_interferenceReference_hf(14, $s, $lvl) == old[pre_infer7](R_state($s, $lvl)))
  
  // Inferring interference all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(14, $s, $lvl)) } none < old[pre_infer7](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(14, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer7](RR_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_infer7](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(14, $s, $lvl) == old[pre_infer7](RR_state($s, $lvl)))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions R,RR (check stability of method condition) BEGIN 
  
  
  label pre_stabilize10
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize10](perm(R($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> (R_state($s, $lvl) in R_atomicity_context_hf($s, $lvl))) && (R_state($s, $lvl) == old[pre_stabilize10](R_state($s, $lvl)) || false))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize10](perm(RR($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> (RR_state($s, $lvl) in RR_atomicity_context_hf($s, $lvl))) && (RR_state($s, $lvl) == old[pre_stabilize10](RR_state($s, $lvl)) || false))
  
  // ------- Stabilising regions R,RR (check stability of method condition) END 
  
  
  assert true
}

method $_test02_condition_stability_precondition_check()
{
  var $_levelVar_8: Int
  var bs: Set[Bool]
  inhale $_levelVar_8 >= 0
  inhale acc(R_sk_fp(), write) && acc(RR_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $s: Ref, $lvl: Int :: acc(R_interferenceContext_fp($s, $lvl), write))
  inhale (forall $s: Ref, $lvl: Int :: acc(RR_interferenceContext_fp($s, $lvl), write))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer8
  
  // Inferring interference all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(15, $s, $lvl)) } none < old[pre_infer8](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(15, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer8](R_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_infer8](perm(R($s, $lvl))) ==> R_interferenceReference_hf(15, $s, $lvl) == old[pre_infer8](R_state($s, $lvl)))
  
  // Inferring interference all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(15, $s, $lvl)) } none < old[pre_infer8](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(15, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer8](RR_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_infer8](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(15, $s, $lvl) == old[pre_infer8](RR_state($s, $lvl)))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions R,RR (check stability of method condition) BEGIN 
  
  
  label pre_stabilize11
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize11](perm(R($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> (R_state($s, $lvl) in R_atomicity_context_hf($s, $lvl))) && (R_state($s, $lvl) == old[pre_stabilize11](R_state($s, $lvl)) || false))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize11](perm(RR($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> (RR_state($s, $lvl) in RR_atomicity_context_hf($s, $lvl))) && (RR_state($s, $lvl) == old[pre_stabilize11](RR_state($s, $lvl)) || false))
  
  // ------- Stabilising regions R,RR (check stability of method condition) END 
  
  
  assert true
}

method $_test03_condition_stability_precondition_check(s: Ref, lvl: Int)
  requires acc(R(s, lvl), write) && (lvl >= 0 && true)
{
  var $_levelVar_9: Int
  var bs: Set[Bool]
  inhale $_levelVar_9 >= 0 && $_levelVar_9 > lvl
  inhale acc(R_sk_fp(), write) && acc(RR_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $s: Ref, $lvl: Int :: acc(R_interferenceContext_fp($s, $lvl), write))
  inhale (forall $s: Ref, $lvl: Int :: acc(RR_interferenceContext_fp($s, $lvl), write))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer9
  
  // Inferring interference all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(16, $s, $lvl)) } none < old[pre_infer9](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(16, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer9](R_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_infer9](perm(R($s, $lvl))) ==> R_interferenceReference_hf(16, $s, $lvl) == old[pre_infer9](R_state($s, $lvl)))
  
  // Inferring interference all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(16, $s, $lvl)) } none < old[pre_infer9](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(16, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer9](RR_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_infer9](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(16, $s, $lvl) == old[pre_infer9](RR_state($s, $lvl)))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions R,RR (check stability of method condition) BEGIN 
  
  
  label pre_stabilize12
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize12](perm(R($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> (R_state($s, $lvl) in R_atomicity_context_hf($s, $lvl))) && (R_state($s, $lvl) == old[pre_stabilize12](R_state($s, $lvl)) || false))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize12](perm(RR($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> (RR_state($s, $lvl) in RR_atomicity_context_hf($s, $lvl))) && (RR_state($s, $lvl) == old[pre_stabilize12](RR_state($s, $lvl)) || false))
  
  // ------- Stabilising regions R,RR (check stability of method condition) END 
  
  
  assert acc(R(s, lvl), write) && (lvl >= 0 && true)
}

method $_test04_condition_stability_precondition_check(s: Ref, lvl: Int)
  requires acc(R(s, lvl), write) && (lvl >= 0 && true)
{
  var $_levelVar_10: Int
  var bs: Set[Bool]
  inhale $_levelVar_10 >= 0 && $_levelVar_10 > lvl
  inhale acc(R_sk_fp(), write) && acc(RR_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $s: Ref, $lvl: Int :: acc(R_interferenceContext_fp($s, $lvl), write))
  inhale (forall $s: Ref, $lvl: Int :: acc(RR_interferenceContext_fp($s, $lvl), write))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer10
  
  // Inferring interference all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(17, $s, $lvl)) } none < old[pre_infer10](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(17, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer10](R_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_infer10](perm(R($s, $lvl))) ==> R_interferenceReference_hf(17, $s, $lvl) == old[pre_infer10](R_state($s, $lvl)))
  
  // Inferring interference all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(17, $s, $lvl)) } none < old[pre_infer10](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(17, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer10](RR_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_infer10](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(17, $s, $lvl) == old[pre_infer10](RR_state($s, $lvl)))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions R,RR (check stability of method condition) BEGIN 
  
  
  label pre_stabilize13
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize13](perm(R($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> (R_state($s, $lvl) in R_atomicity_context_hf($s, $lvl))) && (R_state($s, $lvl) == old[pre_stabilize13](R_state($s, $lvl)) || false))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize13](perm(RR($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> (RR_state($s, $lvl) in RR_atomicity_context_hf($s, $lvl))) && (RR_state($s, $lvl) == old[pre_stabilize13](RR_state($s, $lvl)) || false))
  
  // ------- Stabilising regions R,RR (check stability of method condition) END 
  
  
  assert acc(R(s, lvl), write) && (lvl >= 0 && true)
}

method $_callee01_condition_stability_precondition_check(xs: Set[Int])
{
  var $_levelVar_11: Int
  inhale $_levelVar_11 >= 0
  inhale acc(R_sk_fp(), write) && acc(RR_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $s: Ref, $lvl: Int :: acc(R_interferenceContext_fp($s, $lvl), write))
  inhale (forall $s: Ref, $lvl: Int :: acc(RR_interferenceContext_fp($s, $lvl), write))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer11
  
  // Inferring interference all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(18, $s, $lvl)) } none < old[pre_infer11](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(18, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer11](R_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_infer11](perm(R($s, $lvl))) ==> R_interferenceReference_hf(18, $s, $lvl) == old[pre_infer11](R_state($s, $lvl)))
  
  // Inferring interference all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(18, $s, $lvl)) } none < old[pre_infer11](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(18, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer11](RR_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_infer11](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(18, $s, $lvl) == old[pre_infer11](RR_state($s, $lvl)))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions R,RR (check stability of method condition) BEGIN 
  
  
  label pre_stabilize14
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize14](perm(R($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> (R_state($s, $lvl) in R_atomicity_context_hf($s, $lvl))) && (R_state($s, $lvl) == old[pre_stabilize14](R_state($s, $lvl)) || false))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize14](perm(RR($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> (RR_state($s, $lvl) in RR_atomicity_context_hf($s, $lvl))) && (RR_state($s, $lvl) == old[pre_stabilize14](RR_state($s, $lvl)) || false))
  
  // ------- Stabilising regions R,RR (check stability of method condition) END 
  
  
  assert true
}

method $_test05_condition_stability_precondition_check(s: Ref, lvl: Int)
  requires acc(RR(s, lvl), write) && (lvl >= 0 && true)
{
  var $_levelVar_12: Int
  inhale $_levelVar_12 >= 0 && $_levelVar_12 > lvl
  inhale acc(R_sk_fp(), write) && acc(RR_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $s: Ref, $lvl: Int :: acc(R_interferenceContext_fp($s, $lvl), write))
  inhale (forall $s: Ref, $lvl: Int :: acc(RR_interferenceContext_fp($s, $lvl), write))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer12
  
  // Inferring interference all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(19, $s, $lvl)) } none < old[pre_infer12](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(19, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer12](R_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_infer12](perm(R($s, $lvl))) ==> R_interferenceReference_hf(19, $s, $lvl) == old[pre_infer12](R_state($s, $lvl)))
  
  // Inferring interference all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(19, $s, $lvl)) } none < old[pre_infer12](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(19, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer12](RR_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_infer12](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(19, $s, $lvl) == old[pre_infer12](RR_state($s, $lvl)))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions R,RR (check stability of method condition) BEGIN 
  
  
  label pre_stabilize15
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize15](perm(R($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> (R_state($s, $lvl) in R_atomicity_context_hf($s, $lvl))) && (R_state($s, $lvl) == old[pre_stabilize15](R_state($s, $lvl)) || false))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize15](perm(RR($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> (RR_state($s, $lvl) in RR_atomicity_context_hf($s, $lvl))) && (RR_state($s, $lvl) == old[pre_stabilize15](RR_state($s, $lvl)) || false))
  
  // ------- Stabilising regions R,RR (check stability of method condition) END 
  
  
  assert acc(RR(s, lvl), write) && (lvl >= 0 && true)
}

method $_test06_condition_stability_precondition_check(s: Ref, lvl: Int)
  requires acc(RR(s, lvl), write) && (lvl >= 0 && true)
{
  var $_levelVar_13: Int
  inhale $_levelVar_13 >= 0 && $_levelVar_13 > lvl
  inhale acc(R_sk_fp(), write) && acc(RR_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $s: Ref, $lvl: Int :: acc(R_interferenceContext_fp($s, $lvl), write))
  inhale (forall $s: Ref, $lvl: Int :: acc(RR_interferenceContext_fp($s, $lvl), write))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer13
  
  // Inferring interference all instances of region R
  
  ___silicon_hack407_havoc_all_R_interferenceContext_fp()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: (forall $$_m: Bool :: { ($$_m in R_interferenceSet_df(20, $s, $lvl)) } none < old[pre_infer13](perm(R($s, $lvl))) ==> ($$_m in R_interferenceSet_hf(20, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> ($$_m in R_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer13](R_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_infer13](perm(R($s, $lvl))) ==> R_interferenceReference_hf(20, $s, $lvl) == old[pre_infer13](R_state($s, $lvl)))
  
  // Inferring interference all instances of region RR
  
  ___silicon_hack407_havoc_all_RR_interferenceContext_fp()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: (forall $$_m: Int :: { ($$_m in RR_interferenceSet_df(20, $s, $lvl)) } none < old[pre_infer13](perm(RR($s, $lvl))) ==> ($$_m in RR_interferenceSet_hf(20, $s, $lvl)) == ((none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> ($$_m in RR_atomicity_context_hf($s, $lvl))) && ($$_m == old[pre_infer13](RR_state($s, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_infer13](perm(RR($s, $lvl))) ==> RR_interferenceReference_hf(20, $s, $lvl) == old[pre_infer13](RR_state($s, $lvl)))
  
  // ------- Inferring interference context R,RR (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions R,RR (check stability of method condition) BEGIN 
  
  
  label pre_stabilize16
  
  // Stabilising all instances of region R
  
  ___silicon_hack407_havoc_all_R()
  exhale acc(R_sk_fp(), write)
  inhale acc(R_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [R($s, $lvl)] :: none < old[pre_stabilize16](perm(R($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(R_atomicity_context_fp($s, $lvl)) ==> (R_state($s, $lvl) in R_atomicity_context_hf($s, $lvl))) && (R_state($s, $lvl) == old[pre_stabilize16](R_state($s, $lvl)) || false))
  
  // Stabilising all instances of region RR
  
  ___silicon_hack407_havoc_all_RR()
  exhale acc(RR_sk_fp(), write)
  inhale acc(RR_sk_fp(), write)
  inhale (forperm $s: Ref, $lvl: Int [RR($s, $lvl)] :: none < old[pre_stabilize16](perm(RR($s, $lvl))) ==> (none < perm($s.$diamond) && none < perm(RR_atomicity_context_fp($s, $lvl)) ==> (RR_state($s, $lvl) in RR_atomicity_context_hf($s, $lvl))) && (RR_state($s, $lvl) == old[pre_stabilize16](RR_state($s, $lvl)) || false))
  
  // ------- Stabilising regions R,RR (check stability of method condition) END 
  
  
  assert acc(RR(s, lvl), write) && (lvl >= 0 && true)
}