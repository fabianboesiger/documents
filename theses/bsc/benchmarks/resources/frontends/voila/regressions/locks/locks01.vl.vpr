domain Map[U, V] {
  
  function Map_keys(m: Map[U, V]): Set[U]
  
  function Map_card(m: Map[U, V]): Int
  
  function Map_lookup(m: Map[U, V], u: U): V
  
  function Map_values(m: Map[U, V]): Set[V]
  
  function Map_empty(): Map[U, V]
  
  function Map_build(m: Map[U, V], u: U, v: V): Map[U, V]
  
  function Map_equal(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_disjoint(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_union(m1: Map[U, V], m2: Map[U, V]): Map[U, V]
  
  axiom Map_card_non_neg {
    (forall m: Map[U, V] :: { Map_card(m) } 0 <= Map_card(m))
  }
  
  axiom Map_card_domain {
    (forall m: Map[U, V] :: { |Map_keys(m)| } |Map_keys(m)| == Map_card(m))
  }
  
  axiom Map_values_def {
    (forall m: Map[U, V], v: V :: { (v in Map_values(m)) } (v in Map_values(m)) == (exists u: U :: (u in Map_keys(m)) && v == Map_lookup(m, u)))
  }
  
  axiom Map_empty_1 {
    (forall u: U :: { (u in Map_keys(Map_empty())) } !((u in Map_keys(Map_empty()))))
  }
  
  axiom Map_empty_2 {
    (forall m: Map[U, V] :: { Map_card(m) } (Map_card(m) == 0) == (m == Map_empty()) && (Map_card(m) != 0 ==> (exists u: U :: (u in Map_keys(m)))))
  }
  
  axiom Map_build_1 {
    (forall m: Map[U, V], u1: U, u2: U, v: V :: { (u2 in Map_keys(Map_build(m, u1, v))) } (u2 == u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) && Map_lookup(Map_build(m, u1, v), u1) == v) && (u2 != u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) == (u2 in Map_keys(m)) && Map_lookup(Map_build(m, u1, v), u2) == Map_lookup(m, u2)))
  }
  
  axiom Map_build_2 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } (u in Map_keys(m)) ==> Map_card(Map_build(m, u, v)) == Map_card(m))
  }
  
  axiom Map_build_3 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } !((u in Map_keys(m))) ==> Map_card(Map_build(m, u, v)) == Map_card(m) + 1)
  }
  
  axiom Map_equality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } (u in Map_keys(m1)) == (u in Map_keys(m2))))
  }
  
  axiom Map_extensionality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) ==> m1 == m2)
  }
  
  axiom Map_disjoint_def {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_disjoint(m1, m2) } Map_disjoint(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } !((u in Map_keys(m1))) || !((u in Map_keys(m2)))))
  }
  
  axiom Map_union_1 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { (u in Map_keys(Map_union(m1, m2))) } { (u in (Map_keys(m1) union Map_keys(m2))) } Map_disjoint(m1, m2) ==> (u in Map_keys(Map_union(m1, m2))) == (u in (Map_keys(m1) union Map_keys(m2))))
  }
  
  axiom Map_union_2 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m1)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m1, u))
  }
  
  axiom Map_union_3 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m2)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m2, u))
  }
}

domain trigger_functions {
  
  function Lock_state_T(a: Ref, lvl: Int, x: Ref): Bool
  
  function CAPLock_state_T(r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref): Bool
}

domain interferenceReference_Domain {
  
  function Lock_interferenceReference_df($p0: Int, a: Ref, lvl: Int, x: Ref): Bool
  
  function CAPLock_interferenceReference_df($p0: Int, r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref): Bool
}

domain interferenceSet_Domain {
  
  function Lock_interferenceSet_df($p0: Int, a: Ref, lvl: Int, x: Ref): Set[Int]
  
  function CAPLock_interferenceSet_df($p0: Int, r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref): Set[Int]
}

domain atomicity_context_Domain {
  
  function Lock_atomicity_context_df(a: Ref, lvl: Int, x: Ref): Bool
  
  function CAPLock_atomicity_context_df(r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref): Bool
}

field $diamond: Int

field $stepFrom_int: Int

field $stepTo_int: Int

field $memcell_$f: Int

function IntSet(): Set[Int]
  ensures (forall n: Int :: (n in result))


function NatSet(): Set[Int]
  ensures (forall n: Int :: 0 <= n == (n in result))


function Lock_atomicity_context_hf(a: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Lock_atomicity_context_fp(a, lvl, x), write)
  ensures [Lock_atomicity_context_df(a, lvl, x), true]


function Lock_interferenceSet_hf($p0: Int, a: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Lock_interferenceContext_fp(a, lvl, x), write)
  ensures [(forall $_m: Int :: { ($_m in result) } ($_m in result) ==> ($_m in Lock_interferenceSet_df($p0, a, lvl, x))), true]


function Lock_interferenceReference_hf($p0: Int, a: Ref, lvl: Int, x: Ref): Int
  requires acc(Lock_interferenceContext_fp(a, lvl, x), write)
  ensures [Lock_interferenceReference_df($p0, a, lvl, x), true]


function Lock_state(a: Ref, lvl: Int, x: Ref): Int
  requires acc(Lock(a, lvl, x), write)
  ensures [Lock_state_T(a, lvl, x), true]
{
  (unfolding acc(Lock(a, lvl, x), write) in x.$memcell_$f)
}

function CAPLock_atomicity_context_hf(r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(CAPLock_atomicity_context_fp(r, alvl, a, lvl, x), write)
  ensures [CAPLock_atomicity_context_df(r, alvl, a, lvl, x), true]


function CAPLock_interferenceSet_hf($p0: Int, r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(CAPLock_interferenceContext_fp(r, alvl, a, lvl, x), write)
  ensures [(forall $_m: Int :: { ($_m in result) } ($_m in result) ==> ($_m in CAPLock_interferenceSet_df($p0, r, alvl, a, lvl, x))), true]


function CAPLock_interferenceReference_hf($p0: Int, r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref): Int
  requires acc(CAPLock_interferenceContext_fp(r, alvl, a, lvl, x), write)
  ensures [CAPLock_interferenceReference_df($p0, r, alvl, a, lvl, x), true]


function CAPLock_state(r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref): Int
  requires acc(CAPLock(r, alvl, a, lvl, x), write)
  ensures [CAPLock_state_T(r, alvl, a, lvl, x), true]
{
  (unfolding acc(CAPLock(r, alvl, a, lvl, x), write) in Lock_state(a, lvl, x))
}

predicate Lock_G($r: Ref) 

predicate Lock_atomicity_context_fp(a: Ref, lvl: Int, x: Ref) 

predicate Lock_interferenceContext_fp(a: Ref, lvl: Int, x: Ref) 

predicate Lock_sk_fp() 

predicate Lock(a: Ref, lvl: Int, x: Ref) {
  acc(x.$memcell_$f, write) && true && (x.$memcell_$f == 0 || x.$memcell_$f == 1)
}

predicate CAPLock_Z($r: Ref) 

predicate CAPLock_K($r: Ref) 

predicate CAPLock_atomicity_context_fp(r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref) 

predicate CAPLock_interferenceContext_fp(r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref) 

predicate CAPLock_sk_fp() 

predicate CAPLock(r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref) {
  acc(Lock(a, lvl, x), write) && (lvl >= 0 && true) && lvl < alvl && acc(Lock_G(a), write) && (Lock_state(a, lvl, x) == 0 ? acc(CAPLock_K(r), write) && acc(Inv(), write) : true) && (Lock_state(a, lvl, x) == 1 ? true : true)
}

predicate Inv() 

method havoc_Bool() returns ($r: Bool)


method havoc_Int() returns ($r: Int)


method havoc_Ref() returns ($r: Ref)


method ___silicon_hack407_havoc_all_Lock()


method ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()


method ___silicon_hack407_havoc_all_CAPLock()


method ___silicon_hack407_havoc_all_CAPLock_interferenceContext_fp()


method unlock(a: Ref, lvl: Int, x: Ref)
  requires acc(Lock(a, lvl, x), write) && (lvl >= 0 && Lock_state(a, lvl, x) == Lock_state(a, lvl, x)) && acc(Lock_G(a), write)
  requires (Lock_state(a, lvl, x) in Set(1))
  ensures acc(Lock(a, lvl, x), write) && (lvl >= 0 && Lock_state(a, lvl, x) == 0) && acc(Lock_G(a), write)
{
  var $_levelVar_0: Int
  inhale $_levelVar_0 >= 0 && $_levelVar_0 > lvl
  assert $_levelVar_0 >= 0
  inhale acc(Lock_sk_fp(), write) && acc(CAPLock_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $a: Ref, $lvl: Int, $x: Ref :: acc(Lock_interferenceContext_fp($a, $lvl, $x), write))
  inhale (forall $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref :: acc(CAPLock_interferenceContext_fp($r, $alvl, $a, $lvl, $x), write))
  inhale Lock_interferenceSet_hf(0, a, lvl, x) == Set(1)
  inhale Lock_interferenceReference_hf(0, a, lvl, x) == old(Lock_state(a, lvl, x))
  inhale false
}

method non_atomic_unlock01_bad(r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref)
  requires acc(CAPLock(r, alvl, a, lvl, x), write) && (alvl >= 0 && true) && CAPLock_state(r, alvl, a, lvl, x) == 1 && acc(CAPLock_K(r), write)
  requires acc(Inv(), write)
{
  var $_levelVar_1: Int
  inhale $_levelVar_1 >= 0 && $_levelVar_1 > alvl
  assert $_levelVar_1 >= 0
  inhale acc(Lock_sk_fp(), write) && acc(CAPLock_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $a: Ref, $lvl: Int, $x: Ref :: acc(Lock_interferenceContext_fp($a, $lvl, $x), write))
  inhale (forall $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref :: acc(CAPLock_interferenceContext_fp($r, $alvl, $a, $lvl, $x), write))
  
  // ------- Inferring interference context Lock,CAPLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer0
  
  // Inferring interference all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Lock_interferenceSet_df(1, $a, $lvl, $x)) } none < old[pre_infer0](perm(Lock($a, $lvl, $x))) ==> ($$_m in Lock_interferenceSet_hf(1, $a, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> ($$_m in Lock_atomicity_context_hf($a, $lvl, $x))) && ($$_m == old[pre_infer0](Lock_state($a, $lvl, $x)) || (0 == old[pre_infer0](Lock_state($a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_infer0](Lock_state($a, $lvl, $x)) && 0 == $$_m && true && true)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_infer0](perm(Lock($a, $lvl, $x))) ==> Lock_interferenceReference_hf(1, $a, $lvl, $x) == old[pre_infer0](Lock_state($a, $lvl, $x)))
  
  // Inferring interference all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock_interferenceContext_fp()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CAPLock_interferenceSet_df(1, $r, $alvl, $a, $lvl, $x)) } none < old[pre_infer0](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> ($$_m in CAPLock_interferenceSet_hf(1, $r, $alvl, $a, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> ($$_m in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && ($$_m == old[pre_infer0](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_infer0](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_infer0](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == $$_m && true && true)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_infer0](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> CAPLock_interferenceReference_hf(1, $r, $alvl, $a, $lvl, $x) == old[pre_infer0](CAPLock_state($r, $alvl, $a, $lvl, $x)))
  
  // ------- Inferring interference context Lock,CAPLock (beginning of non atomic procedure) END 
  
  
  inhale false
}

method non_atomic_unlock01(r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref)
  requires (false ? acc(CAPLock(r, alvl, a, lvl, x), write) && (alvl >= 0 && true) : true)
{
  var v: Int
  var $_levelVar_2: Int
  var $_levelVar_3: Int
  var $_levelVar_4: Int
  inhale $_levelVar_2 >= 0 && $_levelVar_2 > alvl
  assert $_levelVar_2 >= 0
  inhale acc(Lock_sk_fp(), write) && acc(CAPLock_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $a: Ref, $lvl: Int, $x: Ref :: acc(Lock_interferenceContext_fp($a, $lvl, $x), write))
  inhale (forall $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref :: acc(CAPLock_interferenceContext_fp($r, $alvl, $a, $lvl, $x), write))
  
  // ------- Inferring interference context Lock,CAPLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer
  
  // Inferring interference all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Lock_interferenceSet_df(2, $a, $lvl, $x)) } none < old[pre_infer](perm(Lock($a, $lvl, $x))) ==> ($$_m in Lock_interferenceSet_hf(2, $a, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> ($$_m in Lock_atomicity_context_hf($a, $lvl, $x))) && ($$_m == old[pre_infer](Lock_state($a, $lvl, $x)) || (0 == old[pre_infer](Lock_state($a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_infer](Lock_state($a, $lvl, $x)) && 0 == $$_m && true && true)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_infer](perm(Lock($a, $lvl, $x))) ==> Lock_interferenceReference_hf(2, $a, $lvl, $x) == old[pre_infer](Lock_state($a, $lvl, $x)))
  
  // Inferring interference all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock_interferenceContext_fp()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CAPLock_interferenceSet_df(2, $r, $alvl, $a, $lvl, $x)) } none < old[pre_infer](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> ($$_m in CAPLock_interferenceSet_hf(2, $r, $alvl, $a, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> ($$_m in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && ($$_m == old[pre_infer](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_infer](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_infer](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == $$_m && true && true)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_infer](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> CAPLock_interferenceReference_hf(2, $r, $alvl, $a, $lvl, $x) == old[pre_infer](CAPLock_state($r, $alvl, $a, $lvl, $x)))
  
  // ------- Inferring interference context Lock,CAPLock (beginning of non atomic procedure) END 
  
  
  
  // ------- inhale BEGIN ------------
  
  
  inhale acc(CAPLock(r, alvl, a, lvl, x), write) && (alvl >= 0 && true) && CAPLock_state(r, alvl, a, lvl, x) == 1 && acc(CAPLock_K(r), write)
  v := CAPLock_state(r, alvl, a, lvl, x)
  
  // ------- inhale END --------------
  
  
  
  // ------- inhale BEGIN ------------
  
  
  inhale acc(Inv(), write)
  
  // ------- inhale END --------------
  
  
  
  // skip;
  
  
  
  // ------- Stabilising regions Lock,CAPLock (after skip@55.3) BEGIN 
  
  
  label pre_stabilize0
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Lock_interferenceSet_df(3, $a, $lvl, $x)) } none < old[pre_stabilize0](perm(Lock($a, $lvl, $x))) ==> ($$_m in Lock_interferenceSet_hf(3, $a, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> ($$_m in Lock_atomicity_context_hf($a, $lvl, $x))) && ($$_m == old[pre_stabilize0](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize0](Lock_state($a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_stabilize0](Lock_state($a, $lvl, $x)) && 0 == $$_m && true && true)))))
  ___silicon_hack407_havoc_all_Lock()
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize0](perm(Lock($a, $lvl, $x))) ==> (Lock_state($a, $lvl, $x) in Lock_interferenceSet_hf(3, $a, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize0](perm(Lock($a, $lvl, $x))) ==> Lock_interferenceReference_hf(3, $a, $lvl, $x) == old[pre_stabilize0](Lock_state($a, $lvl, $x)))
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock_interferenceContext_fp()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CAPLock_interferenceSet_df(3, $r, $alvl, $a, $lvl, $x)) } none < old[pre_stabilize0](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> ($$_m in CAPLock_interferenceSet_hf(3, $r, $alvl, $a, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> ($$_m in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && ($$_m == old[pre_stabilize0](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize0](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_stabilize0](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == $$_m && true && true)))))
  ___silicon_hack407_havoc_all_CAPLock()
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize0](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_interferenceSet_hf(3, $r, $alvl, $a, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize0](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> CAPLock_interferenceReference_hf(3, $r, $alvl, $a, $lvl, $x) == old[pre_stabilize0](CAPLock_state($r, $alvl, $a, $lvl, $x)))
  
  // ------- Stabilising regions Lock,CAPLock (after skip@55.3) END 
  
  
  
  // skip;
  
  
  
  // ------- Stabilising regions Lock,CAPLock (after skip@56.3) BEGIN 
  
  
  label pre_stabilize
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Lock_interferenceSet_df(4, $a, $lvl, $x)) } none < old[pre_stabilize](perm(Lock($a, $lvl, $x))) ==> ($$_m in Lock_interferenceSet_hf(4, $a, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> ($$_m in Lock_atomicity_context_hf($a, $lvl, $x))) && ($$_m == old[pre_stabilize](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize](Lock_state($a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_stabilize](Lock_state($a, $lvl, $x)) && 0 == $$_m && true && true)))))
  ___silicon_hack407_havoc_all_Lock()
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize](perm(Lock($a, $lvl, $x))) ==> (Lock_state($a, $lvl, $x) in Lock_interferenceSet_hf(4, $a, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize](perm(Lock($a, $lvl, $x))) ==> Lock_interferenceReference_hf(4, $a, $lvl, $x) == old[pre_stabilize](Lock_state($a, $lvl, $x)))
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock_interferenceContext_fp()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CAPLock_interferenceSet_df(4, $r, $alvl, $a, $lvl, $x)) } none < old[pre_stabilize](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> ($$_m in CAPLock_interferenceSet_hf(4, $r, $alvl, $a, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> ($$_m in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && ($$_m == old[pre_stabilize](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_stabilize](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == $$_m && true && true)))))
  ___silicon_hack407_havoc_all_CAPLock()
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_interferenceSet_hf(4, $r, $alvl, $a, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> CAPLock_interferenceReference_hf(4, $r, $alvl, $a, $lvl, $x) == old[pre_stabilize](CAPLock_state($r, $alvl, $a, $lvl, $x)))
  
  // ------- Stabilising regions Lock,CAPLock (after skip@56.3) END 
  
  
  
  // ------- use-atomic BEGIN --------
  
  
  label pre_use_atomic0
  assert perm(CAPLock_atomicity_context_fp(r, alvl, a, lvl, x)) == none
  assert $_levelVar_2 > alvl
  $_levelVar_3 := alvl
  exhale acc(CAPLock_K(r), write)
  
  // ------- Stabilising regions Lock (before use-atomic@58.3) BEGIN 
  
  
  label pre_stabilize3
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize3](perm(Lock($a, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> (Lock_state($a, $lvl, $x) in Lock_atomicity_context_hf($a, $lvl, $x))) && (Lock_state($a, $lvl, $x) == old[pre_stabilize3](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize3](Lock_state($a, $lvl, $x)) && 1 == Lock_state($a, $lvl, $x) && true && true || 1 == old[pre_stabilize3](Lock_state($a, $lvl, $x)) && 0 == Lock_state($a, $lvl, $x) && true && true)))
  
  // ------- Stabilising regions Lock (before use-atomic@58.3) END 
  
  
  unfold acc(CAPLock(r, alvl, a, lvl, x), write)
  label transitionPre0
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  inhale (forall $_m0: Int :: { ($_m0 in Lock_interferenceSet_df(4, a, lvl, x)) } ($_m0 in CAPLock_interferenceSet_hf(4, r, alvl, a, lvl, x)) == ($_m0 in Lock_interferenceSet_hf(4, a, lvl, x)))
  
  // havoc performed by other front resource
  
  
  inhale true ==> Lock_interferenceReference_hf(4, a, lvl, x) == old[transitionPre0](Lock_state(a, lvl, x))
  
  // ------- Stabilising regions CAPLock (before use-atomic@58.3) BEGIN 
  
  
  label pre_stabilize4
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize4](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && (CAPLock_state($r, $alvl, $a, $lvl, $x) == old[pre_stabilize4](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize4](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true || 1 == old[pre_stabilize4](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true)))
  
  // ------- Stabilising regions CAPLock (before use-atomic@58.3) END 
  
  
  inhale acc(CAPLock_K(r), write)
  
  // ------- call:unlock BEGIN -------
  
  
  assert (forall $_m: Int :: { ($_m in Lock_interferenceSet_hf(4, a, lvl, x)) } ($_m in Lock_interferenceSet_hf(4, a, lvl, x)) ==> ($_m in Set(1)))
  label pre_call0
  assert $_levelVar_3 >= 0 && $_levelVar_3 > lvl
  assert true
  exhale acc(Lock(a, lvl, x), write) && (lvl >= 0 && Lock_state(a, lvl, x) == Lock_state(a, lvl, x)) && acc(Lock_G(a), write) && (Lock_state(a, lvl, x) in Set(1))
  
  // ------- Stabilising regions Lock,CAPLock (before call:unlock@62.5) BEGIN 
  
  
  label pre_stabilize2
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize2](perm(Lock($a, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> (Lock_state($a, $lvl, $x) in Lock_atomicity_context_hf($a, $lvl, $x))) && (Lock_state($a, $lvl, $x) == old[pre_stabilize2](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize2](Lock_state($a, $lvl, $x)) && 1 == Lock_state($a, $lvl, $x) && true && true || 1 == old[pre_stabilize2](Lock_state($a, $lvl, $x)) && 0 == Lock_state($a, $lvl, $x) && true && true)))
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize2](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && (CAPLock_state($r, $alvl, $a, $lvl, $x) == old[pre_stabilize2](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize2](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true || 1 == old[pre_stabilize2](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true)))
  
  // ------- Stabilising regions Lock,CAPLock (before call:unlock@62.5) END 
  
  
  inhale acc(Lock(a, lvl, x), write) && (lvl >= 0 && Lock_state(a, lvl, x) == 0) && acc(Lock_G(a), write)
  
  // ------- call:unlock END ---------
  
  
  fold acc(CAPLock(r, alvl, a, lvl, x), write)
  assert old[pre_use_atomic0](CAPLock_state(r, alvl, a, lvl, x)) == CAPLock_state(r, alvl, a, lvl, x) || 1 == old[pre_use_atomic0](CAPLock_state(r, alvl, a, lvl, x)) && 0 == CAPLock_state(r, alvl, a, lvl, x)
  $_levelVar_4 := $_levelVar_2
  
  // ------- use-atomic END ----------
  
  
  
  // ------- Stabilising regions Lock,CAPLock (after use-atomic@58.3) BEGIN 
  
  
  label pre_stabilize5
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Lock_interferenceSet_df(5, $a, $lvl, $x)) } none < old[pre_stabilize5](perm(Lock($a, $lvl, $x))) ==> ($$_m in Lock_interferenceSet_hf(5, $a, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> ($$_m in Lock_atomicity_context_hf($a, $lvl, $x))) && ($$_m == old[pre_stabilize5](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize5](Lock_state($a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_stabilize5](Lock_state($a, $lvl, $x)) && 0 == $$_m && true && true)))))
  ___silicon_hack407_havoc_all_Lock()
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize5](perm(Lock($a, $lvl, $x))) ==> (Lock_state($a, $lvl, $x) in Lock_interferenceSet_hf(5, $a, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize5](perm(Lock($a, $lvl, $x))) ==> Lock_interferenceReference_hf(5, $a, $lvl, $x) == old[pre_stabilize5](Lock_state($a, $lvl, $x)))
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock_interferenceContext_fp()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CAPLock_interferenceSet_df(5, $r, $alvl, $a, $lvl, $x)) } none < old[pre_stabilize5](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> ($$_m in CAPLock_interferenceSet_hf(5, $r, $alvl, $a, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> ($$_m in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && ($$_m == old[pre_stabilize5](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize5](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_stabilize5](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == $$_m && true && true)))))
  ___silicon_hack407_havoc_all_CAPLock()
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize5](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_interferenceSet_hf(5, $r, $alvl, $a, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize5](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> CAPLock_interferenceReference_hf(5, $r, $alvl, $a, $lvl, $x) == old[pre_stabilize5](CAPLock_state($r, $alvl, $a, $lvl, $x)))
  
  // ------- Stabilising regions Lock,CAPLock (after use-atomic@58.3) END 
  
  
}

method non_atomic_unlock02(r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref)
  requires (false ? acc(CAPLock(r, alvl, a, lvl, x), write) && (alvl >= 0 && true) : true)
{
  var v: Int
  var $_levelVar_5: Int
  var $_levelVar_6: Int
  var $_levelVar_7: Int
  inhale $_levelVar_5 >= 0 && $_levelVar_5 > alvl
  assert $_levelVar_5 >= 0
  inhale acc(Lock_sk_fp(), write) && acc(CAPLock_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $a: Ref, $lvl: Int, $x: Ref :: acc(Lock_interferenceContext_fp($a, $lvl, $x), write))
  inhale (forall $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref :: acc(CAPLock_interferenceContext_fp($r, $alvl, $a, $lvl, $x), write))
  
  // ------- Inferring interference context Lock,CAPLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer2
  
  // Inferring interference all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Lock_interferenceSet_df(6, $a, $lvl, $x)) } none < old[pre_infer2](perm(Lock($a, $lvl, $x))) ==> ($$_m in Lock_interferenceSet_hf(6, $a, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> ($$_m in Lock_atomicity_context_hf($a, $lvl, $x))) && ($$_m == old[pre_infer2](Lock_state($a, $lvl, $x)) || (0 == old[pre_infer2](Lock_state($a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_infer2](Lock_state($a, $lvl, $x)) && 0 == $$_m && true && true)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_infer2](perm(Lock($a, $lvl, $x))) ==> Lock_interferenceReference_hf(6, $a, $lvl, $x) == old[pre_infer2](Lock_state($a, $lvl, $x)))
  
  // Inferring interference all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock_interferenceContext_fp()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CAPLock_interferenceSet_df(6, $r, $alvl, $a, $lvl, $x)) } none < old[pre_infer2](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> ($$_m in CAPLock_interferenceSet_hf(6, $r, $alvl, $a, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> ($$_m in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && ($$_m == old[pre_infer2](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_infer2](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_infer2](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == $$_m && true && true)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_infer2](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> CAPLock_interferenceReference_hf(6, $r, $alvl, $a, $lvl, $x) == old[pre_infer2](CAPLock_state($r, $alvl, $a, $lvl, $x)))
  
  // ------- Inferring interference context Lock,CAPLock (beginning of non atomic procedure) END 
  
  
  
  // ------- inhale BEGIN ------------
  
  
  inhale acc(CAPLock(r, alvl, a, lvl, x), write) && (alvl >= 0 && true) && CAPLock_state(r, alvl, a, lvl, x) == 1 && acc(CAPLock_K(r), write)
  v := CAPLock_state(r, alvl, a, lvl, x)
  
  // ------- inhale END --------------
  
  
  
  // ------- inhale BEGIN ------------
  
  
  inhale acc(Inv(), write)
  
  // ------- inhale END --------------
  
  
  
  // ------- use-atomic BEGIN --------
  
  
  label pre_use_atomic
  assert perm(CAPLock_atomicity_context_fp(r, alvl, a, lvl, x)) == none
  assert $_levelVar_5 > alvl
  $_levelVar_6 := alvl
  exhale acc(CAPLock_K(r), write)
  
  // ------- Stabilising regions Lock (before use-atomic@72.3) BEGIN 
  
  
  label pre_stabilize7
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize7](perm(Lock($a, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> (Lock_state($a, $lvl, $x) in Lock_atomicity_context_hf($a, $lvl, $x))) && (Lock_state($a, $lvl, $x) == old[pre_stabilize7](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize7](Lock_state($a, $lvl, $x)) && 1 == Lock_state($a, $lvl, $x) && true && true || 1 == old[pre_stabilize7](Lock_state($a, $lvl, $x)) && 0 == Lock_state($a, $lvl, $x) && true && true)))
  
  // ------- Stabilising regions Lock (before use-atomic@72.3) END 
  
  
  unfold acc(CAPLock(r, alvl, a, lvl, x), write)
  label transitionPre
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  inhale (forall $_m0: Int :: { ($_m0 in Lock_interferenceSet_df(6, a, lvl, x)) } ($_m0 in CAPLock_interferenceSet_hf(6, r, alvl, a, lvl, x)) == ($_m0 in Lock_interferenceSet_hf(6, a, lvl, x)))
  
  // havoc performed by other front resource
  
  
  inhale true ==> Lock_interferenceReference_hf(6, a, lvl, x) == old[transitionPre](Lock_state(a, lvl, x))
  
  // ------- Stabilising regions CAPLock (before use-atomic@72.3) BEGIN 
  
  
  label pre_stabilize8
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize8](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && (CAPLock_state($r, $alvl, $a, $lvl, $x) == old[pre_stabilize8](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize8](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true || 1 == old[pre_stabilize8](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true)))
  
  // ------- Stabilising regions CAPLock (before use-atomic@72.3) END 
  
  
  inhale acc(CAPLock_K(r), write)
  
  // ------- call:unlock BEGIN -------
  
  
  assert (forall $_m: Int :: { ($_m in Lock_interferenceSet_hf(6, a, lvl, x)) } ($_m in Lock_interferenceSet_hf(6, a, lvl, x)) ==> ($_m in Set(1)))
  label pre_call
  assert $_levelVar_6 >= 0 && $_levelVar_6 > lvl
  assert true
  exhale acc(Lock(a, lvl, x), write) && (lvl >= 0 && Lock_state(a, lvl, x) == Lock_state(a, lvl, x)) && acc(Lock_G(a), write) && (Lock_state(a, lvl, x) in Set(1))
  
  // ------- Stabilising regions Lock,CAPLock (before call:unlock@76.5) BEGIN 
  
  
  label pre_stabilize6
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize6](perm(Lock($a, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> (Lock_state($a, $lvl, $x) in Lock_atomicity_context_hf($a, $lvl, $x))) && (Lock_state($a, $lvl, $x) == old[pre_stabilize6](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize6](Lock_state($a, $lvl, $x)) && 1 == Lock_state($a, $lvl, $x) && true && true || 1 == old[pre_stabilize6](Lock_state($a, $lvl, $x)) && 0 == Lock_state($a, $lvl, $x) && true && true)))
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize6](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && (CAPLock_state($r, $alvl, $a, $lvl, $x) == old[pre_stabilize6](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize6](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true || 1 == old[pre_stabilize6](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true)))
  
  // ------- Stabilising regions Lock,CAPLock (before call:unlock@76.5) END 
  
  
  inhale acc(Lock(a, lvl, x), write) && (lvl >= 0 && Lock_state(a, lvl, x) == 0) && acc(Lock_G(a), write)
  
  // ------- call:unlock END ---------
  
  
  fold acc(CAPLock(r, alvl, a, lvl, x), write)
  assert old[pre_use_atomic](CAPLock_state(r, alvl, a, lvl, x)) == CAPLock_state(r, alvl, a, lvl, x) || 1 == old[pre_use_atomic](CAPLock_state(r, alvl, a, lvl, x)) && 0 == CAPLock_state(r, alvl, a, lvl, x)
  $_levelVar_7 := $_levelVar_5
  
  // ------- use-atomic END ----------
  
  
  
  // ------- Stabilising regions Lock,CAPLock (after use-atomic@72.3) BEGIN 
  
  
  label pre_stabilize9
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Lock_interferenceSet_df(7, $a, $lvl, $x)) } none < old[pre_stabilize9](perm(Lock($a, $lvl, $x))) ==> ($$_m in Lock_interferenceSet_hf(7, $a, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> ($$_m in Lock_atomicity_context_hf($a, $lvl, $x))) && ($$_m == old[pre_stabilize9](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize9](Lock_state($a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_stabilize9](Lock_state($a, $lvl, $x)) && 0 == $$_m && true && true)))))
  ___silicon_hack407_havoc_all_Lock()
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize9](perm(Lock($a, $lvl, $x))) ==> (Lock_state($a, $lvl, $x) in Lock_interferenceSet_hf(7, $a, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize9](perm(Lock($a, $lvl, $x))) ==> Lock_interferenceReference_hf(7, $a, $lvl, $x) == old[pre_stabilize9](Lock_state($a, $lvl, $x)))
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock_interferenceContext_fp()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CAPLock_interferenceSet_df(7, $r, $alvl, $a, $lvl, $x)) } none < old[pre_stabilize9](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> ($$_m in CAPLock_interferenceSet_hf(7, $r, $alvl, $a, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> ($$_m in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && ($$_m == old[pre_stabilize9](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize9](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_stabilize9](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == $$_m && true && true)))))
  ___silicon_hack407_havoc_all_CAPLock()
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize9](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_interferenceSet_hf(7, $r, $alvl, $a, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize9](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> CAPLock_interferenceReference_hf(7, $r, $alvl, $a, $lvl, $x) == old[pre_stabilize9](CAPLock_state($r, $alvl, $a, $lvl, $x)))
  
  // ------- Stabilising regions Lock,CAPLock (after use-atomic@72.3) END 
  
  
  
  // skip;
  
  
  
  // ------- Stabilising regions Lock,CAPLock (after skip@79.3) BEGIN 
  
  
  label pre_stabilize10
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Lock_interferenceSet_df(8, $a, $lvl, $x)) } none < old[pre_stabilize10](perm(Lock($a, $lvl, $x))) ==> ($$_m in Lock_interferenceSet_hf(8, $a, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> ($$_m in Lock_atomicity_context_hf($a, $lvl, $x))) && ($$_m == old[pre_stabilize10](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize10](Lock_state($a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_stabilize10](Lock_state($a, $lvl, $x)) && 0 == $$_m && true && true)))))
  ___silicon_hack407_havoc_all_Lock()
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize10](perm(Lock($a, $lvl, $x))) ==> (Lock_state($a, $lvl, $x) in Lock_interferenceSet_hf(8, $a, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize10](perm(Lock($a, $lvl, $x))) ==> Lock_interferenceReference_hf(8, $a, $lvl, $x) == old[pre_stabilize10](Lock_state($a, $lvl, $x)))
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock_interferenceContext_fp()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CAPLock_interferenceSet_df(8, $r, $alvl, $a, $lvl, $x)) } none < old[pre_stabilize10](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> ($$_m in CAPLock_interferenceSet_hf(8, $r, $alvl, $a, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> ($$_m in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && ($$_m == old[pre_stabilize10](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize10](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_stabilize10](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == $$_m && true && true)))))
  ___silicon_hack407_havoc_all_CAPLock()
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize10](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_interferenceSet_hf(8, $r, $alvl, $a, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize10](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> CAPLock_interferenceReference_hf(8, $r, $alvl, $a, $lvl, $x) == old[pre_stabilize10](CAPLock_state($r, $alvl, $a, $lvl, $x)))
  
  // ------- Stabilising regions Lock,CAPLock (after skip@79.3) END 
  
  
}

method non_atomic_unlock03(r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref)
  requires (false ? acc(CAPLock(r, alvl, a, lvl, x), write) && (alvl >= 0 && true) : true)
{
  var v: Int
  var $_levelVar_8: Int
  var $_levelVar_9: Int
  var $_levelVar_10: Int
  inhale $_levelVar_8 >= 0 && $_levelVar_8 > alvl
  assert $_levelVar_8 >= 0
  inhale acc(Lock_sk_fp(), write) && acc(CAPLock_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $a: Ref, $lvl: Int, $x: Ref :: acc(Lock_interferenceContext_fp($a, $lvl, $x), write))
  inhale (forall $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref :: acc(CAPLock_interferenceContext_fp($r, $alvl, $a, $lvl, $x), write))
  
  // ------- Inferring interference context Lock,CAPLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer3
  
  // Inferring interference all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Lock_interferenceSet_df(9, $a, $lvl, $x)) } none < old[pre_infer3](perm(Lock($a, $lvl, $x))) ==> ($$_m in Lock_interferenceSet_hf(9, $a, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> ($$_m in Lock_atomicity_context_hf($a, $lvl, $x))) && ($$_m == old[pre_infer3](Lock_state($a, $lvl, $x)) || (0 == old[pre_infer3](Lock_state($a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_infer3](Lock_state($a, $lvl, $x)) && 0 == $$_m && true && true)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_infer3](perm(Lock($a, $lvl, $x))) ==> Lock_interferenceReference_hf(9, $a, $lvl, $x) == old[pre_infer3](Lock_state($a, $lvl, $x)))
  
  // Inferring interference all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock_interferenceContext_fp()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CAPLock_interferenceSet_df(9, $r, $alvl, $a, $lvl, $x)) } none < old[pre_infer3](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> ($$_m in CAPLock_interferenceSet_hf(9, $r, $alvl, $a, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> ($$_m in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && ($$_m == old[pre_infer3](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_infer3](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_infer3](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == $$_m && true && true)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_infer3](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> CAPLock_interferenceReference_hf(9, $r, $alvl, $a, $lvl, $x) == old[pre_infer3](CAPLock_state($r, $alvl, $a, $lvl, $x)))
  
  // ------- Inferring interference context Lock,CAPLock (beginning of non atomic procedure) END 
  
  
  
  // ------- inhale BEGIN ------------
  
  
  inhale acc(CAPLock(r, alvl, a, lvl, x), write) && (alvl >= 0 && true) && CAPLock_state(r, alvl, a, lvl, x) == 1 && acc(CAPLock_K(r), write)
  v := CAPLock_state(r, alvl, a, lvl, x)
  
  // ------- inhale END --------------
  
  
  
  // ------- inhale BEGIN ------------
  
  
  inhale acc(Inv(), write)
  
  // ------- inhale END --------------
  
  
  
  // ------- use-atomic BEGIN --------
  
  
  label pre_use_atomic2
  assert perm(CAPLock_atomicity_context_fp(r, alvl, a, lvl, x)) == none
  assert $_levelVar_8 > alvl
  $_levelVar_9 := alvl
  exhale acc(CAPLock_K(r), write)
  
  // ------- Stabilising regions Lock (before use-atomic@88.3) BEGIN 
  
  
  label pre_stabilize12
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize12](perm(Lock($a, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> (Lock_state($a, $lvl, $x) in Lock_atomicity_context_hf($a, $lvl, $x))) && (Lock_state($a, $lvl, $x) == old[pre_stabilize12](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize12](Lock_state($a, $lvl, $x)) && 1 == Lock_state($a, $lvl, $x) && true && true || 1 == old[pre_stabilize12](Lock_state($a, $lvl, $x)) && 0 == Lock_state($a, $lvl, $x) && true && true)))
  
  // ------- Stabilising regions Lock (before use-atomic@88.3) END 
  
  
  unfold acc(CAPLock(r, alvl, a, lvl, x), write)
  label transitionPre2
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  inhale (forall $_m0: Int :: { ($_m0 in Lock_interferenceSet_df(9, a, lvl, x)) } ($_m0 in CAPLock_interferenceSet_hf(9, r, alvl, a, lvl, x)) == ($_m0 in Lock_interferenceSet_hf(9, a, lvl, x)))
  
  // havoc performed by other front resource
  
  
  inhale true ==> Lock_interferenceReference_hf(9, a, lvl, x) == old[transitionPre2](Lock_state(a, lvl, x))
  
  // ------- Stabilising regions CAPLock (before use-atomic@88.3) BEGIN 
  
  
  label pre_stabilize13
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize13](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && (CAPLock_state($r, $alvl, $a, $lvl, $x) == old[pre_stabilize13](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize13](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true || 1 == old[pre_stabilize13](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true)))
  
  // ------- Stabilising regions CAPLock (before use-atomic@88.3) END 
  
  
  inhale acc(CAPLock_K(r), write)
  
  // ------- call:unlock BEGIN -------
  
  
  assert (forall $_m: Int :: { ($_m in Lock_interferenceSet_hf(9, a, lvl, x)) } ($_m in Lock_interferenceSet_hf(9, a, lvl, x)) ==> ($_m in Set(1)))
  label pre_call2
  assert $_levelVar_9 >= 0 && $_levelVar_9 > lvl
  assert true
  exhale acc(Lock(a, lvl, x), write) && (lvl >= 0 && Lock_state(a, lvl, x) == Lock_state(a, lvl, x)) && acc(Lock_G(a), write) && (Lock_state(a, lvl, x) in Set(1))
  
  // ------- Stabilising regions Lock,CAPLock (before call:unlock@92.5) BEGIN 
  
  
  label pre_stabilize11
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize11](perm(Lock($a, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> (Lock_state($a, $lvl, $x) in Lock_atomicity_context_hf($a, $lvl, $x))) && (Lock_state($a, $lvl, $x) == old[pre_stabilize11](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize11](Lock_state($a, $lvl, $x)) && 1 == Lock_state($a, $lvl, $x) && true && true || 1 == old[pre_stabilize11](Lock_state($a, $lvl, $x)) && 0 == Lock_state($a, $lvl, $x) && true && true)))
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize11](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && (CAPLock_state($r, $alvl, $a, $lvl, $x) == old[pre_stabilize11](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize11](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true || 1 == old[pre_stabilize11](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true)))
  
  // ------- Stabilising regions Lock,CAPLock (before call:unlock@92.5) END 
  
  
  inhale acc(Lock(a, lvl, x), write) && (lvl >= 0 && Lock_state(a, lvl, x) == 0) && acc(Lock_G(a), write)
  
  // ------- call:unlock END ---------
  
  
  fold acc(CAPLock(r, alvl, a, lvl, x), write)
  assert old[pre_use_atomic2](CAPLock_state(r, alvl, a, lvl, x)) == CAPLock_state(r, alvl, a, lvl, x) || 1 == old[pre_use_atomic2](CAPLock_state(r, alvl, a, lvl, x)) && 0 == CAPLock_state(r, alvl, a, lvl, x)
  $_levelVar_10 := $_levelVar_8
  
  // ------- use-atomic END ----------
  
  
  
  // ------- Stabilising regions Lock,CAPLock (after seq-comp@85.3) BEGIN 
  
  
  label pre_stabilize14
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Lock_interferenceSet_df(10, $a, $lvl, $x)) } none < old[pre_stabilize14](perm(Lock($a, $lvl, $x))) ==> ($$_m in Lock_interferenceSet_hf(10, $a, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> ($$_m in Lock_atomicity_context_hf($a, $lvl, $x))) && ($$_m == old[pre_stabilize14](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize14](Lock_state($a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_stabilize14](Lock_state($a, $lvl, $x)) && 0 == $$_m && true && true)))))
  ___silicon_hack407_havoc_all_Lock()
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize14](perm(Lock($a, $lvl, $x))) ==> (Lock_state($a, $lvl, $x) in Lock_interferenceSet_hf(10, $a, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize14](perm(Lock($a, $lvl, $x))) ==> Lock_interferenceReference_hf(10, $a, $lvl, $x) == old[pre_stabilize14](Lock_state($a, $lvl, $x)))
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock_interferenceContext_fp()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CAPLock_interferenceSet_df(10, $r, $alvl, $a, $lvl, $x)) } none < old[pre_stabilize14](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> ($$_m in CAPLock_interferenceSet_hf(10, $r, $alvl, $a, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> ($$_m in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && ($$_m == old[pre_stabilize14](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize14](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_stabilize14](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == $$_m && true && true)))))
  ___silicon_hack407_havoc_all_CAPLock()
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize14](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_interferenceSet_hf(10, $r, $alvl, $a, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize14](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> CAPLock_interferenceReference_hf(10, $r, $alvl, $a, $lvl, $x) == old[pre_stabilize14](CAPLock_state($r, $alvl, $a, $lvl, $x)))
  
  // ------- Stabilising regions Lock,CAPLock (after seq-comp@85.3) END 
  
  
}

method $_Lock_interpretation_stability_check(a: Ref, lvl: Int, x: Ref)
{
  inhale acc(Lock_sk_fp(), write) && acc(CAPLock_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $a: Ref, $lvl: Int, $x: Ref :: acc(Lock_interferenceContext_fp($a, $lvl, $x), write))
  inhale (forall $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref :: acc(CAPLock_interferenceContext_fp($r, $alvl, $a, $lvl, $x), write))
  inhale acc(x.$memcell_$f, write) && true && (x.$memcell_$f == 0 || x.$memcell_$f == 1)
  
  // ------- Stabilising regions Lock,CAPLock (check stability of region interpretation) BEGIN 
  
  
  label pre_stabilize15
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize15](perm(Lock($a, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> (Lock_state($a, $lvl, $x) in Lock_atomicity_context_hf($a, $lvl, $x))) && (Lock_state($a, $lvl, $x) == old[pre_stabilize15](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize15](Lock_state($a, $lvl, $x)) && 1 == Lock_state($a, $lvl, $x) && true && true || 1 == old[pre_stabilize15](Lock_state($a, $lvl, $x)) && 0 == Lock_state($a, $lvl, $x) && true && true)))
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize15](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && (CAPLock_state($r, $alvl, $a, $lvl, $x) == old[pre_stabilize15](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize15](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true || 1 == old[pre_stabilize15](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true)))
  
  // ------- Stabilising regions Lock,CAPLock (check stability of region interpretation) END 
  
  
  assert acc(x.$memcell_$f, write) && true && (x.$memcell_$f == 0 || x.$memcell_$f == 1)
}

method $_Lock_action_transitivity_check()
{
  var G: Bool
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState || 0 == aState && 1 == bState && true && G || 1 == aState && 0 == bState && true && G
  inhale bState == cState || 0 == bState && 1 == cState && true && G || 1 == bState && 0 == cState && true && G
  assert aState == cState || 0 == aState && 1 == cState && true && G || 1 == aState && 0 == cState && true && G
}

method $_CAPLock_interpretation_stability_check(r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref)
{
  inhale acc(Lock_sk_fp(), write) && acc(CAPLock_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $a: Ref, $lvl: Int, $x: Ref :: acc(Lock_interferenceContext_fp($a, $lvl, $x), write))
  inhale (forall $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref :: acc(CAPLock_interferenceContext_fp($r, $alvl, $a, $lvl, $x), write))
  inhale acc(Lock(a, lvl, x), write) && (lvl >= 0 && true) && lvl < alvl && acc(Lock_G(a), write) && (Lock_state(a, lvl, x) == 0 ? acc(CAPLock_K(r), write) && acc(Inv(), write) : true) && (Lock_state(a, lvl, x) == 1 ? true : true)
  
  // ------- Stabilising regions Lock,CAPLock (check stability of region interpretation) BEGIN 
  
  
  label pre_stabilize16
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize16](perm(Lock($a, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> (Lock_state($a, $lvl, $x) in Lock_atomicity_context_hf($a, $lvl, $x))) && (Lock_state($a, $lvl, $x) == old[pre_stabilize16](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize16](Lock_state($a, $lvl, $x)) && 1 == Lock_state($a, $lvl, $x) && true && true || 1 == old[pre_stabilize16](Lock_state($a, $lvl, $x)) && 0 == Lock_state($a, $lvl, $x) && true && true)))
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize16](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && (CAPLock_state($r, $alvl, $a, $lvl, $x) == old[pre_stabilize16](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize16](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true || 1 == old[pre_stabilize16](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true)))
  
  // ------- Stabilising regions Lock,CAPLock (check stability of region interpretation) END 
  
  
  assert acc(Lock(a, lvl, x), write) && (lvl >= 0 && true) && lvl < alvl && acc(Lock_G(a), write) && (Lock_state(a, lvl, x) == 0 ? acc(CAPLock_K(r), write) && acc(Inv(), write) : true) && (Lock_state(a, lvl, x) == 1 ? true : true)
}

method $_CAPLock_action_transitivity_check()
{
  var Z: Bool
  var K: Bool
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState || 0 == aState && 1 == bState && true && Z || 1 == aState && 0 == bState && true && K
  inhale bState == cState || 0 == bState && 1 == cState && true && Z || 1 == bState && 0 == cState && true && K
  assert aState == cState || 0 == aState && 1 == cState && true && Z || 1 == aState && 0 == cState && true && K
}

method $_unlock_condition_stability_precondition_check(a: Ref, lvl: Int, x: Ref)
  requires acc(Lock(a, lvl, x), write) && (lvl >= 0 && Lock_state(a, lvl, x) == Lock_state(a, lvl, x)) && acc(Lock_G(a), write)
{
  var $_levelVar_11: Int
  inhale $_levelVar_11 >= 0 && $_levelVar_11 > lvl
  inhale acc(Lock_sk_fp(), write) && acc(CAPLock_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $a: Ref, $lvl: Int, $x: Ref :: acc(Lock_interferenceContext_fp($a, $lvl, $x), write))
  inhale (forall $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref :: acc(CAPLock_interferenceContext_fp($r, $alvl, $a, $lvl, $x), write))
  inhale Lock_interferenceSet_hf(10, a, lvl, x) == Set(1)
  inhale Lock_interferenceReference_hf(10, a, lvl, x) == old(Lock_state(a, lvl, x))
  
  // ------- Stabilising regions Lock,CAPLock (check stability of method condition) BEGIN 
  
  
  label pre_stabilize17
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize17](perm(Lock($a, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> (Lock_state($a, $lvl, $x) in Lock_atomicity_context_hf($a, $lvl, $x))) && (Lock_state($a, $lvl, $x) == old[pre_stabilize17](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize17](Lock_state($a, $lvl, $x)) && 1 == Lock_state($a, $lvl, $x) && true && true || 1 == old[pre_stabilize17](Lock_state($a, $lvl, $x)) && 0 == Lock_state($a, $lvl, $x) && true && true)))
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize17](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && (CAPLock_state($r, $alvl, $a, $lvl, $x) == old[pre_stabilize17](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize17](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true || 1 == old[pre_stabilize17](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true)))
  
  // ------- Stabilising regions Lock,CAPLock (check stability of method condition) END 
  
  
  assert acc(Lock(a, lvl, x), write) && (lvl >= 0 && Lock_state(a, lvl, x) == Lock_state(a, lvl, x)) && acc(Lock_G(a), write)
}

method $_non_atomic_unlock01_bad_condition_stability_precondition_check(r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref)
  requires acc(CAPLock(r, alvl, a, lvl, x), write) && (alvl >= 0 && true) && CAPLock_state(r, alvl, a, lvl, x) == 1 && acc(CAPLock_K(r), write)
  requires acc(Inv(), write)
{
  var $_levelVar_12: Int
  inhale $_levelVar_12 >= 0 && $_levelVar_12 > alvl
  inhale acc(Lock_sk_fp(), write) && acc(CAPLock_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $a: Ref, $lvl: Int, $x: Ref :: acc(Lock_interferenceContext_fp($a, $lvl, $x), write))
  inhale (forall $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref :: acc(CAPLock_interferenceContext_fp($r, $alvl, $a, $lvl, $x), write))
  
  // ------- Inferring interference context Lock,CAPLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer4
  
  // Inferring interference all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Lock_interferenceSet_df(11, $a, $lvl, $x)) } none < old[pre_infer4](perm(Lock($a, $lvl, $x))) ==> ($$_m in Lock_interferenceSet_hf(11, $a, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> ($$_m in Lock_atomicity_context_hf($a, $lvl, $x))) && ($$_m == old[pre_infer4](Lock_state($a, $lvl, $x)) || (0 == old[pre_infer4](Lock_state($a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_infer4](Lock_state($a, $lvl, $x)) && 0 == $$_m && true && true)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_infer4](perm(Lock($a, $lvl, $x))) ==> Lock_interferenceReference_hf(11, $a, $lvl, $x) == old[pre_infer4](Lock_state($a, $lvl, $x)))
  
  // Inferring interference all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock_interferenceContext_fp()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CAPLock_interferenceSet_df(11, $r, $alvl, $a, $lvl, $x)) } none < old[pre_infer4](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> ($$_m in CAPLock_interferenceSet_hf(11, $r, $alvl, $a, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> ($$_m in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && ($$_m == old[pre_infer4](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_infer4](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_infer4](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == $$_m && true && true)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_infer4](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> CAPLock_interferenceReference_hf(11, $r, $alvl, $a, $lvl, $x) == old[pre_infer4](CAPLock_state($r, $alvl, $a, $lvl, $x)))
  
  // ------- Inferring interference context Lock,CAPLock (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Lock,CAPLock (check stability of method condition) BEGIN 
  
  
  label pre_stabilize18
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize18](perm(Lock($a, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> (Lock_state($a, $lvl, $x) in Lock_atomicity_context_hf($a, $lvl, $x))) && (Lock_state($a, $lvl, $x) == old[pre_stabilize18](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize18](Lock_state($a, $lvl, $x)) && 1 == Lock_state($a, $lvl, $x) && true && true || 1 == old[pre_stabilize18](Lock_state($a, $lvl, $x)) && 0 == Lock_state($a, $lvl, $x) && true && true)))
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize18](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && (CAPLock_state($r, $alvl, $a, $lvl, $x) == old[pre_stabilize18](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize18](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true || 1 == old[pre_stabilize18](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true)))
  
  // ------- Stabilising regions Lock,CAPLock (check stability of method condition) END 
  
  
  assert acc(CAPLock(r, alvl, a, lvl, x), write) && (alvl >= 0 && true) && CAPLock_state(r, alvl, a, lvl, x) == 1 && acc(CAPLock_K(r), write) && acc(Inv(), write)
}

method $_non_atomic_unlock01_condition_stability_precondition_check(r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref)
  requires (false ? acc(CAPLock(r, alvl, a, lvl, x), write) && (alvl >= 0 && true) : true)
{
  var $_levelVar_13: Int
  inhale $_levelVar_13 >= 0 && $_levelVar_13 > alvl
  inhale acc(Lock_sk_fp(), write) && acc(CAPLock_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $a: Ref, $lvl: Int, $x: Ref :: acc(Lock_interferenceContext_fp($a, $lvl, $x), write))
  inhale (forall $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref :: acc(CAPLock_interferenceContext_fp($r, $alvl, $a, $lvl, $x), write))
  
  // ------- Inferring interference context Lock,CAPLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer5
  
  // Inferring interference all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Lock_interferenceSet_df(12, $a, $lvl, $x)) } none < old[pre_infer5](perm(Lock($a, $lvl, $x))) ==> ($$_m in Lock_interferenceSet_hf(12, $a, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> ($$_m in Lock_atomicity_context_hf($a, $lvl, $x))) && ($$_m == old[pre_infer5](Lock_state($a, $lvl, $x)) || (0 == old[pre_infer5](Lock_state($a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_infer5](Lock_state($a, $lvl, $x)) && 0 == $$_m && true && true)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_infer5](perm(Lock($a, $lvl, $x))) ==> Lock_interferenceReference_hf(12, $a, $lvl, $x) == old[pre_infer5](Lock_state($a, $lvl, $x)))
  
  // Inferring interference all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock_interferenceContext_fp()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CAPLock_interferenceSet_df(12, $r, $alvl, $a, $lvl, $x)) } none < old[pre_infer5](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> ($$_m in CAPLock_interferenceSet_hf(12, $r, $alvl, $a, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> ($$_m in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && ($$_m == old[pre_infer5](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_infer5](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_infer5](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == $$_m && true && true)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_infer5](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> CAPLock_interferenceReference_hf(12, $r, $alvl, $a, $lvl, $x) == old[pre_infer5](CAPLock_state($r, $alvl, $a, $lvl, $x)))
  
  // ------- Inferring interference context Lock,CAPLock (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Lock,CAPLock (check stability of method condition) BEGIN 
  
  
  label pre_stabilize19
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize19](perm(Lock($a, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> (Lock_state($a, $lvl, $x) in Lock_atomicity_context_hf($a, $lvl, $x))) && (Lock_state($a, $lvl, $x) == old[pre_stabilize19](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize19](Lock_state($a, $lvl, $x)) && 1 == Lock_state($a, $lvl, $x) && true && true || 1 == old[pre_stabilize19](Lock_state($a, $lvl, $x)) && 0 == Lock_state($a, $lvl, $x) && true && true)))
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize19](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && (CAPLock_state($r, $alvl, $a, $lvl, $x) == old[pre_stabilize19](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize19](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true || 1 == old[pre_stabilize19](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true)))
  
  // ------- Stabilising regions Lock,CAPLock (check stability of method condition) END 
  
  
  assert (false ? acc(CAPLock(r, alvl, a, lvl, x), write) && (alvl >= 0 && true) : true)
}

method $_non_atomic_unlock02_condition_stability_precondition_check(r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref)
  requires (false ? acc(CAPLock(r, alvl, a, lvl, x), write) && (alvl >= 0 && true) : true)
{
  var $_levelVar_14: Int
  inhale $_levelVar_14 >= 0 && $_levelVar_14 > alvl
  inhale acc(Lock_sk_fp(), write) && acc(CAPLock_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $a: Ref, $lvl: Int, $x: Ref :: acc(Lock_interferenceContext_fp($a, $lvl, $x), write))
  inhale (forall $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref :: acc(CAPLock_interferenceContext_fp($r, $alvl, $a, $lvl, $x), write))
  
  // ------- Inferring interference context Lock,CAPLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer6
  
  // Inferring interference all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Lock_interferenceSet_df(13, $a, $lvl, $x)) } none < old[pre_infer6](perm(Lock($a, $lvl, $x))) ==> ($$_m in Lock_interferenceSet_hf(13, $a, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> ($$_m in Lock_atomicity_context_hf($a, $lvl, $x))) && ($$_m == old[pre_infer6](Lock_state($a, $lvl, $x)) || (0 == old[pre_infer6](Lock_state($a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_infer6](Lock_state($a, $lvl, $x)) && 0 == $$_m && true && true)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_infer6](perm(Lock($a, $lvl, $x))) ==> Lock_interferenceReference_hf(13, $a, $lvl, $x) == old[pre_infer6](Lock_state($a, $lvl, $x)))
  
  // Inferring interference all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock_interferenceContext_fp()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CAPLock_interferenceSet_df(13, $r, $alvl, $a, $lvl, $x)) } none < old[pre_infer6](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> ($$_m in CAPLock_interferenceSet_hf(13, $r, $alvl, $a, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> ($$_m in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && ($$_m == old[pre_infer6](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_infer6](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_infer6](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == $$_m && true && true)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_infer6](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> CAPLock_interferenceReference_hf(13, $r, $alvl, $a, $lvl, $x) == old[pre_infer6](CAPLock_state($r, $alvl, $a, $lvl, $x)))
  
  // ------- Inferring interference context Lock,CAPLock (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Lock,CAPLock (check stability of method condition) BEGIN 
  
  
  label pre_stabilize20
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize20](perm(Lock($a, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> (Lock_state($a, $lvl, $x) in Lock_atomicity_context_hf($a, $lvl, $x))) && (Lock_state($a, $lvl, $x) == old[pre_stabilize20](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize20](Lock_state($a, $lvl, $x)) && 1 == Lock_state($a, $lvl, $x) && true && true || 1 == old[pre_stabilize20](Lock_state($a, $lvl, $x)) && 0 == Lock_state($a, $lvl, $x) && true && true)))
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize20](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && (CAPLock_state($r, $alvl, $a, $lvl, $x) == old[pre_stabilize20](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize20](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true || 1 == old[pre_stabilize20](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true)))
  
  // ------- Stabilising regions Lock,CAPLock (check stability of method condition) END 
  
  
  assert (false ? acc(CAPLock(r, alvl, a, lvl, x), write) && (alvl >= 0 && true) : true)
}

method $_non_atomic_unlock03_condition_stability_precondition_check(r: Ref, alvl: Int, a: Ref, lvl: Int, x: Ref)
  requires (false ? acc(CAPLock(r, alvl, a, lvl, x), write) && (alvl >= 0 && true) : true)
{
  var $_levelVar_15: Int
  inhale $_levelVar_15 >= 0 && $_levelVar_15 > alvl
  inhale acc(Lock_sk_fp(), write) && acc(CAPLock_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $a: Ref, $lvl: Int, $x: Ref :: acc(Lock_interferenceContext_fp($a, $lvl, $x), write))
  inhale (forall $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref :: acc(CAPLock_interferenceContext_fp($r, $alvl, $a, $lvl, $x), write))
  
  // ------- Inferring interference context Lock,CAPLock (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer7
  
  // Inferring interference all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock_interferenceContext_fp()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Lock_interferenceSet_df(14, $a, $lvl, $x)) } none < old[pre_infer7](perm(Lock($a, $lvl, $x))) ==> ($$_m in Lock_interferenceSet_hf(14, $a, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> ($$_m in Lock_atomicity_context_hf($a, $lvl, $x))) && ($$_m == old[pre_infer7](Lock_state($a, $lvl, $x)) || (0 == old[pre_infer7](Lock_state($a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_infer7](Lock_state($a, $lvl, $x)) && 0 == $$_m && true && true)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_infer7](perm(Lock($a, $lvl, $x))) ==> Lock_interferenceReference_hf(14, $a, $lvl, $x) == old[pre_infer7](Lock_state($a, $lvl, $x)))
  
  // Inferring interference all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock_interferenceContext_fp()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CAPLock_interferenceSet_df(14, $r, $alvl, $a, $lvl, $x)) } none < old[pre_infer7](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> ($$_m in CAPLock_interferenceSet_hf(14, $r, $alvl, $a, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> ($$_m in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && ($$_m == old[pre_infer7](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_infer7](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == $$_m && true && true || 1 == old[pre_infer7](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == $$_m && true && true)))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_infer7](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> CAPLock_interferenceReference_hf(14, $r, $alvl, $a, $lvl, $x) == old[pre_infer7](CAPLock_state($r, $alvl, $a, $lvl, $x)))
  
  // ------- Inferring interference context Lock,CAPLock (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Lock,CAPLock (check stability of method condition) BEGIN 
  
  
  label pre_stabilize21
  
  // Stabilising all instances of region Lock
  
  ___silicon_hack407_havoc_all_Lock()
  exhale acc(Lock_sk_fp(), write)
  inhale acc(Lock_sk_fp(), write)
  inhale (forperm $a: Ref, $lvl: Int, $x: Ref [Lock($a, $lvl, $x)] :: none < old[pre_stabilize21](perm(Lock($a, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(Lock_atomicity_context_fp($a, $lvl, $x)) ==> (Lock_state($a, $lvl, $x) in Lock_atomicity_context_hf($a, $lvl, $x))) && (Lock_state($a, $lvl, $x) == old[pre_stabilize21](Lock_state($a, $lvl, $x)) || (0 == old[pre_stabilize21](Lock_state($a, $lvl, $x)) && 1 == Lock_state($a, $lvl, $x) && true && true || 1 == old[pre_stabilize21](Lock_state($a, $lvl, $x)) && 0 == Lock_state($a, $lvl, $x) && true && true)))
  
  // Stabilising all instances of region CAPLock
  
  ___silicon_hack407_havoc_all_CAPLock()
  exhale acc(CAPLock_sk_fp(), write)
  inhale acc(CAPLock_sk_fp(), write)
  inhale (forperm $r: Ref, $alvl: Int, $a: Ref, $lvl: Int, $x: Ref [CAPLock($r, $alvl, $a, $lvl, $x)] :: none < old[pre_stabilize21](perm(CAPLock($r, $alvl, $a, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(CAPLock_atomicity_context_fp($r, $alvl, $a, $lvl, $x)) ==> (CAPLock_state($r, $alvl, $a, $lvl, $x) in CAPLock_atomicity_context_hf($r, $alvl, $a, $lvl, $x))) && (CAPLock_state($r, $alvl, $a, $lvl, $x) == old[pre_stabilize21](CAPLock_state($r, $alvl, $a, $lvl, $x)) || (0 == old[pre_stabilize21](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 1 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true || 1 == old[pre_stabilize21](CAPLock_state($r, $alvl, $a, $lvl, $x)) && 0 == CAPLock_state($r, $alvl, $a, $lvl, $x) && true && true)))
  
  // ------- Stabilising regions Lock,CAPLock (check stability of method condition) END 
  
  
  assert (false ? acc(CAPLock(r, alvl, a, lvl, x), write) && (alvl >= 0 && true) : true)
}