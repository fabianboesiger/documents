domain Map[U, V] {
  
  function Map_keys(m: Map[U, V]): Set[U]
  
  function Map_card(m: Map[U, V]): Int
  
  function Map_lookup(m: Map[U, V], u: U): V
  
  function Map_values(m: Map[U, V]): Set[V]
  
  function Map_empty(): Map[U, V]
  
  function Map_build(m: Map[U, V], u: U, v: V): Map[U, V]
  
  function Map_equal(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_disjoint(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_union(m1: Map[U, V], m2: Map[U, V]): Map[U, V]
  
  axiom Map_card_non_neg {
    (forall m: Map[U, V] :: { Map_card(m) } 0 <= Map_card(m))
  }
  
  axiom Map_card_domain {
    (forall m: Map[U, V] :: { |Map_keys(m)| } |Map_keys(m)| == Map_card(m))
  }
  
  axiom Map_values_def {
    (forall m: Map[U, V], v: V :: { (v in Map_values(m)) } (v in Map_values(m)) == (exists u: U :: (u in Map_keys(m)) && v == Map_lookup(m, u)))
  }
  
  axiom Map_empty_1 {
    (forall u: U :: { (u in Map_keys(Map_empty())) } !((u in Map_keys(Map_empty()))))
  }
  
  axiom Map_empty_2 {
    (forall m: Map[U, V] :: { Map_card(m) } (Map_card(m) == 0) == (m == Map_empty()) && (Map_card(m) != 0 ==> (exists u: U :: (u in Map_keys(m)))))
  }
  
  axiom Map_build_1 {
    (forall m: Map[U, V], u1: U, u2: U, v: V :: { (u2 in Map_keys(Map_build(m, u1, v))) } (u2 == u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) && Map_lookup(Map_build(m, u1, v), u1) == v) && (u2 != u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) == (u2 in Map_keys(m)) && Map_lookup(Map_build(m, u1, v), u2) == Map_lookup(m, u2)))
  }
  
  axiom Map_build_2 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } (u in Map_keys(m)) ==> Map_card(Map_build(m, u, v)) == Map_card(m))
  }
  
  axiom Map_build_3 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } !((u in Map_keys(m))) ==> Map_card(Map_build(m, u, v)) == Map_card(m) + 1)
  }
  
  axiom Map_equality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } (u in Map_keys(m1)) == (u in Map_keys(m2))))
  }
  
  axiom Map_extensionality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) ==> m1 == m2)
  }
  
  axiom Map_disjoint_def {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_disjoint(m1, m2) } Map_disjoint(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } !((u in Map_keys(m1))) || !((u in Map_keys(m2)))))
  }
  
  axiom Map_union_1 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { (u in Map_keys(Map_union(m1, m2))) } { (u in (Map_keys(m1) union Map_keys(m2))) } Map_disjoint(m1, m2) ==> (u in Map_keys(Map_union(m1, m2))) == (u in (Map_keys(m1) union Map_keys(m2))))
  }
  
  axiom Map_union_2 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m1)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m1, u))
  }
  
  axiom Map_union_3 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m2)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m2, u))
  }
}

domain trigger_functions {
  
  
}

domain interferenceReference_Domain {
  
  
}

domain interferenceSet_Domain {
  
  
}

domain atomicity_context_Domain {
  
  
}

field $diamond: Int

field $cell_int_$ival: Int

field $cell_cell_int_$cval: Ref

field $mem_pair_$bval: Bool

field $mem_pair_$mval: Ref

function IntSet(): Set[Int]
  ensures (forall n: Int :: (n in result))


function NatSet(): Set[Int]
  ensures (forall n: Int :: 0 <= n == (n in result))


method havoc_Bool() returns ($r: Bool)


method havoc_Ref() returns ($r: Ref)


method havoc_Int() returns ($r: Int)


method test01()
{
  var ci: Ref
  var $_levelVar_0: Int
  inhale $_levelVar_0 >= 0
  assert $_levelVar_0 >= 0
  inhale true
  
  // ------- Inferring interference context  (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer0
  
  // ------- Inferring interference context  (beginning of non atomic procedure) END 
  
  
  
  // ------- new:cell_int BEGIN ------
  
  
  ci := new($cell_int_$ival)
  ci.$cell_int_$ival := 123
  
  // ------- new:cell_int END --------
  
  
  
  // ------- Stabilising regions  (after new:cell_int@17.3) BEGIN 
  
  
  label pre_stabilize0
  
  // ------- Stabilising regions  (after new:cell_int@17.3) END 
  
  
  
  // ------- assert BEGIN ------------
  
  
  assert acc(ci.$cell_int_$ival, write) && ci.$cell_int_$ival == 123
  
  // ------- assert END --------------
  
  
  
  // ------- heap-write BEGIN --------
  
  
  ci.$cell_int_$ival := 0
  
  // ------- heap-write END ----------
  
  
  
  // ------- Stabilising regions  (after seq-comp@18.3) BEGIN 
  
  
  label pre_stabilize
  
  // ------- Stabilising regions  (after seq-comp@18.3) END 
  
  
}

method test02()
{
  var ci1: Ref
  var ci2: Ref
  var v: Int
  var $_levelVar_1: Int
  inhale $_levelVar_1 >= 0
  assert $_levelVar_1 >= 0
  inhale true
  
  // ------- Inferring interference context  (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer
  
  // ------- Inferring interference context  (beginning of non atomic procedure) END 
  
  
  
  // ------- new:cell_int BEGIN ------
  
  
  ci1 := new($cell_int_$ival)
  ci1.$cell_int_$ival := 0
  
  // ------- new:cell_int END --------
  
  
  
  // ------- Stabilising regions  (after new:cell_int@27.3) BEGIN 
  
  
  label pre_stabilize2
  
  // ------- Stabilising regions  (after new:cell_int@27.3) END 
  
  
  
  // ------- new:cell_int BEGIN ------
  
  
  ci2 := new($cell_int_$ival)
  ci2.$cell_int_$ival := 0
  
  // ------- new:cell_int END --------
  
  
  
  // ------- Stabilising regions  (after new:cell_int@28.3) BEGIN 
  
  
  label pre_stabilize3
  
  // ------- Stabilising regions  (after new:cell_int@28.3) END 
  
  
  
  // ------- assert BEGIN ------------
  
  
  assert !(ci1 == ci2) && (acc(ci1.$cell_int_$ival, write) && true) && (acc(ci2.$cell_int_$ival, write) && ci2.$cell_int_$ival == ci1.$cell_int_$ival) && ci1.$cell_int_$ival == 0
  v := ci1.$cell_int_$ival
  
  // ------- assert END --------------
  
  
  
  // ------- Stabilising regions  (after seq-comp@28.3) BEGIN 
  
  
  label pre_stabilize4
  
  // ------- Stabilising regions  (after seq-comp@28.3) END 
  
  
}

method test03()
{
  var ci: Ref
  var cci1: Ref
  var cci2: Ref
  var $_levelVar_2: Int
  inhale $_levelVar_2 >= 0
  assert $_levelVar_2 >= 0
  inhale true
  
  // ------- Inferring interference context  (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer2
  
  // ------- Inferring interference context  (beginning of non atomic procedure) END 
  
  
  
  // ------- new:cell_int BEGIN ------
  
  
  ci := new($cell_int_$ival)
  ci.$cell_int_$ival := 0 - 1
  
  // ------- new:cell_int END --------
  
  
  
  // ------- Stabilising regions  (after new:cell_int@38.3) BEGIN 
  
  
  label pre_stabilize5
  
  // ------- Stabilising regions  (after new:cell_int@38.3) END 
  
  
  
  // ------- new:cell_cell_int BEGIN -
  
  
  cci1 := new($cell_cell_int_$cval)
  cci1.$cell_cell_int_$cval := ci
  
  // ------- new:cell_cell_int END ---
  
  
  
  // ------- Stabilising regions  (after new:cell_cell_int@39.3) BEGIN 
  
  
  label pre_stabilize6
  
  // ------- Stabilising regions  (after new:cell_cell_int@39.3) END 
  
  
  
  // ------- new:cell_cell_int BEGIN -
  
  
  cci2 := new($cell_cell_int_$cval)
  cci2.$cell_cell_int_$cval := ci
  
  // ------- new:cell_cell_int END ---
  
  
  
  // ------- Stabilising regions  (after new:cell_cell_int@40.3) BEGIN 
  
  
  label pre_stabilize7
  
  // ------- Stabilising regions  (after new:cell_cell_int@40.3) END 
  
  
  
  // ------- assert BEGIN ------------
  
  
  assert acc(cci1.$cell_cell_int_$cval, write) && cci1.$cell_cell_int_$cval == ci && (acc(cci2.$cell_cell_int_$cval, write) && cci2.$cell_cell_int_$cval == ci)
  
  // ------- assert END --------------
  
  
  
  // ------- exhale BEGIN ------------
  
  
  exhale acc(cci2.$cell_cell_int_$cval, write) && true
  
  // ------- exhale END --------------
  
  
  
  // ------- heap-write BEGIN --------
  
  
  cci1.$cell_cell_int_$cval := null
  
  // ------- heap-write END ----------
  
  
  
  // ------- Stabilising regions  (after heap-write@44.3) BEGIN 
  
  
  label pre_stabilize8
  
  // ------- Stabilising regions  (after heap-write@44.3) END 
  
  
  
  // ------- heap-write BEGIN --------
  
  
  cci2.$cell_cell_int_$cval := null
  
  // ------- heap-write END ----------
  
  
  
  // ------- Stabilising regions  (after heap-write@47.3) BEGIN 
  
  
  label pre_stabilize9
  
  // ------- Stabilising regions  (after heap-write@47.3) END 
  
  
}

method test04()
{
  var mp1: Ref
  var mp2: Ref
  var mp3: Ref
  var mv: Ref
  var bv: Bool
  var $_levelVar_3: Int
  inhale $_levelVar_3 >= 0
  assert $_levelVar_3 >= 0
  inhale true
  
  // ------- Inferring interference context  (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer3
  
  // ------- Inferring interference context  (beginning of non atomic procedure) END 
  
  
  
  // ------- new:mem_pair BEGIN ------
  
  
  mp1 := new($mem_pair_$bval, $mem_pair_$mval)
  
  // ------- new:mem_pair END --------
  
  
  
  // ------- Stabilising regions  (after new:mem_pair@55.3) BEGIN 
  
  
  label pre_stabilize10
  
  // ------- Stabilising regions  (after new:mem_pair@55.3) END 
  
  
  
  // ------- new:mem_pair BEGIN ------
  
  
  mp2 := new($mem_pair_$bval, $mem_pair_$mval)
  mp2.$mem_pair_$bval := true
  
  // ------- new:mem_pair END --------
  
  
  
  // ------- Stabilising regions  (after new:mem_pair@56.3) BEGIN 
  
  
  label pre_stabilize11
  
  // ------- Stabilising regions  (after new:mem_pair@56.3) END 
  
  
  
  // ------- new:mem_pair BEGIN ------
  
  
  mp3 := new($mem_pair_$bval, $mem_pair_$mval)
  mp3.$mem_pair_$bval := false
  mp3.$mem_pair_$mval := null
  
  // ------- new:mem_pair END --------
  
  
  
  // ------- Stabilising regions  (after new:mem_pair@57.3) BEGIN 
  
  
  label pre_stabilize12
  
  // ------- Stabilising regions  (after new:mem_pair@57.3) END 
  
  
  
  // ------- assert BEGIN ------------
  
  
  assert acc(mp3.$mem_pair_$bval, write) && mp3.$mem_pair_$bval == false && (acc(mp3.$mem_pair_$mval, write) && mp3.$mem_pair_$mval == null)
  
  // ------- assert END --------------
  
  
  
  // ------- assert BEGIN ------------
  
  
  assert acc(mp2.$mem_pair_$bval, write) && mp2.$mem_pair_$bval == true
  
  // ------- assert END --------------
  
  
  
  // ------- assert BEGIN ------------
  
  
  assert acc(mp2.$mem_pair_$mval, write) && true && (acc(mp1.$mem_pair_$bval, write) && true) && (mp2.$mem_pair_$mval == null || mp1.$mem_pair_$bval == false)
  mv := mp2.$mem_pair_$mval
  bv := mp1.$mem_pair_$bval
  
  // ------- assert END --------------
  
  
  
  // ------- Stabilising regions  (after seq-comp@57.3) BEGIN 
  
  
  label pre_stabilize13
  
  // ------- Stabilising regions  (after seq-comp@57.3) END 
  
  
}

method $_test01_condition_stability_precondition_check()
{
  var $_levelVar_4: Int
  var ci: Ref
  inhale $_levelVar_4 >= 0
  inhale true
  
  // ------- Inferring interference context  (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer4
  
  // ------- Inferring interference context  (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions  (check stability of method condition) BEGIN 
  
  
  label pre_stabilize14
  
  // ------- Stabilising regions  (check stability of method condition) END 
  
  
  assert true
}

method $_test02_condition_stability_precondition_check()
{
  var $_levelVar_5: Int
  var ci1: Ref
  var ci2: Ref
  inhale $_levelVar_5 >= 0
  inhale true
  
  // ------- Inferring interference context  (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer5
  
  // ------- Inferring interference context  (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions  (check stability of method condition) BEGIN 
  
  
  label pre_stabilize15
  
  // ------- Stabilising regions  (check stability of method condition) END 
  
  
  assert true
}

method $_test03_condition_stability_precondition_check()
{
  var $_levelVar_6: Int
  var ci: Ref
  var cci1: Ref
  var cci2: Ref
  inhale $_levelVar_6 >= 0
  inhale true
  
  // ------- Inferring interference context  (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer6
  
  // ------- Inferring interference context  (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions  (check stability of method condition) BEGIN 
  
  
  label pre_stabilize16
  
  // ------- Stabilising regions  (check stability of method condition) END 
  
  
  assert true
}

method $_test04_condition_stability_precondition_check()
{
  var $_levelVar_7: Int
  var mp1: Ref
  var mp2: Ref
  var mp3: Ref
  inhale $_levelVar_7 >= 0
  inhale true
  
  // ------- Inferring interference context  (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer7
  
  // ------- Inferring interference context  (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions  (check stability of method condition) BEGIN 
  
  
  label pre_stabilize17
  
  // ------- Stabilising regions  (check stability of method condition) END 
  
  
  assert true
}