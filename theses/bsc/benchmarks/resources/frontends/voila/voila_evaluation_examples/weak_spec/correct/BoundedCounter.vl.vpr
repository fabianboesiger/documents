domain Map[U, V] {
  
  function Map_keys(m: Map[U, V]): Set[U]
  
  function Map_card(m: Map[U, V]): Int
  
  function Map_lookup(m: Map[U, V], u: U): V
  
  function Map_values(m: Map[U, V]): Set[V]
  
  function Map_empty(): Map[U, V]
  
  function Map_build(m: Map[U, V], u: U, v: V): Map[U, V]
  
  function Map_equal(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_disjoint(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_union(m1: Map[U, V], m2: Map[U, V]): Map[U, V]
  
  axiom Map_card_non_neg {
    (forall m: Map[U, V] :: { Map_card(m) } 0 <= Map_card(m))
  }
  
  axiom Map_card_domain {
    (forall m: Map[U, V] :: { |Map_keys(m)| } |Map_keys(m)| == Map_card(m))
  }
  
  axiom Map_values_def {
    (forall m: Map[U, V], v: V :: { (v in Map_values(m)) } (v in Map_values(m)) == (exists u: U :: (u in Map_keys(m)) && v == Map_lookup(m, u)))
  }
  
  axiom Map_empty_1 {
    (forall u: U :: { (u in Map_keys(Map_empty())) } !((u in Map_keys(Map_empty()))))
  }
  
  axiom Map_empty_2 {
    (forall m: Map[U, V] :: { Map_card(m) } (Map_card(m) == 0) == (m == Map_empty()) && (Map_card(m) != 0 ==> (exists u: U :: (u in Map_keys(m)))))
  }
  
  axiom Map_build_1 {
    (forall m: Map[U, V], u1: U, u2: U, v: V :: { (u2 in Map_keys(Map_build(m, u1, v))) } (u2 == u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) && Map_lookup(Map_build(m, u1, v), u1) == v) && (u2 != u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) == (u2 in Map_keys(m)) && Map_lookup(Map_build(m, u1, v), u2) == Map_lookup(m, u2)))
  }
  
  axiom Map_build_2 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } (u in Map_keys(m)) ==> Map_card(Map_build(m, u, v)) == Map_card(m))
  }
  
  axiom Map_build_3 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } !((u in Map_keys(m))) ==> Map_card(Map_build(m, u, v)) == Map_card(m) + 1)
  }
  
  axiom Map_equality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } (u in Map_keys(m1)) == (u in Map_keys(m2))))
  }
  
  axiom Map_extensionality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) ==> m1 == m2)
  }
  
  axiom Map_disjoint_def {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_disjoint(m1, m2) } Map_disjoint(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } !((u in Map_keys(m1))) || !((u in Map_keys(m2)))))
  }
  
  axiom Map_union_1 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { (u in Map_keys(Map_union(m1, m2))) } { (u in (Map_keys(m1) union Map_keys(m2))) } Map_disjoint(m1, m2) ==> (u in Map_keys(Map_union(m1, m2))) == (u in (Map_keys(m1) union Map_keys(m2))))
  }
  
  axiom Map_union_2 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m1)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m1, u))
  }
  
  axiom Map_union_3 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m2)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m2, u))
  }
}

domain trigger_functions {
  
  function BCounter_state_T(r: Ref, lvl: Int, x: Ref): Bool
}

domain interferenceReference_Domain {
  
  function BCounter_interferenceReference_df($p0: Int, r: Ref, lvl: Int, x: Ref): Bool
}

domain interferenceSet_Domain {
  
  function BCounter_interferenceSet_df($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
}

domain atomicity_context_Domain {
  
  function BCounter_atomicity_context_df(r: Ref, lvl: Int, x: Ref): Bool
}

field $diamond: Int

field $stepFrom_int: Int

field $stepTo_int: Int

field $memcell_$f: Int

function IntSet(): Set[Int]
  ensures (forall n: Int :: (n in result))


function NatSet(): Set[Int]
  ensures (forall n: Int :: 0 <= n == (n in result))


function BCounter_atomicity_context_hf(r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(BCounter_atomicity_context_fp(r, lvl, x), write)
  ensures [BCounter_atomicity_context_df(r, lvl, x), true]


function BCounter_interferenceSet_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(BCounter_interferenceContext_fp(r, lvl, x), write)
  ensures [(forall $_m: Int :: { ($_m in result) } ($_m in result) ==> ($_m in BCounter_interferenceSet_df($p0, r, lvl, x))), true]


function BCounter_interferenceReference_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Int
  requires acc(BCounter_interferenceContext_fp(r, lvl, x), write)
  ensures [BCounter_interferenceReference_df($p0, r, lvl, x), true]


function BCounter_sk_$_action_n(r: Ref, lvl: Int, x: Ref): Int
  requires acc(BCounter_sk_fp(), write)


function BCounter_sk_$_action_m(r: Ref, lvl: Int, x: Ref): Int
  requires acc(BCounter_sk_fp(), write)


function BCounter_state(r: Ref, lvl: Int, x: Ref): Int
  requires acc(BCounter(r, lvl, x), write)
  ensures [BCounter_state_T(r, lvl, x), true]
{
  (unfolding acc(BCounter(r, lvl, x), write) in x.$memcell_$f)
}

predicate BCounter_INCREMENT($r: Ref) 

predicate BCounter_atomicity_context_fp(r: Ref, lvl: Int, x: Ref) 

predicate BCounter_interferenceContext_fp(r: Ref, lvl: Int, x: Ref) 

predicate BCounter_sk_fp() 

predicate BCounter(r: Ref, lvl: Int, x: Ref) {
  acc(x.$memcell_$f, write) && true && (x.$memcell_$f == 0 || x.$memcell_$f == 1 || x.$memcell_$f == 2)
}

method havoc_Bool() returns ($r: Bool)


method havoc_Ref() returns ($r: Ref)


method havoc_Int() returns ($r: Int)


method havoc_Perm() returns ($r: Perm)


method ___silicon_hack407_havoc_all_BCounter()


method ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()


method makeBCounter(r: Ref, lvl: Int) returns (ret: Ref)
  requires lvl >= 0
  ensures acc(BCounter(r, lvl, ret), write) && (lvl >= 0 && true) && acc(BCounter_INCREMENT(r), write)
{
  var v: Ref
  var w: Int
  var $_levelVar_0: Int
  inhale $_levelVar_0 >= 0
  assert $_levelVar_0 >= 0
  inhale acc(BCounter_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(BCounter_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context BCounter (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer0
  
  // Inferring interference all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(1, $r, $lvl, $x)) } none < old[pre_infer0](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(1, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer0](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_infer0](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_infer0](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(1, $r, $lvl, $x) == old[pre_infer0](BCounter_state($r, $lvl, $x)))
  
  // ------- Inferring interference context BCounter (beginning of non atomic procedure) END 
  
  
  
  // ------- inhale BEGIN ------------
  
  
  inhale acc(v.$memcell_$f, write) && true
  w := v.$memcell_$f
  
  // ------- inhale END --------------
  
  
  
  // ------- heap-write BEGIN --------
  
  
  v.$memcell_$f := 0
  
  // ------- heap-write END ----------
  
  
  
  // ------- Stabilising regions BCounter (after heap-write@18.3) BEGIN 
  
  
  label pre_stabilize0
  
  // Stabilising all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(2, $r, $lvl, $x)) } none < old[pre_stabilize0](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(2, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize0](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize0](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
  ___silicon_hack407_havoc_all_BCounter()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize0](perm(BCounter($r, $lvl, $x))) ==> (BCounter_state($r, $lvl, $x) in BCounter_interferenceSet_hf(2, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize0](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(2, $r, $lvl, $x) == old[pre_stabilize0](BCounter_state($r, $lvl, $x)))
  
  // ------- Stabilising regions BCounter (after heap-write@18.3) END 
  
  
  
  // ------- assign BEGIN ------------
  
  
  ret := v
  
  // ------- assign END --------------
  
  
  
  // ------- Stabilising regions BCounter (after assign@20.3) BEGIN 
  
  
  label pre_stabilize
  
  // Stabilising all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(3, $r, $lvl, $x)) } none < old[pre_stabilize](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(3, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
  ___silicon_hack407_havoc_all_BCounter()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize](perm(BCounter($r, $lvl, $x))) ==> (BCounter_state($r, $lvl, $x) in BCounter_interferenceSet_hf(3, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(3, $r, $lvl, $x) == old[pre_stabilize](BCounter_state($r, $lvl, $x)))
  
  // ------- Stabilising regions BCounter (after assign@20.3) END 
  
  
  
  // ------- inhale BEGIN ------------
  
  
  inhale acc(BCounter_INCREMENT(r), write)
  
  // ------- inhale END --------------
  
  
  
  // ------- fold BEGIN --------------
  
  
  fold acc(BCounter(r, lvl, ret), write)
  assert lvl >= 0 && BCounter_state(r, lvl, ret) == 0
  
  // ------- fold END ----------------
  
  
  
  // ------- Stabilising regions BCounter (after seq-comp@20.3) BEGIN 
  
  
  label pre_stabilize2
  
  // Stabilising all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(4, $r, $lvl, $x)) } none < old[pre_stabilize2](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(4, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize2](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize2](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
  ___silicon_hack407_havoc_all_BCounter()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize2](perm(BCounter($r, $lvl, $x))) ==> (BCounter_state($r, $lvl, $x) in BCounter_interferenceSet_hf(4, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize2](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(4, $r, $lvl, $x) == old[pre_stabilize2](BCounter_state($r, $lvl, $x)))
  
  // ------- Stabilising regions BCounter (after seq-comp@20.3) END 
  
  
}

method incr(r: Ref, lvl: Int, x: Ref, p: Perm) returns (ret: Int)
  requires acc(BCounter(r, lvl, x), write) && (lvl >= 0 && true) && acc(BCounter_INCREMENT(r), p) && p >= 1 / 4
  ensures acc(BCounter(r, lvl, x), write) && (lvl >= 0 && true) && acc(BCounter_INCREMENT(r), p)
  ensures (p == write ? ret == old(BCounter_state(r, lvl, x)) && (old(BCounter_state(r, lvl, x)) < 2 ? BCounter_state(r, lvl, x) == old(BCounter_state(r, lvl, x)) + 1 : BCounter_state(r, lvl, x) == 0) : true)
{
  var v: Int
  var w: Int
  var b: Bool
  var $_levelVar_1: Int
  var $_levelVar_2: Int
  var $_levelVar_3: Int
  var $_levelVar_4: Int
  var $_levelVar_5: Int
  var $_levelVar_6: Int
  var $_levelVar_7: Int
  var $_levelVar_8: Int
  var $_levelVar_9: Int
  var $_levelVar_10: Int
  var $_levelVar_11: Int
  var $_levelVar_12: Int
  var $_levelVar_13: Int
  var $_levelVar_14: Int
  inhale $_levelVar_1 >= 0 && $_levelVar_1 > lvl
  assert $_levelVar_1 >= 0
  inhale acc(BCounter_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(BCounter_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context BCounter (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer
  
  // Inferring interference all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(5, $r, $lvl, $x)) } none < old[pre_infer](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(5, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_infer](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_infer](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(5, $r, $lvl, $x) == old[pre_infer](BCounter_state($r, $lvl, $x)))
  
  // ------- Inferring interference context BCounter (beginning of non atomic procedure) END 
  
  
  
  // ------- open-region BEGIN -------
  
  
  label pre_open_region0
  assert $_levelVar_1 > lvl
  $_levelVar_2 := lvl
  unfold acc(BCounter(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- heap-read BEGIN ---------
  
  
  v := x.$memcell_$f
  
  // ------- heap-read END -----------
  
  
  fold acc(BCounter(r, lvl, x), write)
  assert BCounter_state(r, lvl, x) == old[pre_open_region0](BCounter_state(r, lvl, x))
  $_levelVar_3 := $_levelVar_1
  
  // ------- open-region END ---------
  
  
  
  // ------- Stabilising regions BCounter (after open-region@40.5) BEGIN 
  
  
  label pre_stabilize3
  
  // Stabilising all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(6, $r, $lvl, $x)) } none < old[pre_stabilize3](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(6, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize3](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize3](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
  ___silicon_hack407_havoc_all_BCounter()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize3](perm(BCounter($r, $lvl, $x))) ==> (BCounter_state($r, $lvl, $x) in BCounter_interferenceSet_hf(6, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize3](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(6, $r, $lvl, $x) == old[pre_stabilize3](BCounter_state($r, $lvl, $x)))
  
  // ------- Stabilising regions BCounter (after open-region@40.5) END 
  
  
  
  // ------- if-then-else BEGIN ------
  
  
  if (v < 2) {
    
    // ------- assign BEGIN ------------
    
    
    w := v + 1
    
    // ------- assign END --------------
    
    
    
    // ------- Stabilising regions BCounter (after assign@45.7) BEGIN 
    
    
    label pre_stabilize4
    
    // Stabilising all instances of region BCounter
    
    ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
    exhale acc(BCounter_sk_fp(), write)
    inhale acc(BCounter_sk_fp(), write)
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(7, $r, $lvl, $x)) } none < old[pre_stabilize4](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(7, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize4](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize4](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
    ___silicon_hack407_havoc_all_BCounter()
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize4](perm(BCounter($r, $lvl, $x))) ==> (BCounter_state($r, $lvl, $x) in BCounter_interferenceSet_hf(7, $r, $lvl, $x)))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize4](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(7, $r, $lvl, $x) == old[pre_stabilize4](BCounter_state($r, $lvl, $x)))
    
    // ------- Stabilising regions BCounter (after assign@45.7) END 
    
    
    assert $_levelVar_3 == $_levelVar_3
  } else {
    $_levelVar_4 := $_levelVar_3
    
    // ------- assign BEGIN ------------
    
    
    w := 0
    
    // ------- assign END --------------
    
    
    
    // ------- Stabilising regions BCounter (after assign@47.7) BEGIN 
    
    
    label pre_stabilize5
    
    // Stabilising all instances of region BCounter
    
    ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
    exhale acc(BCounter_sk_fp(), write)
    inhale acc(BCounter_sk_fp(), write)
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(8, $r, $lvl, $x)) } none < old[pre_stabilize5](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(8, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize5](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize5](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
    ___silicon_hack407_havoc_all_BCounter()
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize5](perm(BCounter($r, $lvl, $x))) ==> (BCounter_state($r, $lvl, $x) in BCounter_interferenceSet_hf(8, $r, $lvl, $x)))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize5](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(8, $r, $lvl, $x) == old[pre_stabilize5](BCounter_state($r, $lvl, $x)))
    
    // ------- Stabilising regions BCounter (after assign@47.7) END 
    
    
    assert $_levelVar_4 == $_levelVar_3
  }
  $_levelVar_5 := $_levelVar_3
  
  // ------- if-then-else END --------
  
  
  
  // ------- use-atomic BEGIN --------
  
  
  label pre_use_atomic0
  assert perm(BCounter_atomicity_context_fp(r, lvl, x)) == none
  assert $_levelVar_5 > lvl
  $_levelVar_6 := lvl
  exhale acc(BCounter_INCREMENT(r), 1 / 4)
  
  // ------- Stabilising regions  (before use-atomic@50.5) BEGIN 
  
  
  label pre_stabilize7
  
  // ------- Stabilising regions  (before use-atomic@50.5) END 
  
  
  unfold acc(BCounter(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- Stabilising regions BCounter (before use-atomic@50.5) BEGIN 
  
  
  label pre_stabilize8
  
  // Stabilising all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize8](perm(BCounter($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> (BCounter_state($r, $lvl, $x) in BCounter_atomicity_context_hf($r, $lvl, $x))) && (BCounter_state($r, $lvl, $x) == old[pre_stabilize8](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize8](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == BCounter_state($r, $lvl, $x) && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))
  
  // ------- Stabilising regions BCounter (before use-atomic@50.5) END 
  
  
  inhale acc(BCounter_INCREMENT(r), 1 / 4)
  
  // ------- call:CAS BEGIN ----------
  
  
  assert true
  label pre_call0
  assert $_levelVar_6 >= 0
  assert true
  exhale acc(x.$memcell_$f, write) && true
  
  // ------- Stabilising regions BCounter (before call:CAS@51.7) BEGIN 
  
  
  label pre_stabilize6
  
  // Stabilising all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize6](perm(BCounter($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> (BCounter_state($r, $lvl, $x) in BCounter_atomicity_context_hf($r, $lvl, $x))) && (BCounter_state($r, $lvl, $x) == old[pre_stabilize6](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize6](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == BCounter_state($r, $lvl, $x) && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))
  
  // ------- Stabilising regions BCounter (before call:CAS@51.7) END 
  
  
  b := havoc_Bool()
  inhale (old[pre_call0](x.$memcell_$f) == v ? b && (acc(x.$memcell_$f, write) && x.$memcell_$f == w) : !b && (acc(x.$memcell_$f, write) && x.$memcell_$f == old[pre_call0](x.$memcell_$f)))
  
  // ------- call:CAS END ------------
  
  
  fold acc(BCounter(r, lvl, x), write)
  assert old[pre_use_atomic0](BCounter_state(r, lvl, x)) == BCounter_state(r, lvl, x) || 1 / 4 <= 1 / 4
  $_levelVar_7 := $_levelVar_5
  
  // ------- use-atomic END ----------
  
  
  
  // ------- assert BEGIN ------------
  
  
  assert (p == write ? v == old(BCounter_state(r, lvl, x)) : true)
  
  // ------- assert END --------------
  
  
  
  // ------- Stabilising regions BCounter (after seq-comp@50.5) BEGIN 
  
  
  label pre_stabilize9
  
  // Stabilising all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(9, $r, $lvl, $x)) } none < old[pre_stabilize9](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(9, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize9](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize9](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
  ___silicon_hack407_havoc_all_BCounter()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize9](perm(BCounter($r, $lvl, $x))) ==> (BCounter_state($r, $lvl, $x) in BCounter_interferenceSet_hf(9, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize9](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(9, $r, $lvl, $x) == old[pre_stabilize9](BCounter_state($r, $lvl, $x)))
  
  // ------- Stabilising regions BCounter (after seq-comp@50.5) END 
  
  
  
  // ------- while BEGIN -------------
  
  
  label preWhile0
  while (!b)
    invariant acc(BCounter(r, lvl, x), write) && (lvl >= 0 && true) && acc(BCounter_INCREMENT(r), p) && p >= 1 / 4
    invariant (p == write ? b && v == old(BCounter_state(r, lvl, x)) && (old(BCounter_state(r, lvl, x)) < 2 ? BCounter_state(r, lvl, x) == old(BCounter_state(r, lvl, x)) + 1 : BCounter_state(r, lvl, x) == 0) : true) 
  {
    inhale acc(BCounter_sk_fp(), write)
    
    // no init required
    
    
    inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(BCounter_interferenceContext_fp($r, $lvl, $x), write))
    inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(BCounter_atomicity_context_fp($r, $lvl, $x), old[preWhile0](perm(BCounter_atomicity_context_fp($r, $lvl, $x)))))
    inhale (forall $r: Ref, $lvl: Int, $x: Ref :: { BCounter_atomicity_context_df($r, $lvl, $x) } none < old[preWhile0](perm(BCounter_atomicity_context_fp($r, $lvl, $x))) ==> BCounter_atomicity_context_hf($r, $lvl, $x) == old[preWhile0](BCounter_atomicity_context_hf($r, $lvl, $x)))
    
    // ------- Inferring interference context BCounter (infer context inside while) BEGIN 
    
    
    label pre_infer2
    
    // Inferring interference all instances of region BCounter
    
    ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
    exhale acc(BCounter_sk_fp(), write)
    inhale acc(BCounter_sk_fp(), write)
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(10, $r, $lvl, $x)) } none < old[pre_infer2](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(10, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer2](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_infer2](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_infer2](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(10, $r, $lvl, $x) == old[pre_infer2](BCounter_state($r, $lvl, $x)))
    
    // ------- Inferring interference context BCounter (infer context inside while) END 
    
    
    
    // ------- open-region BEGIN -------
    
    
    label pre_open_region
    assert $_levelVar_7 > lvl
    $_levelVar_8 := lvl
    unfold acc(BCounter(r, lvl, x), write)
    
    // no interference context translation needed
    
    
    
    // ------- heap-read BEGIN ---------
    
    
    v := x.$memcell_$f
    
    // ------- heap-read END -----------
    
    
    fold acc(BCounter(r, lvl, x), write)
    assert BCounter_state(r, lvl, x) == old[pre_open_region](BCounter_state(r, lvl, x))
    $_levelVar_9 := $_levelVar_7
    
    // ------- open-region END ---------
    
    
    
    // ------- Stabilising regions BCounter (after open-region@40.5) BEGIN 
    
    
    label pre_stabilize10
    
    // Stabilising all instances of region BCounter
    
    ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
    exhale acc(BCounter_sk_fp(), write)
    inhale acc(BCounter_sk_fp(), write)
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(11, $r, $lvl, $x)) } none < old[pre_stabilize10](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(11, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize10](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize10](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
    ___silicon_hack407_havoc_all_BCounter()
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize10](perm(BCounter($r, $lvl, $x))) ==> (BCounter_state($r, $lvl, $x) in BCounter_interferenceSet_hf(11, $r, $lvl, $x)))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize10](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(11, $r, $lvl, $x) == old[pre_stabilize10](BCounter_state($r, $lvl, $x)))
    
    // ------- Stabilising regions BCounter (after open-region@40.5) END 
    
    
    
    // ------- if-then-else BEGIN ------
    
    
    if (v < 2) {
      
      // ------- assign BEGIN ------------
      
      
      w := v + 1
      
      // ------- assign END --------------
      
      
      
      // ------- Stabilising regions BCounter (after assign@45.7) BEGIN 
      
      
      label pre_stabilize11
      
      // Stabilising all instances of region BCounter
      
      ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
      exhale acc(BCounter_sk_fp(), write)
      inhale acc(BCounter_sk_fp(), write)
      inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(12, $r, $lvl, $x)) } none < old[pre_stabilize11](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(12, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize11](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize11](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
      ___silicon_hack407_havoc_all_BCounter()
      inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize11](perm(BCounter($r, $lvl, $x))) ==> (BCounter_state($r, $lvl, $x) in BCounter_interferenceSet_hf(12, $r, $lvl, $x)))
      
      // havoc performed by other front resource
      
      
      inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize11](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(12, $r, $lvl, $x) == old[pre_stabilize11](BCounter_state($r, $lvl, $x)))
      
      // ------- Stabilising regions BCounter (after assign@45.7) END 
      
      
      assert $_levelVar_9 == $_levelVar_9
    } else {
      $_levelVar_10 := $_levelVar_9
      
      // ------- assign BEGIN ------------
      
      
      w := 0
      
      // ------- assign END --------------
      
      
      
      // ------- Stabilising regions BCounter (after assign@47.7) BEGIN 
      
      
      label pre_stabilize12
      
      // Stabilising all instances of region BCounter
      
      ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
      exhale acc(BCounter_sk_fp(), write)
      inhale acc(BCounter_sk_fp(), write)
      inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(13, $r, $lvl, $x)) } none < old[pre_stabilize12](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(13, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize12](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize12](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
      ___silicon_hack407_havoc_all_BCounter()
      inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize12](perm(BCounter($r, $lvl, $x))) ==> (BCounter_state($r, $lvl, $x) in BCounter_interferenceSet_hf(13, $r, $lvl, $x)))
      
      // havoc performed by other front resource
      
      
      inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize12](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(13, $r, $lvl, $x) == old[pre_stabilize12](BCounter_state($r, $lvl, $x)))
      
      // ------- Stabilising regions BCounter (after assign@47.7) END 
      
      
      assert $_levelVar_10 == $_levelVar_9
    }
    $_levelVar_11 := $_levelVar_9
    
    // ------- if-then-else END --------
    
    
    
    // ------- use-atomic BEGIN --------
    
    
    label pre_use_atomic
    assert perm(BCounter_atomicity_context_fp(r, lvl, x)) == none
    assert $_levelVar_11 > lvl
    $_levelVar_12 := lvl
    exhale acc(BCounter_INCREMENT(r), 1 / 4)
    
    // ------- Stabilising regions  (before use-atomic@50.5) BEGIN 
    
    
    label pre_stabilize14
    
    // ------- Stabilising regions  (before use-atomic@50.5) END 
    
    
    unfold acc(BCounter(r, lvl, x), write)
    
    // no interference context translation needed
    
    
    
    // ------- Stabilising regions BCounter (before use-atomic@50.5) BEGIN 
    
    
    label pre_stabilize15
    
    // Stabilising all instances of region BCounter
    
    ___silicon_hack407_havoc_all_BCounter()
    exhale acc(BCounter_sk_fp(), write)
    inhale acc(BCounter_sk_fp(), write)
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize15](perm(BCounter($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> (BCounter_state($r, $lvl, $x) in BCounter_atomicity_context_hf($r, $lvl, $x))) && (BCounter_state($r, $lvl, $x) == old[pre_stabilize15](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize15](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == BCounter_state($r, $lvl, $x) && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))
    
    // ------- Stabilising regions BCounter (before use-atomic@50.5) END 
    
    
    inhale acc(BCounter_INCREMENT(r), 1 / 4)
    
    // ------- call:CAS BEGIN ----------
    
    
    assert true
    label pre_call
    assert $_levelVar_12 >= 0
    assert true
    exhale acc(x.$memcell_$f, write) && true
    
    // ------- Stabilising regions BCounter (before call:CAS@51.7) BEGIN 
    
    
    label pre_stabilize13
    
    // Stabilising all instances of region BCounter
    
    ___silicon_hack407_havoc_all_BCounter()
    exhale acc(BCounter_sk_fp(), write)
    inhale acc(BCounter_sk_fp(), write)
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize13](perm(BCounter($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> (BCounter_state($r, $lvl, $x) in BCounter_atomicity_context_hf($r, $lvl, $x))) && (BCounter_state($r, $lvl, $x) == old[pre_stabilize13](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize13](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == BCounter_state($r, $lvl, $x) && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))
    
    // ------- Stabilising regions BCounter (before call:CAS@51.7) END 
    
    
    b := havoc_Bool()
    inhale (old[pre_call](x.$memcell_$f) == v ? b && (acc(x.$memcell_$f, write) && x.$memcell_$f == w) : !b && (acc(x.$memcell_$f, write) && x.$memcell_$f == old[pre_call](x.$memcell_$f)))
    
    // ------- call:CAS END ------------
    
    
    fold acc(BCounter(r, lvl, x), write)
    assert old[pre_use_atomic](BCounter_state(r, lvl, x)) == BCounter_state(r, lvl, x) || 1 / 4 <= 1 / 4
    $_levelVar_13 := $_levelVar_11
    
    // ------- use-atomic END ----------
    
    
    
    // ------- assert BEGIN ------------
    
    
    assert (p == write ? v == old(BCounter_state(r, lvl, x)) : true)
    
    // ------- assert END --------------
    
    
    
    // ------- Stabilising regions BCounter (after seq-comp@50.5) BEGIN 
    
    
    label pre_stabilize16
    
    // Stabilising all instances of region BCounter
    
    ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
    exhale acc(BCounter_sk_fp(), write)
    inhale acc(BCounter_sk_fp(), write)
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(14, $r, $lvl, $x)) } none < old[pre_stabilize16](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(14, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize16](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize16](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
    ___silicon_hack407_havoc_all_BCounter()
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize16](perm(BCounter($r, $lvl, $x))) ==> (BCounter_state($r, $lvl, $x) in BCounter_interferenceSet_hf(14, $r, $lvl, $x)))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize16](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(14, $r, $lvl, $x) == old[pre_stabilize16](BCounter_state($r, $lvl, $x)))
    
    // ------- Stabilising regions BCounter (after seq-comp@50.5) END 
    
    
    assert $_levelVar_13 == $_levelVar_7
  }
  $_levelVar_14 := $_levelVar_7
  
  // ------- while END ---------------
  
  
  
  // ------- Stabilising regions BCounter (after while@36.3) BEGIN 
  
  
  label pre_stabilize17
  
  // Stabilising all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(15, $r, $lvl, $x)) } none < old[pre_stabilize17](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(15, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize17](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize17](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
  ___silicon_hack407_havoc_all_BCounter()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize17](perm(BCounter($r, $lvl, $x))) ==> (BCounter_state($r, $lvl, $x) in BCounter_interferenceSet_hf(15, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize17](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(15, $r, $lvl, $x) == old[pre_stabilize17](BCounter_state($r, $lvl, $x)))
  
  // ------- Stabilising regions BCounter (after while@36.3) END 
  
  
  
  // ------- assign BEGIN ------------
  
  
  ret := v
  
  // ------- assign END --------------
  
  
  
  // ------- Stabilising regions BCounter (after assign@57.3) BEGIN 
  
  
  label pre_stabilize18
  
  // Stabilising all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(16, $r, $lvl, $x)) } none < old[pre_stabilize18](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(16, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize18](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize18](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
  ___silicon_hack407_havoc_all_BCounter()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize18](perm(BCounter($r, $lvl, $x))) ==> (BCounter_state($r, $lvl, $x) in BCounter_interferenceSet_hf(16, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize18](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(16, $r, $lvl, $x) == old[pre_stabilize18](BCounter_state($r, $lvl, $x)))
  
  // ------- Stabilising regions BCounter (after assign@57.3) END 
  
  
}

method read(r: Ref, lvl: Int, x: Ref, p: Perm) returns (ret: Int)
  requires acc(BCounter(r, lvl, x), write) && (lvl >= 0 && true) && acc(BCounter_INCREMENT(r), p)
  ensures acc(BCounter(r, lvl, x), write) && (lvl >= 0 && true) && acc(BCounter_INCREMENT(r), p)
  ensures (p == write ? ret == old(BCounter_state(r, lvl, x)) && old(BCounter_state(r, lvl, x)) == BCounter_state(r, lvl, x) : true)
{
  var $_levelVar_15: Int
  var $_levelVar_16: Int
  var $_levelVar_17: Int
  inhale $_levelVar_15 >= 0 && $_levelVar_15 > lvl
  assert $_levelVar_15 >= 0
  inhale acc(BCounter_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(BCounter_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context BCounter (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer3
  
  // Inferring interference all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(17, $r, $lvl, $x)) } none < old[pre_infer3](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(17, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer3](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_infer3](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_infer3](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(17, $r, $lvl, $x) == old[pre_infer3](BCounter_state($r, $lvl, $x)))
  
  // ------- Inferring interference context BCounter (beginning of non atomic procedure) END 
  
  
  
  // ------- open-region BEGIN -------
  
  
  label pre_open_region2
  assert $_levelVar_15 > lvl
  $_levelVar_16 := lvl
  unfold acc(BCounter(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- heap-read BEGIN ---------
  
  
  ret := x.$memcell_$f
  
  // ------- heap-read END -----------
  
  
  fold acc(BCounter(r, lvl, x), write)
  assert BCounter_state(r, lvl, x) == old[pre_open_region2](BCounter_state(r, lvl, x))
  $_levelVar_17 := $_levelVar_15
  
  // ------- open-region END ---------
  
  
  
  // ------- Stabilising regions BCounter (after open-region@65.3) BEGIN 
  
  
  label pre_stabilize19
  
  // Stabilising all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(18, $r, $lvl, $x)) } none < old[pre_stabilize19](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(18, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize19](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize19](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
  ___silicon_hack407_havoc_all_BCounter()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize19](perm(BCounter($r, $lvl, $x))) ==> (BCounter_state($r, $lvl, $x) in BCounter_interferenceSet_hf(18, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize19](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(18, $r, $lvl, $x) == old[pre_stabilize19](BCounter_state($r, $lvl, $x)))
  
  // ------- Stabilising regions BCounter (after open-region@65.3) END 
  
  
}

method CAS(x: Ref, now: Int, thn: Int) returns (ret: Bool)
  requires acc(x.$memcell_$f, write) && true
  ensures (old(x.$memcell_$f) == now ? ret && (acc(x.$memcell_$f, write) && x.$memcell_$f == thn) : !ret && (acc(x.$memcell_$f, write) && x.$memcell_$f == old(x.$memcell_$f)))


method $_BCounter_interpretation_stability_check(r: Ref, lvl: Int, x: Ref)
{
  inhale acc(BCounter_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(BCounter_interferenceContext_fp($r, $lvl, $x), write))
  inhale acc(x.$memcell_$f, write) && true && (x.$memcell_$f == 0 || x.$memcell_$f == 1 || x.$memcell_$f == 2)
  
  // ------- Stabilising regions BCounter (check stability of region interpretation) BEGIN 
  
  
  label pre_stabilize20
  
  // Stabilising all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize20](perm(BCounter($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> (BCounter_state($r, $lvl, $x) in BCounter_atomicity_context_hf($r, $lvl, $x))) && (BCounter_state($r, $lvl, $x) == old[pre_stabilize20](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize20](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == BCounter_state($r, $lvl, $x) && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))
  
  // ------- Stabilising regions BCounter (check stability of region interpretation) END 
  
  
  assert acc(x.$memcell_$f, write) && true && (x.$memcell_$f == 0 || x.$memcell_$f == 1 || x.$memcell_$f == 2)
}

method $_BCounter_action_transitivity_check()
{
  var INCREMENT: Perm
  var $_action_n_0_x: Int
  var $_action_m_0_x: Int
  var $_action_n_0_y: Int
  var $_action_m_0_y: Int
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState || $_action_n_0_x == aState && $_action_m_0_x == bState && true && 1 / 4 >= INCREMENT
  inhale bState == cState || $_action_n_0_y == bState && $_action_m_0_y == cState && true && 1 / 4 >= INCREMENT
  assert aState == cState || aState == aState && cState == cState && true && 1 / 4 >= INCREMENT
}

method $_makeBCounter_condition_stability_precondition_check(r: Ref, lvl: Int, ret: Ref)
  requires lvl >= 0
{
  var $_levelVar_19: Int
  var v: Ref
  inhale $_levelVar_19 >= 0
  inhale acc(BCounter_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(BCounter_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context BCounter (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer5
  
  // Inferring interference all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(20, $r, $lvl, $x)) } none < old[pre_infer5](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(20, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer5](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_infer5](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_infer5](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(20, $r, $lvl, $x) == old[pre_infer5](BCounter_state($r, $lvl, $x)))
  
  // ------- Inferring interference context BCounter (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions BCounter (check stability of method condition) BEGIN 
  
  
  label pre_stabilize21
  
  // Stabilising all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize21](perm(BCounter($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> (BCounter_state($r, $lvl, $x) in BCounter_atomicity_context_hf($r, $lvl, $x))) && (BCounter_state($r, $lvl, $x) == old[pre_stabilize21](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize21](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == BCounter_state($r, $lvl, $x) && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))
  
  // ------- Stabilising regions BCounter (check stability of method condition) END 
  
  
  assert lvl >= 0
}

method $_incr_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref, p: Perm, ret: Int)
  requires acc(BCounter(r, lvl, x), write) && (lvl >= 0 && true) && acc(BCounter_INCREMENT(r), p) && p >= 1 / 4
{
  var $_levelVar_20: Int
  var v: Int
  var w: Int
  var b: Bool
  inhale $_levelVar_20 >= 0 && $_levelVar_20 > lvl
  inhale acc(BCounter_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(BCounter_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context BCounter (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer6
  
  // Inferring interference all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(21, $r, $lvl, $x)) } none < old[pre_infer6](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(21, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer6](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_infer6](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_infer6](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(21, $r, $lvl, $x) == old[pre_infer6](BCounter_state($r, $lvl, $x)))
  
  // ------- Inferring interference context BCounter (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions BCounter (check stability of method condition) BEGIN 
  
  
  label pre_stabilize22
  
  // Stabilising all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize22](perm(BCounter($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> (BCounter_state($r, $lvl, $x) in BCounter_atomicity_context_hf($r, $lvl, $x))) && (BCounter_state($r, $lvl, $x) == old[pre_stabilize22](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize22](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == BCounter_state($r, $lvl, $x) && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))
  
  // ------- Stabilising regions BCounter (check stability of method condition) END 
  
  
  assert acc(BCounter(r, lvl, x), write) && (lvl >= 0 && true) && acc(BCounter_INCREMENT(r), p) && p >= 1 / 4
}

method $_read_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref, p: Perm, ret: Int)
  requires acc(BCounter(r, lvl, x), write) && (lvl >= 0 && true) && acc(BCounter_INCREMENT(r), p)
{
  var $_levelVar_21: Int
  inhale $_levelVar_21 >= 0 && $_levelVar_21 > lvl
  inhale acc(BCounter_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(BCounter_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context BCounter (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer7
  
  // Inferring interference all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter_interferenceContext_fp()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in BCounter_interferenceSet_df(22, $r, $lvl, $x)) } none < old[pre_infer7](perm(BCounter($r, $lvl, $x))) ==> ($$_m in BCounter_interferenceSet_hf(22, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in BCounter_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer7](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_infer7](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == $$_m && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_infer7](perm(BCounter($r, $lvl, $x))) ==> BCounter_interferenceReference_hf(22, $r, $lvl, $x) == old[pre_infer7](BCounter_state($r, $lvl, $x)))
  
  // ------- Inferring interference context BCounter (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions BCounter (check stability of method condition) BEGIN 
  
  
  label pre_stabilize23
  
  // Stabilising all instances of region BCounter
  
  ___silicon_hack407_havoc_all_BCounter()
  exhale acc(BCounter_sk_fp(), write)
  inhale acc(BCounter_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [BCounter($r, $lvl, $x)] :: none < old[pre_stabilize23](perm(BCounter($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(BCounter_atomicity_context_fp($r, $lvl, $x)) ==> (BCounter_state($r, $lvl, $x) in BCounter_atomicity_context_hf($r, $lvl, $x))) && (BCounter_state($r, $lvl, $x) == old[pre_stabilize23](BCounter_state($r, $lvl, $x)) || BCounter_sk_$_action_n($r, $lvl, $x) == old[pre_stabilize23](BCounter_state($r, $lvl, $x)) && BCounter_sk_$_action_m($r, $lvl, $x) == BCounter_state($r, $lvl, $x) && true && perm(BCounter_INCREMENT($r)) <= write - 1 / 4))
  
  // ------- Stabilising regions BCounter (check stability of method condition) END 
  
  
  assert acc(BCounter(r, lvl, x), write) && (lvl >= 0 && true) && acc(BCounter_INCREMENT(r), p)
}