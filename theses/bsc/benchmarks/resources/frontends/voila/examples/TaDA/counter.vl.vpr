domain Map[U, V] {
  
  function Map_keys(m: Map[U, V]): Set[U]
  
  function Map_card(m: Map[U, V]): Int
  
  function Map_lookup(m: Map[U, V], u: U): V
  
  function Map_values(m: Map[U, V]): Set[V]
  
  function Map_empty(): Map[U, V]
  
  function Map_build(m: Map[U, V], u: U, v: V): Map[U, V]
  
  function Map_equal(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_disjoint(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_union(m1: Map[U, V], m2: Map[U, V]): Map[U, V]
  
  axiom Map_card_non_neg {
    (forall m: Map[U, V] :: { Map_card(m) } 0 <= Map_card(m))
  }
  
  axiom Map_card_domain {
    (forall m: Map[U, V] :: { |Map_keys(m)| } |Map_keys(m)| == Map_card(m))
  }
  
  axiom Map_values_def {
    (forall m: Map[U, V], v: V :: { (v in Map_values(m)) } (v in Map_values(m)) == (exists u: U :: (u in Map_keys(m)) && v == Map_lookup(m, u)))
  }
  
  axiom Map_empty_1 {
    (forall u: U :: { (u in Map_keys(Map_empty())) } !((u in Map_keys(Map_empty()))))
  }
  
  axiom Map_empty_2 {
    (forall m: Map[U, V] :: { Map_card(m) } (Map_card(m) == 0) == (m == Map_empty()) && (Map_card(m) != 0 ==> (exists u: U :: (u in Map_keys(m)))))
  }
  
  axiom Map_build_1 {
    (forall m: Map[U, V], u1: U, u2: U, v: V :: { (u2 in Map_keys(Map_build(m, u1, v))) } (u2 == u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) && Map_lookup(Map_build(m, u1, v), u1) == v) && (u2 != u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) == (u2 in Map_keys(m)) && Map_lookup(Map_build(m, u1, v), u2) == Map_lookup(m, u2)))
  }
  
  axiom Map_build_2 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } (u in Map_keys(m)) ==> Map_card(Map_build(m, u, v)) == Map_card(m))
  }
  
  axiom Map_build_3 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } !((u in Map_keys(m))) ==> Map_card(Map_build(m, u, v)) == Map_card(m) + 1)
  }
  
  axiom Map_equality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } (u in Map_keys(m1)) == (u in Map_keys(m2))))
  }
  
  axiom Map_extensionality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) ==> m1 == m2)
  }
  
  axiom Map_disjoint_def {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_disjoint(m1, m2) } Map_disjoint(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } !((u in Map_keys(m1))) || !((u in Map_keys(m2)))))
  }
  
  axiom Map_union_1 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { (u in Map_keys(Map_union(m1, m2))) } { (u in (Map_keys(m1) union Map_keys(m2))) } Map_disjoint(m1, m2) ==> (u in Map_keys(Map_union(m1, m2))) == (u in (Map_keys(m1) union Map_keys(m2))))
  }
  
  axiom Map_union_2 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m1)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m1, u))
  }
  
  axiom Map_union_3 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m2)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m2, u))
  }
}

domain trigger_functions {
  
  function Counter_state_T(c: Ref, lvl: Int, x: Ref): Bool
}

domain interferenceReference_Domain {
  
  function Counter_interferenceReference_df($p0: Int, c: Ref, lvl: Int, x: Ref): Bool
}

domain interferenceSet_Domain {
  
  function Counter_interferenceSet_df($p0: Int, c: Ref, lvl: Int, x: Ref): Set[Int]
}

domain atomicity_context_Domain {
  
  function Counter_atomicity_context_df(c: Ref, lvl: Int, x: Ref): Bool
}

field $diamond: Int

field $stepFrom_int: Int

field $stepTo_int: Int

field $memcell_$f: Int

function IntSet(): Set[Int]
  ensures (forall n: Int :: (n in result))


function NatSet(): Set[Int]
  ensures (forall n: Int :: 0 <= n == (n in result))


function Counter_atomicity_context_hf(c: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Counter_atomicity_context_fp(c, lvl, x), write)
  ensures [Counter_atomicity_context_df(c, lvl, x), true]


function Counter_interferenceSet_hf($p0: Int, c: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Counter_interferenceContext_fp(c, lvl, x), write)
  ensures [(forall $_m: Int :: { ($_m in result) } ($_m in result) ==> ($_m in Counter_interferenceSet_df($p0, c, lvl, x))), true]


function Counter_interferenceReference_hf($p0: Int, c: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter_interferenceContext_fp(c, lvl, x), write)
  ensures [Counter_interferenceReference_df($p0, c, lvl, x), true]


function Counter_sk_$_action_n(c: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter_sk_fp(), write)


function Counter_sk_$_action_m(c: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter_sk_fp(), write)


function Counter_state(c: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter(c, lvl, x), write)
  ensures [Counter_state_T(c, lvl, x), true]
{
  (unfolding acc(Counter(c, lvl, x), write) in x.$memcell_$f)
}

predicate Counter_G($r: Ref) 

predicate Counter_atomicity_context_fp(c: Ref, lvl: Int, x: Ref) 

predicate Counter_interferenceContext_fp(c: Ref, lvl: Int, x: Ref) 

predicate Counter_sk_fp() 

predicate Counter(c: Ref, lvl: Int, x: Ref) {
  acc(x.$memcell_$f, write) && true
}

method havoc_Bool() returns ($r: Bool)


method havoc_Int() returns ($r: Int)


method havoc_Ref() returns ($r: Ref)


method ___silicon_hack407_havoc_all_Counter()
  requires [true, (forall c: Ref, lvl: Int, x: Ref :: false ==> acc(Counter(c, lvl, x), none))]


method ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  requires [true, (forall c: Ref, lvl: Int, x: Ref :: false ==> acc(Counter_interferenceContext_fp(c, lvl, x), none))]


method read(c: Ref, lvl: Int, x: Ref) returns (ret: Int)
  requires acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
  requires (Counter_state(c, lvl, x) in IntSet())
  ensures acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == old(Counter_state(c, lvl, x))) && acc(Counter_G(c), write)
  ensures ret == old(Counter_state(c, lvl, x))
{
  var $_levelVar_0: Int
  var $_levelVar_1: Int
  var $_levelVar_2: Int
  var $_levelVar_3: Int
  inhale $_levelVar_0 >= 0 && $_levelVar_0 > lvl
  assert $_levelVar_0 >= 0
  inhale acc(Counter_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale Counter_interferenceSet_hf(0, c, lvl, x) == IntSet()
  inhale Counter_interferenceReference_hf(0, c, lvl, x) == old(Counter_state(c, lvl, x))
  
  // ------- make-atomic BEGIN -------
  
  
  label guard_arg_eval0
  exhale acc(Counter_G(c), write)
  exhale acc(Counter(c, lvl, x), write)
  label preFrame0
  
  // ------- Stabilising regions Counter (stabelizing the frame) BEGIN 
  
  
  label pre_stabilize0
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize0](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize0](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize0](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // ------- Stabilising regions Counter (stabelizing the frame) END 
  
  
  exhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter($c, $lvl, $x), old[preFrame0](perm(Counter($c, $lvl, $x)))))
  exhale (forall $$r: Ref :: acc(Counter_G($$r), old[preFrame0](perm(Counter_G($$r)))))
  exhale (forall $$_r: Ref :: acc($$_r.$memcell_$f, old[preFrame0](perm($$_r.$memcell_$f))))
  inhale acc(Counter(c, lvl, x), write)
  inhale acc(c.$diamond, write)
  $_levelVar_1 := lvl
  assert perm(Counter_atomicity_context_fp(c, lvl, x)) == none
  inhale acc(Counter_atomicity_context_fp(c, lvl, x), write)
  inhale Counter_atomicity_context_hf(c, lvl, x) == Counter_interferenceSet_hf(0, c, lvl, x)
  
  // ------- Stabilising regions Counter (before atomic) BEGIN 
  
  
  label pre_stabilize
  
  // Stabilising single instance of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(1, c, lvl, x)) } ($$_m in Counter_interferenceSet_hf(1, c, lvl, x)) == ((none < perm(c.$diamond) && none < perm(Counter_atomicity_context_fp(c, lvl, x)) ==> ($$_m in Counter_atomicity_context_hf(c, lvl, x))) && ($$_m == old[pre_stabilize](Counter_state(c, lvl, x)) || Counter_sk_$_action_n(c, lvl, x) == old[pre_stabilize](Counter_state(c, lvl, x)) && Counter_sk_$_action_m(c, lvl, x) == $$_m && true && perm(Counter_G(c)) == none)))
  ___silicon_hack407_havoc_all_Counter()
  inhale (Counter_state(c, lvl, x) in Counter_interferenceSet_hf(1, c, lvl, x))
  
  // havoc performed by other front resource
  
  
  inhale Counter_interferenceReference_hf(1, c, lvl, x) == old[pre_stabilize](Counter_state(c, lvl, x))
  
  // ------- Stabilising regions Counter (before atomic) END 
  
  
  
  // ------- update-region BEGIN -----
  
  
  exhale acc(c.$diamond, write)
  label pre_region_update0
  assert $_levelVar_0 > lvl
  $_levelVar_2 := lvl
  exhale acc(Counter_atomicity_context_fp(c, lvl, x), write)
  unfold acc(Counter(c, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- Havocking regions Counter (before update-region@25.5) BEGIN 
  
  
  label pre_havoc0
  
  // Havocking single instance of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  
  // ------- Havocking regions Counter (before update-region@25.5) END 
  
  
  
  // ------- heap-read BEGIN ---------
  
  
  ret := x.$memcell_$f
  
  // ------- heap-read END -----------
  
  
  fold acc(Counter(c, lvl, x), write)
  if (Counter_state(c, lvl, x) != old[pre_region_update0](Counter_state(c, lvl, x)) || true) {
    inhale acc(c.$stepFrom_int, write) && acc(c.$stepTo_int, write)
    c.$stepFrom_int := old[pre_region_update0](Counter_state(c, lvl, x))
    c.$stepTo_int := Counter_state(c, lvl, x)
  } else {
    inhale acc(c.$diamond, write)
  }
  inhale acc(Counter_atomicity_context_fp(c, lvl, x), write)
  inhale Counter_atomicity_context_hf(c, lvl, x) == old[pre_region_update0](Counter_atomicity_context_hf(c, lvl, x))
  $_levelVar_3 := $_levelVar_0
  
  // ------- update-region END -------
  
  
  
  // ------- Stabilising regions Counter (after update-region@25.5) BEGIN 
  
  
  label pre_stabilize3
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref, $$_m: Int :: { ($$_m in Counter_interferenceSet_df(2, $c, $lvl, $x)) } none < old[pre_stabilize3](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(2, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize3](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize3](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none)))
  ___silicon_hack407_havoc_all_Counter()
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize3](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(2, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_interferenceReference_df(2, $c, $lvl, $x) } none < old[pre_stabilize3](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(2, $c, $lvl, $x) == old[pre_stabilize3](Counter_state($c, $lvl, $x)))
  
  // ------- Stabilising regions Counter (after update-region@25.5) END 
  
  
  assert (c.$stepFrom_int in Counter_atomicity_context_hf(c, lvl, x))
  assert true
  
  // ------- Stabilising regions Counter (after atomic) BEGIN 
  
  
  label pre_stabilize2
  
  // Stabilising single instance of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (none < perm(c.$diamond) && none < perm(Counter_atomicity_context_fp(c, lvl, x)) ==> (Counter_state(c, lvl, x) in Counter_atomicity_context_hf(c, lvl, x))) && (Counter_state(c, lvl, x) == old[pre_stabilize2](Counter_state(c, lvl, x)) || Counter_sk_$_action_n(c, lvl, x) == old[pre_stabilize2](Counter_state(c, lvl, x)) && Counter_sk_$_action_m(c, lvl, x) == Counter_state(c, lvl, x) && true && perm(Counter_G(c)) == none)
  
  // ------- Stabilising regions Counter (after atomic) END 
  
  
  
  inhale Counter_state(c, lvl, x) == c.$stepTo_int
  inhale old(Counter_state(c, lvl, x)) == c.$stepFrom_int
  inhale acc(Counter_G(c), write)
  exhale acc(c.$stepFrom_int, write) && acc(c.$stepTo_int, write)
  exhale acc(Counter_atomicity_context_fp(c, lvl, x), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter($c, $lvl, $x), old[preFrame0](perm(Counter($c, $lvl, $x)))))
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[preFrame0](perm(Counter($c, $lvl, $x))) ==> Counter_state($c, $lvl, $x) == old[preFrame0](Counter_state($c, $lvl, $x)))
  inhale (forall $$r: Ref :: acc(Counter_G($$r), old[preFrame0](perm(Counter_G($$r)))))
  inhale (forall $$_r: Ref :: acc($$_r.$memcell_$f, old[preFrame0](perm($$_r.$memcell_$f))))
  inhale (forall $$_r: Ref :: { $$_r.$memcell_$f } none < old[preFrame0](perm($$_r.$memcell_$f)) ==> $$_r.$memcell_$f == old[preFrame0]($$_r.$memcell_$f))
  
  // ------- make-atomic END ---------
  
  
}

method read2(c: Ref, lvl: Int, x: Ref) returns (ret: Int)
  requires acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
  requires (Counter_state(c, lvl, x) in IntSet())
  ensures acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == old(Counter_state(c, lvl, x))) && acc(Counter_G(c), write)
  ensures ret == old(Counter_state(c, lvl, x))
{
  var $_levelVar_4: Int
  var $_levelVar_5: Int
  var $_levelVar_6: Int
  inhale $_levelVar_4 >= 0 && $_levelVar_4 > lvl
  assert $_levelVar_4 >= 0
  inhale acc(Counter_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale Counter_interferenceSet_hf(2, c, lvl, x) == IntSet()
  inhale Counter_interferenceReference_hf(2, c, lvl, x) == old(Counter_state(c, lvl, x))
  
  // ------- open-region BEGIN -------
  
  
  label pre_open_region0
  assert $_levelVar_4 > lvl
  $_levelVar_5 := lvl
  unfold acc(Counter(c, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- heap-read BEGIN ---------
  
  
  ret := x.$memcell_$f
  
  // ------- heap-read END -----------
  
  
  fold acc(Counter(c, lvl, x), write)
  assert Counter_state(c, lvl, x) == old[pre_open_region0](Counter_state(c, lvl, x))
  $_levelVar_6 := $_levelVar_4
  
  // ------- open-region END ---------
  
  
}

method CAS(x: Ref, now: Int, thn: Int) returns (ret: Bool)
  requires acc(x.$memcell_$f, write) && true
  ensures (old(x.$memcell_$f) == now ? ret && (acc(x.$memcell_$f, write) && x.$memcell_$f == thn) : !ret && (acc(x.$memcell_$f, write) && x.$memcell_$f == old(x.$memcell_$f)))


method incr(c: Ref, lvl: Int, x: Ref)
  requires acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
  requires (Counter_state(c, lvl, x) in IntSet())
  ensures acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == old(Counter_state(c, lvl, x)) + 1) && acc(Counter_G(c), write)
{
  var r: Int
  var b: Bool
  var $_levelVar_8: Int
  var $_levelVar_9: Int
  var $_levelVar_10: Int
  var $_levelVar_11: Int
  var $_levelVar_12: Int
  var $_levelVar_13: Int
  var $_levelVar_14: Int
  var $_levelVar_15: Int
  var $_levelVar_16: Int
  var $_levelVar_17: Int
  var $_levelVar_18: Int
  inhale $_levelVar_8 >= 0 && $_levelVar_8 > lvl
  assert $_levelVar_8 >= 0
  inhale acc(Counter_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale Counter_interferenceSet_hf(3, c, lvl, x) == IntSet()
  inhale Counter_interferenceReference_hf(3, c, lvl, x) == old(Counter_state(c, lvl, x))
  
  // ------- make-atomic BEGIN -------
  
  
  label guard_arg_eval
  exhale acc(Counter_G(c), write)
  exhale acc(Counter(c, lvl, x), write)
  label preFrame
  
  // ------- Stabilising regions Counter (stabelizing the frame) BEGIN 
  
  
  label pre_stabilize4
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize4](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize4](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize4](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // ------- Stabilising regions Counter (stabelizing the frame) END 
  
  
  exhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter($c, $lvl, $x), old[preFrame](perm(Counter($c, $lvl, $x)))))
  exhale (forall $$r: Ref :: acc(Counter_G($$r), old[preFrame](perm(Counter_G($$r)))))
  exhale (forall $$_r: Ref :: acc($$_r.$memcell_$f, old[preFrame](perm($$_r.$memcell_$f))))
  inhale acc(Counter(c, lvl, x), write)
  inhale acc(c.$diamond, write)
  $_levelVar_9 := lvl
  assert perm(Counter_atomicity_context_fp(c, lvl, x)) == none
  inhale acc(Counter_atomicity_context_fp(c, lvl, x), write)
  inhale Counter_atomicity_context_hf(c, lvl, x) == Counter_interferenceSet_hf(3, c, lvl, x)
  
  // ------- Stabilising regions Counter (before atomic) BEGIN 
  
  
  label pre_stabilize5
  
  // Stabilising single instance of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(4, c, lvl, x)) } ($$_m in Counter_interferenceSet_hf(4, c, lvl, x)) == ((none < perm(c.$diamond) && none < perm(Counter_atomicity_context_fp(c, lvl, x)) ==> ($$_m in Counter_atomicity_context_hf(c, lvl, x))) && ($$_m == old[pre_stabilize5](Counter_state(c, lvl, x)) || Counter_sk_$_action_n(c, lvl, x) == old[pre_stabilize5](Counter_state(c, lvl, x)) && Counter_sk_$_action_m(c, lvl, x) == $$_m && true && perm(Counter_G(c)) == none)))
  ___silicon_hack407_havoc_all_Counter()
  inhale (Counter_state(c, lvl, x) in Counter_interferenceSet_hf(4, c, lvl, x))
  
  // havoc performed by other front resource
  
  
  inhale Counter_interferenceReference_hf(4, c, lvl, x) == old[pre_stabilize5](Counter_state(c, lvl, x))
  
  // ------- Stabilising regions Counter (before atomic) END 
  
  
  
  // ------- open-region BEGIN -------
  
  
  label pre_open_region
  assert $_levelVar_8 > lvl
  $_levelVar_10 := lvl
  unfold acc(Counter(c, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- heap-read BEGIN ---------
  
  
  r := x.$memcell_$f
  
  // ------- heap-read END -----------
  
  
  fold acc(Counter(c, lvl, x), write)
  assert Counter_state(c, lvl, x) == old[pre_open_region](Counter_state(c, lvl, x))
  $_levelVar_11 := $_levelVar_8
  
  // ------- open-region END ---------
  
  
  
  // ------- Stabilising regions Counter (after open-region@62.7) BEGIN 
  
  
  label pre_stabilize7
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref, $$_m: Int :: { ($$_m in Counter_interferenceSet_df(5, $c, $lvl, $x)) } none < old[pre_stabilize7](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(5, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize7](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize7](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none)))
  ___silicon_hack407_havoc_all_Counter()
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize7](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(5, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_interferenceReference_df(5, $c, $lvl, $x) } none < old[pre_stabilize7](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(5, $c, $lvl, $x) == old[pre_stabilize7](Counter_state($c, $lvl, $x)))
  
  // ------- Stabilising regions Counter (after open-region@62.7) END 
  
  
  
  // ------- update-region BEGIN -----
  
  
  exhale acc(c.$diamond, write)
  label pre_region_update
  assert $_levelVar_11 > lvl
  $_levelVar_12 := lvl
  exhale acc(Counter_atomicity_context_fp(c, lvl, x), write)
  unfold acc(Counter(c, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- Havocking regions Counter (before update-region@65.7) BEGIN 
  
  
  label pre_havoc
  
  // Havocking single instance of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  
  // ------- Havocking regions Counter (before update-region@65.7) END 
  
  
  
  // ------- call:CAS BEGIN ----------
  
  
  assert true
  label pre_call0
  assert $_levelVar_12 >= 0
  assert true
  exhale acc(x.$memcell_$f, write) && true
  
  // ------- Stabilising regions Counter (before call:CAS@66.9) BEGIN 
  
  
  label pre_stabilize8
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize8](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize8](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize8](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // ------- Stabilising regions Counter (before call:CAS@66.9) END 
  
  
  b := havoc_Bool()
  inhale (old[pre_call0](x.$memcell_$f) == r ? b && (acc(x.$memcell_$f, write) && x.$memcell_$f == r + 1) : !b && (acc(x.$memcell_$f, write) && x.$memcell_$f == old[pre_call0](x.$memcell_$f)))
  
  // ------- call:CAS END ------------
  
  
  fold acc(Counter(c, lvl, x), write)
  if (Counter_state(c, lvl, x) != old[pre_region_update](Counter_state(c, lvl, x))) {
    inhale acc(c.$stepFrom_int, write) && acc(c.$stepTo_int, write)
    c.$stepFrom_int := old[pre_region_update](Counter_state(c, lvl, x))
    c.$stepTo_int := Counter_state(c, lvl, x)
  } else {
    inhale acc(c.$diamond, write)
  }
  inhale acc(Counter_atomicity_context_fp(c, lvl, x), write)
  inhale Counter_atomicity_context_hf(c, lvl, x) == old[pre_region_update](Counter_atomicity_context_hf(c, lvl, x))
  $_levelVar_13 := $_levelVar_11
  
  // ------- update-region END -------
  
  
  
  // ------- Stabilising regions Counter (after update-region@65.7) BEGIN 
  
  
  label pre_stabilize9
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref, $$_m: Int :: { ($$_m in Counter_interferenceSet_df(6, $c, $lvl, $x)) } none < old[pre_stabilize9](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(6, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize9](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize9](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none)))
  ___silicon_hack407_havoc_all_Counter()
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize9](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(6, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_interferenceReference_df(6, $c, $lvl, $x) } none < old[pre_stabilize9](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(6, $c, $lvl, $x) == old[pre_stabilize9](Counter_state($c, $lvl, $x)))
  
  // ------- Stabilising regions Counter (after update-region@65.7) END 
  
  
  
  // ------- while BEGIN -------------
  
  
  label preWhile0
  while (!b)
    invariant acc(Counter(c, lvl, x), write) && (lvl >= 0 && true)
    invariant (!b ? acc(c.$diamond, write) : true)
    invariant (b ? acc(c.$stepFrom_int, write) && c.$stepFrom_int == r && (acc(c.$stepTo_int, write) && c.$stepTo_int == r + 1) : true) 
  {
    inhale acc(Counter_sk_fp(), write)
    
    // no init required
    
    
    inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
    inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_atomicity_context_fp($c, $lvl, $x), old[preWhile0](perm(Counter_atomicity_context_fp($c, $lvl, $x)))))
    inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_atomicity_context_df($c, $lvl, $x) } none < old[preWhile0](perm(Counter_atomicity_context_fp($c, $lvl, $x))) ==> Counter_atomicity_context_hf($c, $lvl, $x) == old[preWhile0](Counter_atomicity_context_hf($c, $lvl, $x)))
    
    // ------- Inferring interference context Counter (infer context inside while) BEGIN 
    
    
    label pre_infer
    
    // Inferring interference all instances of region Counter
    
    ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forall $c: Ref, $lvl: Int, $x: Ref, $$_m: Int :: { ($$_m in Counter_interferenceSet_df(7, $c, $lvl, $x)) } none < old[pre_infer](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(7, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none)))
    
    // havoc performed by other front resource
    
    
    inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_interferenceReference_df(7, $c, $lvl, $x) } none < old[pre_infer](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(7, $c, $lvl, $x) == old[pre_infer](Counter_state($c, $lvl, $x)))
    
    // ------- Inferring interference context Counter (infer context inside while) END 
    
    
    
    // ------- open-region BEGIN -------
    
    
    label pre_open_region2
    assert $_levelVar_13 > lvl
    $_levelVar_14 := lvl
    unfold acc(Counter(c, lvl, x), write)
    
    // no interference context translation needed
    
    
    
    // ------- heap-read BEGIN ---------
    
    
    r := x.$memcell_$f
    
    // ------- heap-read END -----------
    
    
    fold acc(Counter(c, lvl, x), write)
    assert Counter_state(c, lvl, x) == old[pre_open_region2](Counter_state(c, lvl, x))
    $_levelVar_15 := $_levelVar_13
    
    // ------- open-region END ---------
    
    
    
    // ------- Stabilising regions Counter (after open-region@62.7) BEGIN 
    
    
    label pre_stabilize10
    
    // Stabilising all instances of region Counter
    
    ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forall $c: Ref, $lvl: Int, $x: Ref, $$_m: Int :: { ($$_m in Counter_interferenceSet_df(8, $c, $lvl, $x)) } none < old[pre_stabilize10](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(8, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize10](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize10](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none)))
    ___silicon_hack407_havoc_all_Counter()
    inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize10](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(8, $c, $lvl, $x)))
    
    // havoc performed by other front resource
    
    
    inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_interferenceReference_df(8, $c, $lvl, $x) } none < old[pre_stabilize10](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(8, $c, $lvl, $x) == old[pre_stabilize10](Counter_state($c, $lvl, $x)))
    
    // ------- Stabilising regions Counter (after open-region@62.7) END 
    
    
    
    // ------- update-region BEGIN -----
    
    
    exhale acc(c.$diamond, write)
    label pre_region_update2
    assert $_levelVar_15 > lvl
    $_levelVar_16 := lvl
    exhale acc(Counter_atomicity_context_fp(c, lvl, x), write)
    unfold acc(Counter(c, lvl, x), write)
    
    // no interference context translation needed
    
    
    
    // ------- Havocking regions Counter (before update-region@65.7) BEGIN 
    
    
    label pre_havoc2
    
    // Havocking single instance of region Counter
    
    ___silicon_hack407_havoc_all_Counter()
    
    // ------- Havocking regions Counter (before update-region@65.7) END 
    
    
    
    // ------- call:CAS BEGIN ----------
    
    
    assert true
    label pre_call
    assert $_levelVar_16 >= 0
    assert true
    exhale acc(x.$memcell_$f, write) && true
    
    // ------- Stabilising regions Counter (before call:CAS@66.9) BEGIN 
    
    
    label pre_stabilize11
    
    // Stabilising all instances of region Counter
    
    ___silicon_hack407_havoc_all_Counter()
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize11](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize11](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize11](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
    
    // ------- Stabilising regions Counter (before call:CAS@66.9) END 
    
    
    b := havoc_Bool()
    inhale (old[pre_call](x.$memcell_$f) == r ? b && (acc(x.$memcell_$f, write) && x.$memcell_$f == r + 1) : !b && (acc(x.$memcell_$f, write) && x.$memcell_$f == old[pre_call](x.$memcell_$f)))
    
    // ------- call:CAS END ------------
    
    
    fold acc(Counter(c, lvl, x), write)
    if (Counter_state(c, lvl, x) != old[pre_region_update2](Counter_state(c, lvl, x))) {
      inhale acc(c.$stepFrom_int, write) && acc(c.$stepTo_int, write)
      c.$stepFrom_int := old[pre_region_update2](Counter_state(c, lvl, x))
      c.$stepTo_int := Counter_state(c, lvl, x)
    } else {
      inhale acc(c.$diamond, write)
    }
    inhale acc(Counter_atomicity_context_fp(c, lvl, x), write)
    inhale Counter_atomicity_context_hf(c, lvl, x) == old[pre_region_update2](Counter_atomicity_context_hf(c, lvl, x))
    $_levelVar_17 := $_levelVar_15
    
    // ------- update-region END -------
    
    
    
    // ------- Stabilising regions Counter (after update-region@65.7) BEGIN 
    
    
    label pre_stabilize12
    
    // Stabilising all instances of region Counter
    
    ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forall $c: Ref, $lvl: Int, $x: Ref, $$_m: Int :: { ($$_m in Counter_interferenceSet_df(9, $c, $lvl, $x)) } none < old[pre_stabilize12](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(9, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize12](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize12](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none)))
    ___silicon_hack407_havoc_all_Counter()
    inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize12](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(9, $c, $lvl, $x)))
    
    // havoc performed by other front resource
    
    
    inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_interferenceReference_df(9, $c, $lvl, $x) } none < old[pre_stabilize12](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(9, $c, $lvl, $x) == old[pre_stabilize12](Counter_state($c, $lvl, $x)))
    
    // ------- Stabilising regions Counter (after update-region@65.7) END 
    
    
    assert $_levelVar_17 == $_levelVar_13
  }
  $_levelVar_18 := $_levelVar_13
  
  // ------- while END ---------------
  
  
  
  // ------- Stabilising regions Counter (after while@57.5) BEGIN 
  
  
  label pre_stabilize13
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref, $$_m: Int :: { ($$_m in Counter_interferenceSet_df(10, $c, $lvl, $x)) } none < old[pre_stabilize13](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(10, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize13](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize13](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none)))
  ___silicon_hack407_havoc_all_Counter()
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize13](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(10, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_interferenceReference_df(10, $c, $lvl, $x) } none < old[pre_stabilize13](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(10, $c, $lvl, $x) == old[pre_stabilize13](Counter_state($c, $lvl, $x)))
  
  // ------- Stabilising regions Counter (after while@57.5) END 
  
  
  assert (c.$stepFrom_int in Counter_atomicity_context_hf(c, lvl, x))
  assert true
  
  // ------- Stabilising regions Counter (after atomic) BEGIN 
  
  
  label pre_stabilize6
  
  // Stabilising single instance of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (none < perm(c.$diamond) && none < perm(Counter_atomicity_context_fp(c, lvl, x)) ==> (Counter_state(c, lvl, x) in Counter_atomicity_context_hf(c, lvl, x))) && (Counter_state(c, lvl, x) == old[pre_stabilize6](Counter_state(c, lvl, x)) || Counter_sk_$_action_n(c, lvl, x) == old[pre_stabilize6](Counter_state(c, lvl, x)) && Counter_sk_$_action_m(c, lvl, x) == Counter_state(c, lvl, x) && true && perm(Counter_G(c)) == none)
  
  // ------- Stabilising regions Counter (after atomic) END 
  
  
  
  inhale Counter_state(c, lvl, x) == c.$stepTo_int
  inhale old(Counter_state(c, lvl, x)) == c.$stepFrom_int
  inhale acc(Counter_G(c), write)
  exhale acc(c.$stepFrom_int, write) && acc(c.$stepTo_int, write)
  exhale acc(Counter_atomicity_context_fp(c, lvl, x), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter($c, $lvl, $x), old[preFrame](perm(Counter($c, $lvl, $x)))))
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[preFrame](perm(Counter($c, $lvl, $x))) ==> Counter_state($c, $lvl, $x) == old[preFrame](Counter_state($c, $lvl, $x)))
  inhale (forall $$r: Ref :: acc(Counter_G($$r), old[preFrame](perm(Counter_G($$r)))))
  inhale (forall $$_r: Ref :: acc($$_r.$memcell_$f, old[preFrame](perm($$_r.$memcell_$f))))
  inhale (forall $$_r: Ref :: { $$_r.$memcell_$f } none < old[preFrame](perm($$_r.$memcell_$f)) ==> $$_r.$memcell_$f == old[preFrame]($$_r.$memcell_$f))
  
  // ------- make-atomic END ---------
  
  
}

method wkincr(c: Ref, lvl: Int, x: Ref)
  requires acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
  requires (Counter_state(c, lvl, x) in Set(Counter_state(c, lvl, x)))
  ensures acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == old(Counter_state(c, lvl, x)) + 1) && acc(Counter_G(c), write)
{
  var r: Int
  var $_levelVar_19: Int
  var $_levelVar_20: Int
  var $_levelVar_21: Int
  var $_levelVar_22: Int
  var $_levelVar_23: Int
  var $_levelVar_24: Int
  inhale $_levelVar_19 >= 0 && $_levelVar_19 > lvl
  assert $_levelVar_19 >= 0
  inhale acc(Counter_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale Counter_interferenceSet_hf(10, c, lvl, x) == Set(Counter_state(c, lvl, x))
  inhale Counter_interferenceReference_hf(10, c, lvl, x) == old(Counter_state(c, lvl, x))
  
  // ------- make-atomic BEGIN -------
  
  
  label guard_arg_eval2
  exhale acc(Counter_G(c), write)
  exhale acc(Counter(c, lvl, x), write)
  label preFrame2
  
  // ------- Stabilising regions Counter (stabelizing the frame) BEGIN 
  
  
  label pre_stabilize14
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize14](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize14](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize14](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // ------- Stabilising regions Counter (stabelizing the frame) END 
  
  
  exhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter($c, $lvl, $x), old[preFrame2](perm(Counter($c, $lvl, $x)))))
  exhale (forall $$r: Ref :: acc(Counter_G($$r), old[preFrame2](perm(Counter_G($$r)))))
  exhale (forall $$_r: Ref :: acc($$_r.$memcell_$f, old[preFrame2](perm($$_r.$memcell_$f))))
  inhale acc(Counter(c, lvl, x), write)
  inhale acc(c.$diamond, write)
  $_levelVar_20 := lvl
  assert perm(Counter_atomicity_context_fp(c, lvl, x)) == none
  inhale acc(Counter_atomicity_context_fp(c, lvl, x), write)
  inhale Counter_atomicity_context_hf(c, lvl, x) == Counter_interferenceSet_hf(10, c, lvl, x)
  
  // ------- Stabilising regions Counter (before atomic) BEGIN 
  
  
  label pre_stabilize15
  
  // Stabilising single instance of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(11, c, lvl, x)) } ($$_m in Counter_interferenceSet_hf(11, c, lvl, x)) == ((none < perm(c.$diamond) && none < perm(Counter_atomicity_context_fp(c, lvl, x)) ==> ($$_m in Counter_atomicity_context_hf(c, lvl, x))) && ($$_m == old[pre_stabilize15](Counter_state(c, lvl, x)) || Counter_sk_$_action_n(c, lvl, x) == old[pre_stabilize15](Counter_state(c, lvl, x)) && Counter_sk_$_action_m(c, lvl, x) == $$_m && true && perm(Counter_G(c)) == none)))
  ___silicon_hack407_havoc_all_Counter()
  inhale (Counter_state(c, lvl, x) in Counter_interferenceSet_hf(11, c, lvl, x))
  
  // havoc performed by other front resource
  
  
  inhale Counter_interferenceReference_hf(11, c, lvl, x) == old[pre_stabilize15](Counter_state(c, lvl, x))
  
  // ------- Stabilising regions Counter (before atomic) END 
  
  
  
  // ------- open-region BEGIN -------
  
  
  label pre_open_region3
  assert $_levelVar_19 > lvl
  $_levelVar_21 := lvl
  unfold acc(Counter(c, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- heap-read BEGIN ---------
  
  
  r := x.$memcell_$f
  
  // ------- heap-read END -----------
  
  
  fold acc(Counter(c, lvl, x), write)
  assert Counter_state(c, lvl, x) == old[pre_open_region3](Counter_state(c, lvl, x))
  $_levelVar_22 := $_levelVar_19
  
  // ------- open-region END ---------
  
  
  
  // ------- Stabilising regions Counter (after open-region@80.5) BEGIN 
  
  
  label pre_stabilize17
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref, $$_m: Int :: { ($$_m in Counter_interferenceSet_df(12, $c, $lvl, $x)) } none < old[pre_stabilize17](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(12, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize17](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize17](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none)))
  ___silicon_hack407_havoc_all_Counter()
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize17](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(12, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_interferenceReference_df(12, $c, $lvl, $x) } none < old[pre_stabilize17](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(12, $c, $lvl, $x) == old[pre_stabilize17](Counter_state($c, $lvl, $x)))
  
  // ------- Stabilising regions Counter (after open-region@80.5) END 
  
  
  
  // ------- update-region BEGIN -----
  
  
  exhale acc(c.$diamond, write)
  label pre_region_update3
  assert $_levelVar_22 > lvl
  $_levelVar_23 := lvl
  exhale acc(Counter_atomicity_context_fp(c, lvl, x), write)
  unfold acc(Counter(c, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- Havocking regions Counter (before update-region@90.5) BEGIN 
  
  
  label pre_havoc3
  
  // Havocking single instance of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  
  // ------- Havocking regions Counter (before update-region@90.5) END 
  
  
  
  // ------- heap-write BEGIN --------
  
  
  x.$memcell_$f := r + 1
  
  // ------- heap-write END ----------
  
  
  fold acc(Counter(c, lvl, x), write)
  if (Counter_state(c, lvl, x) != old[pre_region_update3](Counter_state(c, lvl, x))) {
    inhale acc(c.$stepFrom_int, write) && acc(c.$stepTo_int, write)
    c.$stepFrom_int := old[pre_region_update3](Counter_state(c, lvl, x))
    c.$stepTo_int := Counter_state(c, lvl, x)
  } else {
    inhale acc(c.$diamond, write)
  }
  inhale acc(Counter_atomicity_context_fp(c, lvl, x), write)
  inhale Counter_atomicity_context_hf(c, lvl, x) == old[pre_region_update3](Counter_atomicity_context_hf(c, lvl, x))
  $_levelVar_24 := $_levelVar_22
  
  // ------- update-region END -------
  
  
  
  // ------- Stabilising regions Counter (after update-region@90.5) BEGIN 
  
  
  label pre_stabilize18
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref, $$_m: Int :: { ($$_m in Counter_interferenceSet_df(13, $c, $lvl, $x)) } none < old[pre_stabilize18](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(13, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize18](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize18](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none)))
  ___silicon_hack407_havoc_all_Counter()
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize18](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(13, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_interferenceReference_df(13, $c, $lvl, $x) } none < old[pre_stabilize18](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(13, $c, $lvl, $x) == old[pre_stabilize18](Counter_state($c, $lvl, $x)))
  
  // ------- Stabilising regions Counter (after update-region@90.5) END 
  
  
  assert (c.$stepFrom_int in Counter_atomicity_context_hf(c, lvl, x))
  assert true
  
  // ------- Stabilising regions Counter (after atomic) BEGIN 
  
  
  label pre_stabilize16
  
  // Stabilising single instance of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (none < perm(c.$diamond) && none < perm(Counter_atomicity_context_fp(c, lvl, x)) ==> (Counter_state(c, lvl, x) in Counter_atomicity_context_hf(c, lvl, x))) && (Counter_state(c, lvl, x) == old[pre_stabilize16](Counter_state(c, lvl, x)) || Counter_sk_$_action_n(c, lvl, x) == old[pre_stabilize16](Counter_state(c, lvl, x)) && Counter_sk_$_action_m(c, lvl, x) == Counter_state(c, lvl, x) && true && perm(Counter_G(c)) == none)
  
  // ------- Stabilising regions Counter (after atomic) END 
  
  
  
  inhale Counter_state(c, lvl, x) == c.$stepTo_int
  inhale old(Counter_state(c, lvl, x)) == c.$stepFrom_int
  inhale acc(Counter_G(c), write)
  exhale acc(c.$stepFrom_int, write) && acc(c.$stepTo_int, write)
  exhale acc(Counter_atomicity_context_fp(c, lvl, x), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter($c, $lvl, $x), old[preFrame2](perm(Counter($c, $lvl, $x)))))
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[preFrame2](perm(Counter($c, $lvl, $x))) ==> Counter_state($c, $lvl, $x) == old[preFrame2](Counter_state($c, $lvl, $x)))
  inhale (forall $$r: Ref :: acc(Counter_G($$r), old[preFrame2](perm(Counter_G($$r)))))
  inhale (forall $$_r: Ref :: acc($$_r.$memcell_$f, old[preFrame2](perm($$_r.$memcell_$f))))
  inhale (forall $$_r: Ref :: { $$_r.$memcell_$f } none < old[preFrame2](perm($$_r.$memcell_$f)) ==> $$_r.$memcell_$f == old[preFrame2]($$_r.$memcell_$f))
  
  // ------- make-atomic END ---------
  
  
}

method $_Counter_interpretation_stability_check(c: Ref, lvl: Int, x: Ref)
{
  inhale acc(Counter_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale acc(x.$memcell_$f, write) && true
  
  // ------- Stabilising regions Counter (check stability of region interpretation) BEGIN 
  
  
  label pre_stabilize19
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize19](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize19](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize19](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // ------- Stabilising regions Counter (check stability of region interpretation) END 
  
  
  assert acc(x.$memcell_$f, write) && true
}

method $_Counter_action_transitivity_check()
{
  var G: Bool
  var $_action_n_0_x: Int
  var $_action_m_0_x: Int
  var $_action_n_0_y: Int
  var $_action_m_0_y: Int
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState || $_action_n_0_x == aState && $_action_m_0_x == bState && true && G
  inhale bState == cState || $_action_n_0_y == bState && $_action_m_0_y == cState && true && G
  assert aState == cState || aState == aState && cState == cState && true && G
}

method $_read_condition_stability_precondition_check(c: Ref, lvl: Int, x: Ref, ret: Int)
  requires acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
{
  var $_levelVar_25: Int
  inhale $_levelVar_25 >= 0 && $_levelVar_25 > lvl
  inhale acc(Counter_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale Counter_interferenceSet_hf(13, c, lvl, x) == IntSet()
  inhale Counter_interferenceReference_hf(13, c, lvl, x) == old(Counter_state(c, lvl, x))
  
  // ------- Stabilising regions Counter (check stability of method condition) BEGIN 
  
  
  label pre_stabilize20
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize20](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize20](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize20](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // ------- Stabilising regions Counter (check stability of method condition) END 
  
  
  assert acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
}

method $_read2_condition_stability_precondition_check(c: Ref, lvl: Int, x: Ref, ret: Int)
  requires acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
{
  var $_levelVar_26: Int
  inhale $_levelVar_26 >= 0 && $_levelVar_26 > lvl
  inhale acc(Counter_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale Counter_interferenceSet_hf(13, c, lvl, x) == IntSet()
  inhale Counter_interferenceReference_hf(13, c, lvl, x) == old(Counter_state(c, lvl, x))
  
  // ------- Stabilising regions Counter (check stability of method condition) BEGIN 
  
  
  label pre_stabilize21
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize21](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize21](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize21](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // ------- Stabilising regions Counter (check stability of method condition) END 
  
  
  assert acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
}

method $_incr_condition_stability_precondition_check(c: Ref, lvl: Int, x: Ref)
  requires acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
{
  var $_levelVar_27: Int
  var r: Int
  var b: Bool
  inhale $_levelVar_27 >= 0 && $_levelVar_27 > lvl
  inhale acc(Counter_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale Counter_interferenceSet_hf(13, c, lvl, x) == IntSet()
  inhale Counter_interferenceReference_hf(13, c, lvl, x) == old(Counter_state(c, lvl, x))
  
  // ------- Stabilising regions Counter (check stability of method condition) BEGIN 
  
  
  label pre_stabilize22
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize22](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize22](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize22](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // ------- Stabilising regions Counter (check stability of method condition) END 
  
  
  assert acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
}

method $_wkincr_condition_stability_precondition_check(c: Ref, lvl: Int, x: Ref)
  requires acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
{
  var $_levelVar_28: Int
  var r: Int
  inhale $_levelVar_28 >= 0 && $_levelVar_28 > lvl
  inhale acc(Counter_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale Counter_interferenceSet_hf(13, c, lvl, x) == Set(Counter_state(c, lvl, x))
  inhale Counter_interferenceReference_hf(13, c, lvl, x) == old(Counter_state(c, lvl, x))
  
  // ------- Stabilising regions Counter (check stability of method condition) BEGIN 
  
  
  label pre_stabilize23
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_state_T($c, $lvl, $x) } none < old[pre_stabilize23](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize23](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize23](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // ------- Stabilising regions Counter (check stability of method condition) END 
  
  
  assert acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
}