domain Map[U, V] {
  
  function Map_keys(m: Map[U, V]): Set[U]
  
  function Map_card(m: Map[U, V]): Int
  
  function Map_lookup(m: Map[U, V], u: U): V
  
  function Map_values(m: Map[U, V]): Set[V]
  
  function Map_empty(): Map[U, V]
  
  function Map_build(m: Map[U, V], u: U, v: V): Map[U, V]
  
  function Map_equal(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_disjoint(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_union(m1: Map[U, V], m2: Map[U, V]): Map[U, V]
  
  axiom Map_card_non_neg {
    (forall m: Map[U, V] :: { Map_card(m) } 0 <= Map_card(m))
  }
  
  axiom Map_card_domain {
    (forall m: Map[U, V] :: { |Map_keys(m)| } |Map_keys(m)| == Map_card(m))
  }
  
  axiom Map_values_def {
    (forall m: Map[U, V], v: V :: { (v in Map_values(m)) } (v in Map_values(m)) == (exists u: U :: (u in Map_keys(m)) && v == Map_lookup(m, u)))
  }
  
  axiom Map_empty_1 {
    (forall u: U :: { (u in Map_keys(Map_empty())) } !((u in Map_keys(Map_empty()))))
  }
  
  axiom Map_empty_2 {
    (forall m: Map[U, V] :: { Map_card(m) } (Map_card(m) == 0) == (m == Map_empty()) && (Map_card(m) != 0 ==> (exists u: U :: (u in Map_keys(m)))))
  }
  
  axiom Map_build_1 {
    (forall m: Map[U, V], u1: U, u2: U, v: V :: { (u2 in Map_keys(Map_build(m, u1, v))) } (u2 == u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) && Map_lookup(Map_build(m, u1, v), u1) == v) && (u2 != u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) == (u2 in Map_keys(m)) && Map_lookup(Map_build(m, u1, v), u2) == Map_lookup(m, u2)))
  }
  
  axiom Map_build_2 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } (u in Map_keys(m)) ==> Map_card(Map_build(m, u, v)) == Map_card(m))
  }
  
  axiom Map_build_3 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } !((u in Map_keys(m))) ==> Map_card(Map_build(m, u, v)) == Map_card(m) + 1)
  }
  
  axiom Map_equality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } (u in Map_keys(m1)) == (u in Map_keys(m2))))
  }
  
  axiom Map_extensionality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) ==> m1 == m2)
  }
  
  axiom Map_disjoint_def {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_disjoint(m1, m2) } Map_disjoint(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } !((u in Map_keys(m1))) || !((u in Map_keys(m2)))))
  }
  
  axiom Map_union_1 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { (u in Map_keys(Map_union(m1, m2))) } { (u in (Map_keys(m1) union Map_keys(m2))) } Map_disjoint(m1, m2) ==> (u in Map_keys(Map_union(m1, m2))) == (u in (Map_keys(m1) union Map_keys(m2))))
  }
  
  axiom Map_union_2 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m1)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m1, u))
  }
  
  axiom Map_union_3 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m2)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m2, u))
  }
}

domain Tuple2[T0, T1] {
  
  function tuple2(t0: T0, t1: T1): Tuple2[T0, T1]
  
  function get0of2(p: Tuple2[T0, T1]): T0
  
  function get1of2(p: Tuple2[T0, T1]): T1
  
  axiom getter_over_tuple2 {
    (forall t0: T0, t1: T1 :: { tuple2(t0, t1) } get0of2(tuple2(t0, t1)) == t0 && get1of2(tuple2(t0, t1)) == t1)
  }
  
  axiom tuple2_over_getter {
    (forall p: Tuple2[T0, T1] :: { get0of2(p) } { get1of2(p) } tuple2(get0of2(p), get1of2(p)) == p)
  }
}

domain trigger_functions {
  
  function Counter_state_T(c: Ref, lvl: Int, x: Ref): Bool
  
  function CClient_INC_T($r: Ref, k: Int, p: Perm): Bool
  
  function CClient_TOTAL_T($r: Ref, n: Int): Bool
  
  function CClient_state_T(a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref): Bool
  
  axiom CClient_INC_T_bottom {
    (forall $r: Ref, k: Int, p: Perm :: { CClient_INC_T($r, k, p) } CClient_INC_T($r, k, p))
  }
  
  axiom CClient_TOTAL_T_bottom {
    (forall $r: Ref, n: Int :: { CClient_TOTAL_T($r, n) } CClient_TOTAL_T($r, n))
  }
}

domain interferenceReference_Domain {
  
  function Counter_interferenceReference_df($p0: Int, c: Ref, lvl: Int, x: Ref): Bool
  
  function CClient_interferenceReference_df($p0: Int, a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref): Bool
}

domain interferenceSet_Domain {
  
  function Counter_interferenceSet_df($p0: Int, c: Ref, lvl: Int, x: Ref): Set[Int]
  
  function CClient_interferenceSet_df($p0: Int, a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref): Set[Int]
}

domain atomicity_context_Domain {
  
  function Counter_atomicity_context_df(c: Ref, lvl: Int, x: Ref): Bool
  
  function CClient_atomicity_context_df(a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref): Bool
}

field $diamond: Int

field $stepFrom_int: Int

field $stepTo_int: Int

field $cell_$f: Int

function IntSet(): Set[Int]
  ensures (forall n: Int :: (n in result))


function NatSet(): Set[Int]
  ensures (forall n: Int :: 0 <= n == (n in result))


function Counter_atomicity_context_hf(c: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Counter_atomicity_context_fp(c, lvl, x), write)
  ensures [Counter_atomicity_context_df(c, lvl, x), true]


function Counter_interferenceSet_hf($p0: Int, c: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Counter_interferenceContext_fp(c, lvl, x), write)
  ensures [(forall $_m: Int :: { ($_m in result) } ($_m in result) ==> ($_m in Counter_interferenceSet_df($p0, c, lvl, x))), true]


function Counter_interferenceReference_hf($p0: Int, c: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter_interferenceContext_fp(c, lvl, x), write)
  ensures [Counter_interferenceReference_df($p0, c, lvl, x), true]


function Counter_sk_$_action_n(c: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter_sk_fp(), write)


function Counter_sk_$_action_m(c: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter_sk_fp(), write)


function Counter_state(c: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter(c, lvl, x), write)
  ensures [Counter_state_T(c, lvl, x), true]
{
  (unfolding acc(Counter(c, lvl, x), write) in x.$cell_$f)
}

function CClient_atomicity_context_hf(a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(CClient_atomicity_context_fp(a, alvl, c, lvl, x), write)
  ensures [CClient_atomicity_context_df(a, alvl, c, lvl, x), true]


function CClient_interferenceSet_hf($p0: Int, a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(CClient_interferenceContext_fp(a, alvl, c, lvl, x), write)
  ensures [(forall $_m: Int :: { ($_m in result) } ($_m in result) ==> ($_m in CClient_interferenceSet_df($p0, a, alvl, c, lvl, x))), true]


function CClient_interferenceReference_hf($p0: Int, a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref): Int
  requires acc(CClient_interferenceContext_fp(a, alvl, c, lvl, x), write)
  ensures [CClient_interferenceReference_df($p0, a, alvl, c, lvl, x), true]


function CClient_sk_$_action_n(a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref): Int
  requires acc(CClient_sk_fp(), write)


function CClient_sk_$_action_m(a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref): Int
  requires acc(CClient_sk_fp(), write)


function CClient_sk_$_action_k(a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref): Int
  requires acc(CClient_sk_fp(), write)


function CClient_sk_$_action_p(a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref): Perm
  requires acc(CClient_sk_fp(), write)


function CClient_state(a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref): Int
  requires acc(CClient(a, alvl, c, lvl, x), write)
  ensures [CClient_state_T(a, alvl, c, lvl, x), true]
{
  (unfolding acc(CClient(a, alvl, c, lvl, x), write) in Counter_state(c, lvl, x))
}

predicate Counter_G($r: Ref) 

predicate Counter_atomicity_context_fp(c: Ref, lvl: Int, x: Ref) 

predicate Counter_interferenceContext_fp(c: Ref, lvl: Int, x: Ref) 

predicate Counter_sk_fp() 

predicate Counter(c: Ref, lvl: Int, x: Ref) {
  acc(x.$cell_$f, write) && true
}

predicate CClient_INC($r: Ref, k: Int, p: Perm) 

predicate CClient_TOTAL($r: Ref, n: Int) 

predicate CClient_atomicity_context_fp(a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref) 

predicate CClient_interferenceContext_fp(a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref) 

predicate CClient_sk_fp() 

predicate CClient(a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref) {
  acc(Counter(c, lvl, x), write) && (lvl >= 0 && true) && lvl < alvl && acc(Counter_G(c), write) && (CClient_TOTAL_T(a, Counter_state(c, lvl, x)) && acc(CClient_TOTAL(a, Counter_state(c, lvl, x)), write))
}

method havoc_Bool() returns ($r: Bool)


method havoc_Int() returns ($r: Int)


method havoc_Ref() returns ($r: Ref)


method havoc_Perm() returns ($r: Perm)


method ___silicon_hack407_havoc_all_Counter()


method ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()


method ___silicon_hack407_havoc_all_CClient()


method ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()


method read(c: Ref, lvl: Int, x: Ref) returns (ret: Int)
  requires acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
  requires (Counter_state(c, lvl, x) in IntSet())
  ensures acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == old(Counter_state(c, lvl, x))) && acc(Counter_G(c), write)
  ensures ret == old(Counter_state(c, lvl, x))
{
  var $_levelVar_0: Int
  inhale $_levelVar_0 >= 0 && $_levelVar_0 > lvl
  assert $_levelVar_0 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  inhale Counter_interferenceSet_hf(0, c, lvl, x) == IntSet()
  inhale Counter_interferenceReference_hf(0, c, lvl, x) == old(Counter_state(c, lvl, x))
  inhale false
}

method incr(c: Ref, lvl: Int, x: Ref)
  requires acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
  requires (Counter_state(c, lvl, x) in IntSet())
  ensures acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == old(Counter_state(c, lvl, x)) + 1) && acc(Counter_G(c), write)
{
  var $_levelVar_1: Int
  inhale $_levelVar_1 >= 0 && $_levelVar_1 > lvl
  assert $_levelVar_1 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  inhale Counter_interferenceSet_hf(0, c, lvl, x) == IntSet()
  inhale Counter_interferenceReference_hf(0, c, lvl, x) == old(Counter_state(c, lvl, x))
  inhale false
}

method seq_client(c: Ref, lvl: Int, x: Ref, n: Int)
  requires 0 < n
  requires acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == 0) && acc(Counter_G(c), write)
  ensures acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == n) && acc(Counter_G(c), write)
{
  var m: Int
  var $_levelVar_2: Int
  var $_levelVar_3: Int
  inhale $_levelVar_2 >= 0 && $_levelVar_2 > lvl
  assert $_levelVar_2 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer0
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(1, $c, $lvl, $x)) } none < old[pre_infer0](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(1, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer0](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer0](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer0](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(1, $c, $lvl, $x) == old[pre_infer0](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(1, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer0](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(1, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer0](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer0](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer0](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(1, $a, $alvl, $c, $lvl, $x) == old[pre_infer0](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) END 
  
  
  
  // ------- assign BEGIN ------------
  
  
  m := n
  
  // ------- assign END --------------
  
  
  
  // ------- Stabilising regions Counter,CClient (after assign@32.3) BEGIN 
  
  
  label pre_stabilize0
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(2, $c, $lvl, $x)) } none < old[pre_stabilize0](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(2, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize0](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize0](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  ___silicon_hack407_havoc_all_Counter()
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize0](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(2, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize0](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(2, $c, $lvl, $x) == old[pre_stabilize0](Counter_state($c, $lvl, $x)))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(2, $a, $alvl, $c, $lvl, $x)) } none < old[pre_stabilize0](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(2, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_stabilize0](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize0](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  ___silicon_hack407_havoc_all_CClient()
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize0](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_interferenceSet_hf(2, $a, $alvl, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize0](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(2, $a, $alvl, $c, $lvl, $x) == old[pre_stabilize0](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Stabilising regions Counter,CClient (after assign@32.3) END 
  
  
  
  // ------- while BEGIN -------------
  
  
  label preWhile0
  while (0 < m)
    invariant 0 <= m
    invariant acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == n - m) && acc(Counter_G(c), write) 
  {
    inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
    
    // no init required
    
    
    
    // no init required
    
    
    inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
    inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
    inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_atomicity_context_fp($c, $lvl, $x), old[preWhile0](perm(Counter_atomicity_context_fp($c, $lvl, $x)))))
    inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_atomicity_context_df($c, $lvl, $x) } none < old[preWhile0](perm(Counter_atomicity_context_fp($c, $lvl, $x))) ==> Counter_atomicity_context_hf($c, $lvl, $x) == old[preWhile0](Counter_atomicity_context_hf($c, $lvl, $x)))
    inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x), old[preWhile0](perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)))))
    inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: { CClient_atomicity_context_df($a, $alvl, $c, $lvl, $x) } none < old[preWhile0](perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x))) ==> CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x) == old[preWhile0](CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x)))
    
    // ------- Inferring interference context Counter,CClient (infer context inside while) BEGIN 
    
    
    label pre_infer
    
    // Inferring interference all instances of region Counter
    
    ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(3, $c, $lvl, $x)) } none < old[pre_infer](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(3, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(3, $c, $lvl, $x) == old[pre_infer](Counter_state($c, $lvl, $x)))
    
    // Inferring interference all instances of region CClient
    
    ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
    exhale acc(CClient_sk_fp(), write)
    inhale acc(CClient_sk_fp(), write)
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(3, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(3, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(3, $a, $alvl, $c, $lvl, $x) == old[pre_infer](CClient_state($a, $alvl, $c, $lvl, $x)))
    
    // ------- Inferring interference context Counter,CClient (infer context inside while) END 
    
    
    
    // ------- call:incr BEGIN ---------
    
    
    assert (forall $_m: Int :: { ($_m in Counter_interferenceSet_hf(3, c, lvl, x)) } ($_m in Counter_interferenceSet_hf(3, c, lvl, x)) ==> ($_m in IntSet()))
    label pre_call0
    assert $_levelVar_2 >= 0 && $_levelVar_2 > lvl
    assert true
    exhale acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write) && (Counter_state(c, lvl, x) in IntSet())
    
    // ------- Stabilising regions Counter,CClient (before call:incr@38.5) BEGIN 
    
    
    label pre_stabilize
    
    // Stabilising all instances of region Counter
    
    ___silicon_hack407_havoc_all_Counter()
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
    
    // Stabilising all instances of region CClient
    
    ___silicon_hack407_havoc_all_CClient()
    exhale acc(CClient_sk_fp(), write)
    inhale acc(CClient_sk_fp(), write)
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && (CClient_state($a, $alvl, $c, $lvl, $x) == old[pre_stabilize](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == CClient_state($a, $alvl, $c, $lvl, $x) && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))
    
    // ------- Stabilising regions Counter,CClient (before call:incr@38.5) END 
    
    
    inhale acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == old[pre_call0](Counter_state(c, lvl, x)) + 1) && acc(Counter_G(c), write)
    
    // ------- call:incr END -----------
    
    
    
    // ------- Stabilising regions Counter,CClient (after call:incr@38.5) BEGIN 
    
    
    label pre_stabilize2
    
    // Stabilising all instances of region Counter
    
    ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(4, $c, $lvl, $x)) } none < old[pre_stabilize2](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(4, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize2](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize2](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
    ___silicon_hack407_havoc_all_Counter()
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize2](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(4, $c, $lvl, $x)))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize2](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(4, $c, $lvl, $x) == old[pre_stabilize2](Counter_state($c, $lvl, $x)))
    
    // Stabilising all instances of region CClient
    
    ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
    exhale acc(CClient_sk_fp(), write)
    inhale acc(CClient_sk_fp(), write)
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(4, $a, $alvl, $c, $lvl, $x)) } none < old[pre_stabilize2](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(4, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_stabilize2](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize2](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
    ___silicon_hack407_havoc_all_CClient()
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize2](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_interferenceSet_hf(4, $a, $alvl, $c, $lvl, $x)))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize2](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(4, $a, $alvl, $c, $lvl, $x) == old[pre_stabilize2](CClient_state($a, $alvl, $c, $lvl, $x)))
    
    // ------- Stabilising regions Counter,CClient (after call:incr@38.5) END 
    
    
    
    // ------- assign BEGIN ------------
    
    
    m := m - 1
    
    // ------- assign END --------------
    
    
    
    // ------- Stabilising regions Counter,CClient (after assign@39.5) BEGIN 
    
    
    label pre_stabilize3
    
    // Stabilising all instances of region Counter
    
    ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(5, $c, $lvl, $x)) } none < old[pre_stabilize3](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(5, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize3](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize3](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
    ___silicon_hack407_havoc_all_Counter()
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize3](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(5, $c, $lvl, $x)))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize3](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(5, $c, $lvl, $x) == old[pre_stabilize3](Counter_state($c, $lvl, $x)))
    
    // Stabilising all instances of region CClient
    
    ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
    exhale acc(CClient_sk_fp(), write)
    inhale acc(CClient_sk_fp(), write)
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(5, $a, $alvl, $c, $lvl, $x)) } none < old[pre_stabilize3](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(5, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_stabilize3](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize3](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
    ___silicon_hack407_havoc_all_CClient()
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize3](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_interferenceSet_hf(5, $a, $alvl, $c, $lvl, $x)))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize3](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(5, $a, $alvl, $c, $lvl, $x) == old[pre_stabilize3](CClient_state($a, $alvl, $c, $lvl, $x)))
    
    // ------- Stabilising regions Counter,CClient (after assign@39.5) END 
    
    
    assert $_levelVar_2 == $_levelVar_2
  }
  $_levelVar_3 := $_levelVar_2
  
  // ------- while END ---------------
  
  
  
  // ------- Stabilising regions Counter,CClient (after while@34.3) BEGIN 
  
  
  label pre_stabilize4
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(6, $c, $lvl, $x)) } none < old[pre_stabilize4](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(6, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize4](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize4](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  ___silicon_hack407_havoc_all_Counter()
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize4](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(6, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize4](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(6, $c, $lvl, $x) == old[pre_stabilize4](Counter_state($c, $lvl, $x)))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(6, $a, $alvl, $c, $lvl, $x)) } none < old[pre_stabilize4](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(6, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_stabilize4](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize4](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  ___silicon_hack407_havoc_all_CClient()
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize4](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_interferenceSet_hf(6, $a, $alvl, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize4](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(6, $a, $alvl, $c, $lvl, $x) == old[pre_stabilize4](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Stabilising regions Counter,CClient (after while@34.3) END 
  
  
}

method INC_split(a: Ref, k1: Int, k2: Int, p1: Perm, p2: Perm)
  requires CClient_INC_T(a, k1 + k2, p1 + p2) && acc(CClient_INC(a, k1 + k2, p1 + p2), write)
  requires none < p1 && none < p2
  ensures CClient_INC_T(a, k1, p1) && acc(CClient_INC(a, k1, p1), write) && (CClient_INC_T(a, k2, p2) && acc(CClient_INC(a, k2, p2), write))
{
  var $_levelVar_4: Int
  inhale $_levelVar_4 >= 0
  assert $_levelVar_4 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer2
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(7, $c, $lvl, $x)) } none < old[pre_infer2](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(7, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer2](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer2](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer2](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(7, $c, $lvl, $x) == old[pre_infer2](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(7, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer2](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(7, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer2](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer2](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer2](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(7, $a, $alvl, $c, $lvl, $x) == old[pre_infer2](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) END 
  
  
  inhale false
}

method INC_join(a: Ref, k1: Int, k2: Int, p1: Perm, p2: Perm)
  requires CClient_INC_T(a, k1, p1) && acc(CClient_INC(a, k1, p1), write) && (CClient_INC_T(a, k2, p2) && acc(CClient_INC(a, k2, p2), write))
  requires none < p1 && none < p2
  ensures CClient_INC_T(a, k1 + k2, p1 + p2) && acc(CClient_INC(a, k1 + k2, p1 + p2), write)
{
  var $_levelVar_5: Int
  inhale $_levelVar_5 >= 0
  assert $_levelVar_5 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer3
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(8, $c, $lvl, $x)) } none < old[pre_infer3](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(8, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer3](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer3](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer3](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(8, $c, $lvl, $x) == old[pre_infer3](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(8, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer3](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(8, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer3](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer3](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer3](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(8, $a, $alvl, $c, $lvl, $x) == old[pre_infer3](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) END 
  
  
  inhale false
}

method TOTAL_INC_equality(a: Ref, n: Int, k: Int)
  requires CClient_TOTAL_T(a, n) && acc(CClient_TOTAL(a, n), write) && (CClient_INC_T(a, k, write) && acc(CClient_INC(a, k, write), write))
  ensures CClient_TOTAL_T(a, n) && acc(CClient_TOTAL(a, n), write) && (CClient_INC_T(a, k, write) && acc(CClient_INC(a, k, write), write))
  ensures n == k
{
  var $_levelVar_6: Int
  inhale $_levelVar_6 >= 0
  assert $_levelVar_6 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer4
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(9, $c, $lvl, $x)) } none < old[pre_infer4](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(9, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer4](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer4](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer4](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(9, $c, $lvl, $x) == old[pre_infer4](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(9, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer4](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(9, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer4](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer4](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer4](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(9, $a, $alvl, $c, $lvl, $x) == old[pre_infer4](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) END 
  
  
  inhale false
}

method TOTAL_INC_update(a: Ref, n: Int, k0: Int, k1: Int, p: Perm)
  requires CClient_TOTAL_T(a, n + k0) && acc(CClient_TOTAL(a, n + k0), write) && (CClient_INC_T(a, k0, p) && acc(CClient_INC(a, k0, p), write))
  requires none < p
  ensures CClient_TOTAL_T(a, n + k1) && acc(CClient_TOTAL(a, n + k1), write) && (CClient_INC_T(a, k1, p) && acc(CClient_INC(a, k1, p), write))
{
  var $_levelVar_7: Int
  inhale $_levelVar_7 >= 0
  assert $_levelVar_7 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer5
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(10, $c, $lvl, $x)) } none < old[pre_infer5](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(10, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer5](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer5](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer5](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(10, $c, $lvl, $x) == old[pre_infer5](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(10, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer5](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(10, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer5](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer5](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer5](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(10, $a, $alvl, $c, $lvl, $x) == old[pre_infer5](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) END 
  
  
  inhale false
}

method TOTAL_INC_inc(a: Ref, n: Int, k: Int, p: Perm)
  requires CClient_TOTAL_T(a, n) && acc(CClient_TOTAL(a, n), write) && (CClient_INC_T(a, k, p) && acc(CClient_INC(a, k, p), write)) && 0 <= n - k
  requires none < p
  ensures CClient_TOTAL_T(a, n + 1) && acc(CClient_TOTAL(a, n + 1), write) && (CClient_INC_T(a, k + 1, p) && acc(CClient_INC(a, k + 1, p), write))
{
  var m: Int
  var $_levelVar_8: Int
  inhale $_levelVar_8 >= 0
  assert $_levelVar_8 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer6
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(11, $c, $lvl, $x)) } none < old[pre_infer6](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(11, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer6](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer6](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer6](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(11, $c, $lvl, $x) == old[pre_infer6](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(11, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer6](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(11, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer6](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer6](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer6](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(11, $a, $alvl, $c, $lvl, $x) == old[pre_infer6](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) END 
  
  
  
  // ------- assume BEGIN ------------
  
  
  inhale n == m + k
  
  // ------- assume END --------------
  
  
  
  // ------- apply BEGIN -------------
  
  
  TOTAL_INC_update(a, m, k, k + 1, p)
  
  // ------- apply END ---------------
  
  
}

method single_client(a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref, p: Perm) returns (n: Int)
  requires acc(CClient(a, alvl, c, lvl, x), write) && (alvl >= 0 && true) && (CClient_INC_T(a, 0, p) && acc(CClient_INC(a, 0, p), write)) && none < p && 0 <= CClient_state(a, alvl, c, lvl, x)
  ensures acc(CClient(a, alvl, c, lvl, x), write) && (alvl >= 0 && true) && (CClient_INC_T(a, n, p) && acc(CClient_INC(a, n, p), write)) && 0 <= n
{
  var i: Int
  var v: Int
  var $_levelVar_9: Int
  var $_levelVar_10: Int
  var $_levelVar_11: Int
  var $_levelVar_12: Int
  inhale $_levelVar_9 >= 0 && $_levelVar_9 > alvl
  assert $_levelVar_9 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer7
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(12, $c, $lvl, $x)) } none < old[pre_infer7](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(12, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer7](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer7](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer7](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(12, $c, $lvl, $x) == old[pre_infer7](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(12, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer7](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(12, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer7](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer7](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer7](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(12, $a, $alvl, $c, $lvl, $x) == old[pre_infer7](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) END 
  
  
  
  // ------- havoc BEGIN -------------
  
  
  n := havoc_Int()
  
  // ------- havoc END ---------------
  
  
  
  // ------- assume BEGIN ------------
  
  
  inhale 0 <= n
  
  // ------- assume END --------------
  
  
  
  // ------- assign BEGIN ------------
  
  
  i := 0
  
  // ------- assign END --------------
  
  
  
  // ------- Stabilising regions Counter,CClient (after assign@129.3) BEGIN 
  
  
  label pre_stabilize5
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(13, $c, $lvl, $x)) } none < old[pre_stabilize5](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(13, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize5](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize5](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  ___silicon_hack407_havoc_all_Counter()
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize5](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(13, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize5](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(13, $c, $lvl, $x) == old[pre_stabilize5](Counter_state($c, $lvl, $x)))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(13, $a, $alvl, $c, $lvl, $x)) } none < old[pre_stabilize5](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(13, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_stabilize5](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize5](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  ___silicon_hack407_havoc_all_CClient()
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize5](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_interferenceSet_hf(13, $a, $alvl, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize5](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(13, $a, $alvl, $c, $lvl, $x) == old[pre_stabilize5](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Stabilising regions Counter,CClient (after assign@129.3) END 
  
  
  
  // ------- while BEGIN -------------
  
  
  label preWhile
  while (i < n)
    invariant 0 <= i && i <= n
    invariant acc(CClient(a, alvl, c, lvl, x), write) && (alvl >= 0 && true) && i <= CClient_state(a, alvl, c, lvl, x)
    invariant CClient_INC_T(a, i, p) && acc(CClient_INC(a, i, p), write) 
  {
    inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
    
    // no init required
    
    
    
    // no init required
    
    
    inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
    inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
    inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_atomicity_context_fp($c, $lvl, $x), old[preWhile](perm(Counter_atomicity_context_fp($c, $lvl, $x)))))
    inhale (forall $c: Ref, $lvl: Int, $x: Ref :: { Counter_atomicity_context_df($c, $lvl, $x) } none < old[preWhile](perm(Counter_atomicity_context_fp($c, $lvl, $x))) ==> Counter_atomicity_context_hf($c, $lvl, $x) == old[preWhile](Counter_atomicity_context_hf($c, $lvl, $x)))
    inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x), old[preWhile](perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)))))
    inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: { CClient_atomicity_context_df($a, $alvl, $c, $lvl, $x) } none < old[preWhile](perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x))) ==> CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x) == old[preWhile](CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x)))
    
    // ------- Inferring interference context Counter,CClient (infer context inside while) BEGIN 
    
    
    label pre_infer8
    
    // Inferring interference all instances of region Counter
    
    ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(14, $c, $lvl, $x)) } none < old[pre_infer8](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(14, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer8](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer8](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer8](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(14, $c, $lvl, $x) == old[pre_infer8](Counter_state($c, $lvl, $x)))
    
    // Inferring interference all instances of region CClient
    
    ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
    exhale acc(CClient_sk_fp(), write)
    inhale acc(CClient_sk_fp(), write)
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(14, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer8](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(14, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer8](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer8](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer8](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(14, $a, $alvl, $c, $lvl, $x) == old[pre_infer8](CClient_state($a, $alvl, $c, $lvl, $x)))
    
    // ------- Inferring interference context Counter,CClient (infer context inside while) END 
    
    
    
    // ------- use-atomic BEGIN --------
    
    
    label pre_use_atomic0
    assert perm(CClient_atomicity_context_fp(a, alvl, c, lvl, x)) == none
    assert $_levelVar_9 > alvl
    $_levelVar_10 := alvl
    exhale CClient_INC_T(a, i, p) && acc(CClient_INC(a, i, p), write)
    
    // ------- Stabilising regions Counter (before use-atomic@136.5) BEGIN 
    
    
    label pre_stabilize7
    
    // Stabilising all instances of region Counter
    
    ___silicon_hack407_havoc_all_Counter()
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize7](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize7](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize7](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
    
    // ------- Stabilising regions Counter (before use-atomic@136.5) END 
    
    
    unfold acc(CClient(a, alvl, c, lvl, x), write)
    label transitionPre0
    ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
    inhale (forall $_m0: Int :: { ($_m0 in Counter_interferenceSet_df(14, c, lvl, x)) } ($_m0 in CClient_interferenceSet_hf(14, a, alvl, c, lvl, x)) == ($_m0 in Counter_interferenceSet_hf(14, c, lvl, x)))
    
    // havoc performed by other front resource
    
    
    inhale true ==> Counter_interferenceReference_hf(14, c, lvl, x) == old[transitionPre0](Counter_state(c, lvl, x))
    
    // ------- Stabilising regions CClient (before use-atomic@136.5) BEGIN 
    
    
    label pre_stabilize8
    
    // Stabilising all instances of region CClient
    
    ___silicon_hack407_havoc_all_CClient()
    exhale acc(CClient_sk_fp(), write)
    inhale acc(CClient_sk_fp(), write)
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize8](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && (CClient_state($a, $alvl, $c, $lvl, $x) == old[pre_stabilize8](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize8](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == CClient_state($a, $alvl, $c, $lvl, $x) && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))
    
    // ------- Stabilising regions CClient (before use-atomic@136.5) END 
    
    
    inhale CClient_INC_T(a, i, p) && acc(CClient_INC(a, i, p), write)
    
    // ------- assert BEGIN ------------
    
    
    assert acc(Counter(c, lvl, x), write) && (lvl >= 0 && true)
    v := Counter_state(c, lvl, x)
    
    // ------- assert END --------------
    
    
    
    // ------- call:incr BEGIN ---------
    
    
    assert (forall $_m: Int :: { ($_m in Counter_interferenceSet_hf(14, c, lvl, x)) } ($_m in Counter_interferenceSet_hf(14, c, lvl, x)) ==> ($_m in IntSet()))
    label pre_call
    assert $_levelVar_10 >= 0 && $_levelVar_10 > lvl
    assert true
    exhale acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write) && (Counter_state(c, lvl, x) in IntSet())
    
    // ------- Stabilising regions Counter,CClient (before call:incr@140.7) BEGIN 
    
    
    label pre_stabilize6
    
    // Stabilising all instances of region Counter
    
    ___silicon_hack407_havoc_all_Counter()
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize6](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize6](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize6](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
    
    // Stabilising all instances of region CClient
    
    ___silicon_hack407_havoc_all_CClient()
    exhale acc(CClient_sk_fp(), write)
    inhale acc(CClient_sk_fp(), write)
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize6](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && (CClient_state($a, $alvl, $c, $lvl, $x) == old[pre_stabilize6](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize6](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == CClient_state($a, $alvl, $c, $lvl, $x) && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))
    
    // ------- Stabilising regions Counter,CClient (before call:incr@140.7) END 
    
    
    inhale acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == old[pre_call](Counter_state(c, lvl, x)) + 1) && acc(Counter_G(c), write)
    
    // ------- call:incr END -----------
    
    
    
    // ------- assert BEGIN ------------
    
    
    assert acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == v + 1)
    
    // ------- assert END --------------
    
    
    
    // ------- assert BEGIN ------------
    
    
    assert CClient_TOTAL_T(a, v) && acc(CClient_TOTAL(a, v), write) && (CClient_INC_T(a, i, p) && acc(CClient_INC(a, i, p), write))
    
    // ------- assert END --------------
    
    
    
    // ------- apply BEGIN -------------
    
    
    TOTAL_INC_inc(a, v, i, p)
    
    // ------- apply END ---------------
    
    
    fold acc(CClient(a, alvl, c, lvl, x), write)
    assert old[pre_use_atomic0](CClient_state(a, alvl, c, lvl, x)) == CClient_state(a, alvl, c, lvl, x) || none < p && old[pre_use_atomic0](CClient_state(a, alvl, c, lvl, x)) < CClient_state(a, alvl, c, lvl, x) && (old[pre_use_atomic0](i) == i && old[pre_use_atomic0](p) == p)
    $_levelVar_11 := $_levelVar_9
    
    // ------- use-atomic END ----------
    
    
    
    // ------- Stabilising regions Counter,CClient (after use-atomic@136.5) BEGIN 
    
    
    label pre_stabilize9
    
    // Stabilising all instances of region Counter
    
    ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(15, $c, $lvl, $x)) } none < old[pre_stabilize9](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(15, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize9](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize9](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
    ___silicon_hack407_havoc_all_Counter()
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize9](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(15, $c, $lvl, $x)))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize9](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(15, $c, $lvl, $x) == old[pre_stabilize9](Counter_state($c, $lvl, $x)))
    
    // Stabilising all instances of region CClient
    
    ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
    exhale acc(CClient_sk_fp(), write)
    inhale acc(CClient_sk_fp(), write)
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(15, $a, $alvl, $c, $lvl, $x)) } none < old[pre_stabilize9](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(15, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_stabilize9](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize9](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
    ___silicon_hack407_havoc_all_CClient()
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize9](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_interferenceSet_hf(15, $a, $alvl, $c, $lvl, $x)))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize9](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(15, $a, $alvl, $c, $lvl, $x) == old[pre_stabilize9](CClient_state($a, $alvl, $c, $lvl, $x)))
    
    // ------- Stabilising regions Counter,CClient (after use-atomic@136.5) END 
    
    
    
    // ------- assign BEGIN ------------
    
    
    i := i + 1
    
    // ------- assign END --------------
    
    
    
    // ------- Stabilising regions Counter,CClient (after assign@146.5) BEGIN 
    
    
    label pre_stabilize10
    
    // Stabilising all instances of region Counter
    
    ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(16, $c, $lvl, $x)) } none < old[pre_stabilize10](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(16, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize10](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize10](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
    ___silicon_hack407_havoc_all_Counter()
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize10](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(16, $c, $lvl, $x)))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize10](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(16, $c, $lvl, $x) == old[pre_stabilize10](Counter_state($c, $lvl, $x)))
    
    // Stabilising all instances of region CClient
    
    ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
    exhale acc(CClient_sk_fp(), write)
    inhale acc(CClient_sk_fp(), write)
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(16, $a, $alvl, $c, $lvl, $x)) } none < old[pre_stabilize10](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(16, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_stabilize10](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize10](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
    ___silicon_hack407_havoc_all_CClient()
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize10](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_interferenceSet_hf(16, $a, $alvl, $c, $lvl, $x)))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize10](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(16, $a, $alvl, $c, $lvl, $x) == old[pre_stabilize10](CClient_state($a, $alvl, $c, $lvl, $x)))
    
    // ------- Stabilising regions Counter,CClient (after assign@146.5) END 
    
    
    assert $_levelVar_11 == $_levelVar_9
  }
  $_levelVar_12 := $_levelVar_9
  
  // ------- while END ---------------
  
  
  
  // ------- Stabilising regions Counter,CClient (after while@131.3) BEGIN 
  
  
  label pre_stabilize11
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(17, $c, $lvl, $x)) } none < old[pre_stabilize11](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(17, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize11](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize11](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  ___silicon_hack407_havoc_all_Counter()
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize11](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(17, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize11](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(17, $c, $lvl, $x) == old[pre_stabilize11](Counter_state($c, $lvl, $x)))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(17, $a, $alvl, $c, $lvl, $x)) } none < old[pre_stabilize11](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(17, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_stabilize11](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize11](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  ___silicon_hack407_havoc_all_CClient()
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize11](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_interferenceSet_hf(17, $a, $alvl, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize11](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(17, $a, $alvl, $c, $lvl, $x) == old[pre_stabilize11](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Stabilising regions Counter,CClient (after while@131.3) END 
  
  
}

method client()
{
  var a: Ref
  var c: Ref
  var alvl: Int
  var lvl: Int
  var x: Ref
  var k1: Int
  var k2: Int
  var n: Int
  var $_levelVar_13: Int
  inhale $_levelVar_13 == 2
  assert $_levelVar_13 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer9
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(18, $c, $lvl, $x)) } none < old[pre_infer9](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(18, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer9](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer9](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer9](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(18, $c, $lvl, $x) == old[pre_infer9](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(18, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer9](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(18, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer9](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer9](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer9](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(18, $a, $alvl, $c, $lvl, $x) == old[pre_infer9](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) END 
  
  
  
  // ------- assign BEGIN ------------
  
  
  lvl := 0
  
  // ------- assign END --------------
  
  
  
  // ------- Stabilising regions Counter,CClient (after assign@162.3) BEGIN 
  
  
  label pre_stabilize12
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(19, $c, $lvl, $x)) } none < old[pre_stabilize12](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(19, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize12](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize12](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  ___silicon_hack407_havoc_all_Counter()
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize12](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(19, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize12](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(19, $c, $lvl, $x) == old[pre_stabilize12](Counter_state($c, $lvl, $x)))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(19, $a, $alvl, $c, $lvl, $x)) } none < old[pre_stabilize12](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(19, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_stabilize12](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize12](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  ___silicon_hack407_havoc_all_CClient()
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize12](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_interferenceSet_hf(19, $a, $alvl, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize12](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(19, $a, $alvl, $c, $lvl, $x) == old[pre_stabilize12](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Stabilising regions Counter,CClient (after assign@162.3) END 
  
  
  
  // ------- assign BEGIN ------------
  
  
  alvl := 1
  
  // ------- assign END --------------
  
  
  
  // ------- Stabilising regions Counter,CClient (after assign@163.3) BEGIN 
  
  
  label pre_stabilize13
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(20, $c, $lvl, $x)) } none < old[pre_stabilize13](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(20, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize13](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize13](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  ___silicon_hack407_havoc_all_Counter()
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize13](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(20, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize13](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(20, $c, $lvl, $x) == old[pre_stabilize13](Counter_state($c, $lvl, $x)))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(20, $a, $alvl, $c, $lvl, $x)) } none < old[pre_stabilize13](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(20, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_stabilize13](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize13](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  ___silicon_hack407_havoc_all_CClient()
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize13](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_interferenceSet_hf(20, $a, $alvl, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize13](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(20, $a, $alvl, $c, $lvl, $x) == old[pre_stabilize13](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Stabilising regions Counter,CClient (after assign@163.3) END 
  
  
  
  // ------- new:cell BEGIN ----------
  
  
  x := new($cell_$f)
  x.$cell_$f := 0
  
  // ------- new:cell END ------------
  
  
  
  // ------- Stabilising regions Counter,CClient (after new:cell@166.3) BEGIN 
  
  
  label pre_stabilize14
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(21, $c, $lvl, $x)) } none < old[pre_stabilize14](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(21, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize14](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize14](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  ___silicon_hack407_havoc_all_Counter()
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize14](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(21, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize14](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(21, $c, $lvl, $x) == old[pre_stabilize14](Counter_state($c, $lvl, $x)))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(21, $a, $alvl, $c, $lvl, $x)) } none < old[pre_stabilize14](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(21, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_stabilize14](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize14](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  ___silicon_hack407_havoc_all_CClient()
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize14](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_interferenceSet_hf(21, $a, $alvl, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize14](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(21, $a, $alvl, $c, $lvl, $x) == old[pre_stabilize14](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Stabilising regions Counter,CClient (after new:cell@166.3) END 
  
  
  
  // ------- new:Counter BEGIN -------
  
  
  c := new()
  inhale acc(Counter_G(c), write)
  fold acc(Counter(c, lvl, x), write)
  
  // ------- new:Counter END ---------
  
  
  
  // ------- new:CClient BEGIN -------
  
  
  a := new()
  inhale acc(CClient_TOTAL(a, 0), write) && acc(CClient_INC(a, 0, write), write)
  fold acc(CClient(a, alvl, c, lvl, x), write)
  
  // ------- new:CClient END ---------
  
  
  
  // ------- assert BEGIN ------------
  
  
  assert acc(CClient(a, alvl, c, lvl, x), write) && (alvl >= 0 && true)
  
  // ------- assert END --------------
  
  
  
  // ------- inhale BEGIN ------------
  
  
  inhale acc(CClient(a, alvl, c, lvl, x), write) && (alvl >= 0 && true)
  
  // ------- inhale END --------------
  
  
  
  // ------- apply BEGIN -------------
  
  
  INC_split(a, 0, 0, 1 / 2, 1 / 2)
  
  // ------- apply END ---------------
  
  
  assert $_levelVar_13 >= 0 && $_levelVar_13 > alvl
  assert true
  exhale acc(CClient(a, alvl, c, lvl, x), write) && (alvl >= 0 && true) && (CClient_INC_T(a, 0, 1 / 2) && acc(CClient_INC(a, 0, 1 / 2), write)) && none < 1 / 2 && 0 <= CClient_state(a, alvl, c, lvl, x)
  assert $_levelVar_13 >= 0 && $_levelVar_13 > alvl
  assert true
  exhale acc(CClient(a, alvl, c, lvl, x), write) && (alvl >= 0 && true) && (CClient_INC_T(a, 0, 1 / 2) && acc(CClient_INC(a, 0, 1 / 2), write)) && none < 1 / 2 && 0 <= CClient_state(a, alvl, c, lvl, x)
  
  // ------- Stabilising regions Counter,CClient (within parallel@178.3) BEGIN 
  
  
  label pre_stabilize15
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize15](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize15](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize15](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize15](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && (CClient_state($a, $alvl, $c, $lvl, $x) == old[pre_stabilize15](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize15](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == CClient_state($a, $alvl, $c, $lvl, $x) && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))
  
  // ------- Stabilising regions Counter,CClient (within parallel@178.3) END 
  
  
  k1 := havoc_Int()
  inhale acc(CClient(a, alvl, c, lvl, x), write) && (alvl >= 0 && true) && (CClient_INC_T(a, k1, 1 / 2) && acc(CClient_INC(a, k1, 1 / 2), write)) && 0 <= k1
  k2 := havoc_Int()
  inhale acc(CClient(a, alvl, c, lvl, x), write) && (alvl >= 0 && true) && (CClient_INC_T(a, k2, 1 / 2) && acc(CClient_INC(a, k2, 1 / 2), write)) && 0 <= k2
  
  // ------- apply BEGIN -------------
  
  
  INC_join(a, k1, k2, 1 / 2, 1 / 2)
  
  // ------- apply END ---------------
  
  
  
  // ------- unfold BEGIN ------------
  
  
  assert alvl >= 0 && true
  unfold acc(CClient(a, alvl, c, lvl, x), write)
  
  // ------- Inferring interference context Counter,CClient (recompute interference context after unfold) BEGIN 
  
  
  label pre_infer10
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(22, $c, $lvl, $x)) } none < old[pre_infer10](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(22, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer10](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer10](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer10](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(22, $c, $lvl, $x) == old[pre_infer10](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(22, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer10](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(22, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer10](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer10](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer10](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(22, $a, $alvl, $c, $lvl, $x) == old[pre_infer10](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (recompute interference context after unfold) END 
  
  
  
  // ------- unfold END --------------
  
  
  
  // ------- assert BEGIN ------------
  
  
  assert acc(Counter(c, lvl, x), write) && (lvl >= 0 && true)
  n := Counter_state(c, lvl, x)
  
  // ------- assert END --------------
  
  
  
  // ------- apply BEGIN -------------
  
  
  TOTAL_INC_equality(a, n, k1 + k2)
  
  // ------- apply END ---------------
  
  
  
  // ------- fold BEGIN --------------
  
  
  fold acc(CClient(a, alvl, c, lvl, x), write)
  assert alvl >= 0 && CClient_state(a, alvl, c, lvl, x) == k1 + k2
  
  // ------- fold END ----------------
  
  
  
  // ------- unfold BEGIN ------------
  
  
  assert alvl >= 0 && CClient_state(a, alvl, c, lvl, x) == k1 + k2
  unfold acc(CClient(a, alvl, c, lvl, x), write)
  
  // ------- Inferring interference context Counter,CClient (recompute interference context after unfold) BEGIN 
  
  
  label pre_infer11
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(23, $c, $lvl, $x)) } none < old[pre_infer11](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(23, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer11](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer11](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer11](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(23, $c, $lvl, $x) == old[pre_infer11](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(23, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer11](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(23, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer11](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer11](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer11](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(23, $a, $alvl, $c, $lvl, $x) == old[pre_infer11](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (recompute interference context after unfold) END 
  
  
  
  // ------- unfold END --------------
  
  
  
  // ------- exhale BEGIN ------------
  
  
  exhale acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == k1 + k2)
  
  // ------- exhale END --------------
  
  
  
  // ------- Stabilising regions Counter,CClient (after seq-comp@178.3) BEGIN 
  
  
  label pre_stabilize16
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(24, $c, $lvl, $x)) } none < old[pre_stabilize16](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(24, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_stabilize16](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize16](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  ___silicon_hack407_havoc_all_Counter()
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize16](perm(Counter($c, $lvl, $x))) ==> (Counter_state($c, $lvl, $x) in Counter_interferenceSet_hf(24, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize16](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(24, $c, $lvl, $x) == old[pre_stabilize16](Counter_state($c, $lvl, $x)))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(24, $a, $alvl, $c, $lvl, $x)) } none < old[pre_stabilize16](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(24, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_stabilize16](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize16](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  ___silicon_hack407_havoc_all_CClient()
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize16](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_interferenceSet_hf(24, $a, $alvl, $c, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize16](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(24, $a, $alvl, $c, $lvl, $x) == old[pre_stabilize16](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Stabilising regions Counter,CClient (after seq-comp@178.3) END 
  
  
}

method $_Counter_interpretation_stability_check(c: Ref, lvl: Int, x: Ref)
{
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  inhale acc(x.$cell_$f, write) && true
  
  // ------- Stabilising regions Counter,CClient (check stability of region interpretation) BEGIN 
  
  
  label pre_stabilize17
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize17](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize17](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize17](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize17](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && (CClient_state($a, $alvl, $c, $lvl, $x) == old[pre_stabilize17](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize17](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == CClient_state($a, $alvl, $c, $lvl, $x) && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))
  
  // ------- Stabilising regions Counter,CClient (check stability of region interpretation) END 
  
  
  assert acc(x.$cell_$f, write) && true
}

method $_Counter_action_transitivity_check()
{
  var G: Bool
  var $_action_n_0_x: Int
  var $_action_m_0_x: Int
  var $_action_n_0_y: Int
  var $_action_m_0_y: Int
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState || $_action_n_0_x == aState && $_action_m_0_x == bState && true && G
  inhale bState == cState || $_action_n_0_y == bState && $_action_m_0_y == cState && true && G
  assert aState == cState || aState == aState && cState == cState && true && G
}

method $_CClient_interpretation_stability_check(a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref)
{
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  inhale acc(Counter(c, lvl, x), write) && (lvl >= 0 && true) && lvl < alvl && acc(Counter_G(c), write) && (CClient_TOTAL_T(a, Counter_state(c, lvl, x)) && acc(CClient_TOTAL(a, Counter_state(c, lvl, x)), write))
  
  // ------- Stabilising regions Counter,CClient (check stability of region interpretation) BEGIN 
  
  
  label pre_stabilize18
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize18](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize18](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize18](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize18](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && (CClient_state($a, $alvl, $c, $lvl, $x) == old[pre_stabilize18](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize18](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == CClient_state($a, $alvl, $c, $lvl, $x) && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))
  
  // ------- Stabilising regions Counter,CClient (check stability of region interpretation) END 
  
  
  assert acc(Counter(c, lvl, x), write) && (lvl >= 0 && true) && lvl < alvl && acc(Counter_G(c), write) && (CClient_TOTAL_T(a, Counter_state(c, lvl, x)) && acc(CClient_TOTAL(a, Counter_state(c, lvl, x)), write))
}

method $_CClient_action_transitivity_check()
{
  var INC: Set[Tuple2[Int, Perm]]
  var TOTAL: Set[Int]
  var $_action_n_0_x: Int
  var $_action_m_0_x: Int
  var $_action_k_0_x: Int
  var $_action_p_0_x: Perm
  var $_action_n_0_y: Int
  var $_action_m_0_y: Int
  var $_action_k_0_y: Int
  var $_action_p_0_y: Perm
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState || $_action_n_0_x == aState && $_action_m_0_x == bState && (none < $_action_p_0_x && $_action_n_0_x < $_action_m_0_x) && (tuple2($_action_k_0_x, $_action_p_0_x) in INC)
  inhale bState == cState || $_action_n_0_y == bState && $_action_m_0_y == cState && (none < $_action_p_0_y && $_action_n_0_y < $_action_m_0_y) && (tuple2($_action_k_0_y, $_action_p_0_y) in INC)
  assert aState == cState || (exists $_action_k_0_z: Int, $_action_p_0_z: Perm :: aState == aState && cState == cState && (none < $_action_p_0_z && aState < cState) && (tuple2($_action_k_0_z, $_action_p_0_z) in INC))
}

method $_read_condition_stability_precondition_check(c: Ref, lvl: Int, x: Ref, ret: Int)
  requires acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
{
  var $_levelVar_14: Int
  inhale $_levelVar_14 >= 0 && $_levelVar_14 > lvl
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  inhale Counter_interferenceSet_hf(24, c, lvl, x) == IntSet()
  inhale Counter_interferenceReference_hf(24, c, lvl, x) == old(Counter_state(c, lvl, x))
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) BEGIN 
  
  
  label pre_stabilize19
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize19](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize19](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize19](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize19](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && (CClient_state($a, $alvl, $c, $lvl, $x) == old[pre_stabilize19](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize19](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == CClient_state($a, $alvl, $c, $lvl, $x) && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) END 
  
  
  assert acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
}

method $_incr_condition_stability_precondition_check(c: Ref, lvl: Int, x: Ref)
  requires acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
{
  var $_levelVar_15: Int
  inhale $_levelVar_15 >= 0 && $_levelVar_15 > lvl
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  inhale Counter_interferenceSet_hf(24, c, lvl, x) == IntSet()
  inhale Counter_interferenceReference_hf(24, c, lvl, x) == old(Counter_state(c, lvl, x))
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) BEGIN 
  
  
  label pre_stabilize20
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize20](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize20](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize20](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize20](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && (CClient_state($a, $alvl, $c, $lvl, $x) == old[pre_stabilize20](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize20](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == CClient_state($a, $alvl, $c, $lvl, $x) && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) END 
  
  
  assert acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == Counter_state(c, lvl, x)) && acc(Counter_G(c), write)
}

method $_seq_client_condition_stability_precondition_check(c: Ref, lvl: Int, x: Ref, n: Int)
  requires 0 < n
  requires acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == 0) && acc(Counter_G(c), write)
{
  var $_levelVar_16: Int
  var m: Int
  inhale $_levelVar_16 >= 0 && $_levelVar_16 > lvl
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer12
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(25, $c, $lvl, $x)) } none < old[pre_infer12](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(25, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer12](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer12](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer12](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(25, $c, $lvl, $x) == old[pre_infer12](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(25, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer12](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(25, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer12](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer12](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer12](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(25, $a, $alvl, $c, $lvl, $x) == old[pre_infer12](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) BEGIN 
  
  
  label pre_stabilize21
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize21](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize21](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize21](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize21](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && (CClient_state($a, $alvl, $c, $lvl, $x) == old[pre_stabilize21](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize21](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == CClient_state($a, $alvl, $c, $lvl, $x) && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) END 
  
  
  assert 0 < n && (acc(Counter(c, lvl, x), write) && (lvl >= 0 && Counter_state(c, lvl, x) == 0) && acc(Counter_G(c), write))
}

method $_INC_split_condition_stability_precondition_check(a: Ref, k1: Int, k2: Int, p1: Perm, p2: Perm)
  requires CClient_INC_T(a, k1 + k2, p1 + p2) && acc(CClient_INC(a, k1 + k2, p1 + p2), write)
  requires none < p1 && none < p2
{
  var $_levelVar_17: Int
  inhale $_levelVar_17 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer13
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(26, $c, $lvl, $x)) } none < old[pre_infer13](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(26, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer13](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer13](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer13](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(26, $c, $lvl, $x) == old[pre_infer13](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(26, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer13](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(26, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer13](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer13](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer13](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(26, $a, $alvl, $c, $lvl, $x) == old[pre_infer13](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) BEGIN 
  
  
  label pre_stabilize22
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize22](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize22](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize22](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize22](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && (CClient_state($a, $alvl, $c, $lvl, $x) == old[pre_stabilize22](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize22](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == CClient_state($a, $alvl, $c, $lvl, $x) && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) END 
  
  
  assert CClient_INC_T(a, k1 + k2, p1 + p2) && acc(CClient_INC(a, k1 + k2, p1 + p2), write) && (none < p1 && none < p2)
}

method $_INC_join_condition_stability_precondition_check(a: Ref, k1: Int, k2: Int, p1: Perm, p2: Perm)
  requires CClient_INC_T(a, k1, p1) && acc(CClient_INC(a, k1, p1), write) && (CClient_INC_T(a, k2, p2) && acc(CClient_INC(a, k2, p2), write))
  requires none < p1 && none < p2
{
  var $_levelVar_18: Int
  inhale $_levelVar_18 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer14
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(27, $c, $lvl, $x)) } none < old[pre_infer14](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(27, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer14](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer14](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer14](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(27, $c, $lvl, $x) == old[pre_infer14](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(27, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer14](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(27, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer14](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer14](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer14](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(27, $a, $alvl, $c, $lvl, $x) == old[pre_infer14](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) BEGIN 
  
  
  label pre_stabilize23
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize23](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize23](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize23](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize23](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && (CClient_state($a, $alvl, $c, $lvl, $x) == old[pre_stabilize23](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize23](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == CClient_state($a, $alvl, $c, $lvl, $x) && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) END 
  
  
  assert CClient_INC_T(a, k1, p1) && acc(CClient_INC(a, k1, p1), write) && (CClient_INC_T(a, k2, p2) && acc(CClient_INC(a, k2, p2), write)) && (none < p1 && none < p2)
}

method $_TOTAL_INC_equality_condition_stability_precondition_check(a: Ref, n: Int, k: Int)
  requires CClient_TOTAL_T(a, n) && acc(CClient_TOTAL(a, n), write) && (CClient_INC_T(a, k, write) && acc(CClient_INC(a, k, write), write))
{
  var $_levelVar_19: Int
  inhale $_levelVar_19 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer15
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(28, $c, $lvl, $x)) } none < old[pre_infer15](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(28, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer15](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer15](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer15](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(28, $c, $lvl, $x) == old[pre_infer15](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(28, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer15](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(28, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer15](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer15](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer15](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(28, $a, $alvl, $c, $lvl, $x) == old[pre_infer15](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) BEGIN 
  
  
  label pre_stabilize24
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize24](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize24](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize24](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize24](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && (CClient_state($a, $alvl, $c, $lvl, $x) == old[pre_stabilize24](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize24](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == CClient_state($a, $alvl, $c, $lvl, $x) && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) END 
  
  
  assert CClient_TOTAL_T(a, n) && acc(CClient_TOTAL(a, n), write) && (CClient_INC_T(a, k, write) && acc(CClient_INC(a, k, write), write))
}

method $_TOTAL_INC_update_condition_stability_precondition_check(a: Ref, n: Int, k0: Int, k1: Int, p: Perm)
  requires CClient_TOTAL_T(a, n + k0) && acc(CClient_TOTAL(a, n + k0), write) && (CClient_INC_T(a, k0, p) && acc(CClient_INC(a, k0, p), write))
  requires none < p
{
  var $_levelVar_20: Int
  inhale $_levelVar_20 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer16
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(29, $c, $lvl, $x)) } none < old[pre_infer16](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(29, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer16](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer16](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer16](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(29, $c, $lvl, $x) == old[pre_infer16](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(29, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer16](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(29, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer16](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer16](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer16](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(29, $a, $alvl, $c, $lvl, $x) == old[pre_infer16](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) BEGIN 
  
  
  label pre_stabilize25
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize25](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize25](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize25](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize25](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && (CClient_state($a, $alvl, $c, $lvl, $x) == old[pre_stabilize25](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize25](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == CClient_state($a, $alvl, $c, $lvl, $x) && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) END 
  
  
  assert CClient_TOTAL_T(a, n + k0) && acc(CClient_TOTAL(a, n + k0), write) && (CClient_INC_T(a, k0, p) && acc(CClient_INC(a, k0, p), write)) && none < p
}

method $_TOTAL_INC_inc_condition_stability_precondition_check(a: Ref, n: Int, k: Int, p: Perm)
  requires CClient_TOTAL_T(a, n) && acc(CClient_TOTAL(a, n), write) && (CClient_INC_T(a, k, p) && acc(CClient_INC(a, k, p), write)) && 0 <= n - k
  requires none < p
{
  var $_levelVar_21: Int
  var m: Int
  inhale $_levelVar_21 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer17
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(30, $c, $lvl, $x)) } none < old[pre_infer17](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(30, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer17](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer17](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer17](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(30, $c, $lvl, $x) == old[pre_infer17](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(30, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer17](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(30, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer17](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer17](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer17](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(30, $a, $alvl, $c, $lvl, $x) == old[pre_infer17](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) BEGIN 
  
  
  label pre_stabilize26
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize26](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize26](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize26](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize26](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && (CClient_state($a, $alvl, $c, $lvl, $x) == old[pre_stabilize26](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize26](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == CClient_state($a, $alvl, $c, $lvl, $x) && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) END 
  
  
  assert CClient_TOTAL_T(a, n) && acc(CClient_TOTAL(a, n), write) && (CClient_INC_T(a, k, p) && acc(CClient_INC(a, k, p), write)) && 0 <= n - k && none < p
}

method $_single_client_condition_stability_precondition_check(a: Ref, alvl: Int, c: Ref, lvl: Int, x: Ref, p: Perm, n: Int)
  requires acc(CClient(a, alvl, c, lvl, x), write) && (alvl >= 0 && true) && (CClient_INC_T(a, 0, p) && acc(CClient_INC(a, 0, p), write)) && none < p && 0 <= CClient_state(a, alvl, c, lvl, x)
{
  var $_levelVar_22: Int
  var i: Int
  inhale $_levelVar_22 >= 0 && $_levelVar_22 > alvl
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer18
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(31, $c, $lvl, $x)) } none < old[pre_infer18](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(31, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer18](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer18](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer18](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(31, $c, $lvl, $x) == old[pre_infer18](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(31, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer18](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(31, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer18](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer18](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer18](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(31, $a, $alvl, $c, $lvl, $x) == old[pre_infer18](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) BEGIN 
  
  
  label pre_stabilize27
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize27](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize27](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize27](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize27](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && (CClient_state($a, $alvl, $c, $lvl, $x) == old[pre_stabilize27](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize27](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == CClient_state($a, $alvl, $c, $lvl, $x) && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) END 
  
  
  assert acc(CClient(a, alvl, c, lvl, x), write) && (alvl >= 0 && true) && (CClient_INC_T(a, 0, p) && acc(CClient_INC(a, 0, p), write)) && none < p && 0 <= CClient_state(a, alvl, c, lvl, x)
}

method $_client_condition_stability_precondition_check()
{
  var $_levelVar_23: Int
  var a: Ref
  var c: Ref
  var alvl: Int
  var lvl: Int
  var x: Ref
  var k1: Int
  var k2: Int
  inhale $_levelVar_23 == 2
  inhale acc(Counter_sk_fp(), write) && acc(CClient_sk_fp(), write)
  
  // no init required
  
  
  
  // no init required
  
  
  inhale (forall $c: Ref, $lvl: Int, $x: Ref :: acc(Counter_interferenceContext_fp($c, $lvl, $x), write))
  inhale (forall $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref :: acc(CClient_interferenceContext_fp($a, $alvl, $c, $lvl, $x), write))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer19
  
  // Inferring interference all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Counter_interferenceSet_df(32, $c, $lvl, $x)) } none < old[pre_infer19](perm(Counter($c, $lvl, $x))) ==> ($$_m in Counter_interferenceSet_hf(32, $c, $lvl, $x)) == ((none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> ($$_m in Counter_atomicity_context_hf($c, $lvl, $x))) && ($$_m == old[pre_infer19](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_infer19](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == $$_m && true && perm(Counter_G($c)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_infer19](perm(Counter($c, $lvl, $x))) ==> Counter_interferenceReference_hf(32, $c, $lvl, $x) == old[pre_infer19](Counter_state($c, $lvl, $x)))
  
  // Inferring interference all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient_interferenceContext_fp()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in CClient_interferenceSet_df(32, $a, $alvl, $c, $lvl, $x)) } none < old[pre_infer19](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> ($$_m in CClient_interferenceSet_hf(32, $a, $alvl, $c, $lvl, $x)) == ((none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> ($$_m in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && ($$_m == old[pre_infer19](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_infer19](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == $$_m && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_infer19](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> CClient_interferenceReference_hf(32, $a, $alvl, $c, $lvl, $x) == old[pre_infer19](CClient_state($a, $alvl, $c, $lvl, $x)))
  
  // ------- Inferring interference context Counter,CClient (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) BEGIN 
  
  
  label pre_stabilize28
  
  // Stabilising all instances of region Counter
  
  ___silicon_hack407_havoc_all_Counter()
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm $c: Ref, $lvl: Int, $x: Ref [Counter($c, $lvl, $x)] :: none < old[pre_stabilize28](perm(Counter($c, $lvl, $x))) ==> (none < perm($c.$diamond) && none < perm(Counter_atomicity_context_fp($c, $lvl, $x)) ==> (Counter_state($c, $lvl, $x) in Counter_atomicity_context_hf($c, $lvl, $x))) && (Counter_state($c, $lvl, $x) == old[pre_stabilize28](Counter_state($c, $lvl, $x)) || Counter_sk_$_action_n($c, $lvl, $x) == old[pre_stabilize28](Counter_state($c, $lvl, $x)) && Counter_sk_$_action_m($c, $lvl, $x) == Counter_state($c, $lvl, $x) && true && perm(Counter_G($c)) == none))
  
  // Stabilising all instances of region CClient
  
  ___silicon_hack407_havoc_all_CClient()
  exhale acc(CClient_sk_fp(), write)
  inhale acc(CClient_sk_fp(), write)
  inhale (forperm $a: Ref, $alvl: Int, $c: Ref, $lvl: Int, $x: Ref [CClient($a, $alvl, $c, $lvl, $x)] :: none < old[pre_stabilize28](perm(CClient($a, $alvl, $c, $lvl, $x))) ==> (none < perm($a.$diamond) && none < perm(CClient_atomicity_context_fp($a, $alvl, $c, $lvl, $x)) ==> (CClient_state($a, $alvl, $c, $lvl, $x) in CClient_atomicity_context_hf($a, $alvl, $c, $lvl, $x))) && (CClient_state($a, $alvl, $c, $lvl, $x) == old[pre_stabilize28](CClient_state($a, $alvl, $c, $lvl, $x)) || CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) == old[pre_stabilize28](CClient_state($a, $alvl, $c, $lvl, $x)) && CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x) == CClient_state($a, $alvl, $c, $lvl, $x) && (none < CClient_sk_$_action_p($a, $alvl, $c, $lvl, $x) && CClient_sk_$_action_n($a, $alvl, $c, $lvl, $x) < CClient_sk_$_action_m($a, $alvl, $c, $lvl, $x)) && true))
  
  // ------- Stabilising regions Counter,CClient (check stability of method condition) END 
  
  
  assert true
}