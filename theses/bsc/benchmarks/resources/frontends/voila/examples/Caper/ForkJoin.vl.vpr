domain Map[U, V] {
  
  function Map_keys(m: Map[U, V]): Set[U]
  
  function Map_card(m: Map[U, V]): Int
  
  function Map_lookup(m: Map[U, V], u: U): V
  
  function Map_values(m: Map[U, V]): Set[V]
  
  function Map_empty(): Map[U, V]
  
  function Map_build(m: Map[U, V], u: U, v: V): Map[U, V]
  
  function Map_equal(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_disjoint(m1: Map[U, V], m2: Map[U, V]): Bool
  
  function Map_union(m1: Map[U, V], m2: Map[U, V]): Map[U, V]
  
  axiom Map_card_non_neg {
    (forall m: Map[U, V] :: { Map_card(m) } 0 <= Map_card(m))
  }
  
  axiom Map_card_domain {
    (forall m: Map[U, V] :: { |Map_keys(m)| } |Map_keys(m)| == Map_card(m))
  }
  
  axiom Map_values_def {
    (forall m: Map[U, V], v: V :: { (v in Map_values(m)) } (v in Map_values(m)) == (exists u: U :: (u in Map_keys(m)) && v == Map_lookup(m, u)))
  }
  
  axiom Map_empty_1 {
    (forall u: U :: { (u in Map_keys(Map_empty())) } !((u in Map_keys(Map_empty()))))
  }
  
  axiom Map_empty_2 {
    (forall m: Map[U, V] :: { Map_card(m) } (Map_card(m) == 0) == (m == Map_empty()) && (Map_card(m) != 0 ==> (exists u: U :: (u in Map_keys(m)))))
  }
  
  axiom Map_build_1 {
    (forall m: Map[U, V], u1: U, u2: U, v: V :: { (u2 in Map_keys(Map_build(m, u1, v))) } (u2 == u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) && Map_lookup(Map_build(m, u1, v), u1) == v) && (u2 != u1 ==> (u2 in Map_keys(Map_build(m, u1, v))) == (u2 in Map_keys(m)) && Map_lookup(Map_build(m, u1, v), u2) == Map_lookup(m, u2)))
  }
  
  axiom Map_build_2 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } (u in Map_keys(m)) ==> Map_card(Map_build(m, u, v)) == Map_card(m))
  }
  
  axiom Map_build_3 {
    (forall m: Map[U, V], u: U, v: V :: { Map_card(Map_build(m, u, v)) } !((u in Map_keys(m))) ==> Map_card(Map_build(m, u, v)) == Map_card(m) + 1)
  }
  
  axiom Map_equality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } (u in Map_keys(m1)) == (u in Map_keys(m2))))
  }
  
  axiom Map_extensionality {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_equal(m1, m2) } Map_equal(m1, m2) ==> m1 == m2)
  }
  
  axiom Map_disjoint_def {
    (forall m1: Map[U, V], m2: Map[U, V] :: { Map_disjoint(m1, m2) } Map_disjoint(m1, m2) == (forall u: U :: { (u in Map_keys(m1)) } { (u in Map_keys(m2)) } !((u in Map_keys(m1))) || !((u in Map_keys(m2)))))
  }
  
  axiom Map_union_1 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { (u in Map_keys(Map_union(m1, m2))) } { (u in (Map_keys(m1) union Map_keys(m2))) } Map_disjoint(m1, m2) ==> (u in Map_keys(Map_union(m1, m2))) == (u in (Map_keys(m1) union Map_keys(m2))))
  }
  
  axiom Map_union_2 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m1)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m1, u))
  }
  
  axiom Map_union_3 {
    (forall m1: Map[U, V], m2: Map[U, V], u: U :: { Map_lookup(Map_union(m1, m2), u) } Map_disjoint(m1, m2) && (u in Map_keys(m2)) ==> Map_lookup(Map_union(m1, m2), u) == Map_lookup(m2, u))
  }
}

domain trigger_functions {
  
  function Join_state_T(r: Ref, lvl: Int, x: Ref): Bool
}

domain interferenceReference_Domain {
  
  function Join_interferenceReference_df($p0: Int, r: Ref, lvl: Int, x: Ref): Bool
}

domain interferenceSet_Domain {
  
  function Join_interferenceSet_df($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
}

domain atomicity_context_Domain {
  
  function Join_atomicity_context_df(r: Ref, lvl: Int, x: Ref): Bool
}

field $diamond: Int

field $stepFrom_int: Int

field $stepTo_int: Int

field $memcell_$f: Int

function IntSet(): Set[Int]
  ensures (forall n: Int :: (n in result))


function NatSet(): Set[Int]
  ensures (forall n: Int :: 0 <= n == (n in result))


function Join_atomicity_context_hf(r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Join_atomicity_context_fp(r, lvl, x), write)
  ensures [Join_atomicity_context_df(r, lvl, x), true]


function Join_interferenceSet_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Join_interferenceContext_fp(r, lvl, x), write)
  ensures [(forall $_m: Int :: { ($_m in result) } ($_m in result) ==> ($_m in Join_interferenceSet_df($p0, r, lvl, x))), true]


function Join_interferenceReference_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Int
  requires acc(Join_interferenceContext_fp(r, lvl, x), write)
  ensures [Join_interferenceReference_df($p0, r, lvl, x), true]


function Join_state(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Join(r, lvl, x), write)
  ensures [Join_state_T(r, lvl, x), true]
{
  (unfolding acc(Join(r, lvl, x), write) in x.$memcell_$f)
}

predicate Join_SET($r: Ref) 

predicate Join_atomicity_context_fp(r: Ref, lvl: Int, x: Ref) 

predicate Join_interferenceContext_fp(r: Ref, lvl: Int, x: Ref) 

predicate Join_sk_fp() 

predicate Join(r: Ref, lvl: Int, x: Ref) {
  acc(x.$memcell_$f, write) && true && (x.$memcell_$f == 0 || x.$memcell_$f == 1)
}

method havoc_Bool() returns ($r: Bool)


method havoc_Int() returns ($r: Int)


method havoc_Ref() returns ($r: Ref)


method ___silicon_hack407_havoc_all_Join()


method ___silicon_hack407_havoc_all_Join_interferenceContext_fp()


method set_to_one(r: Ref, lvl: Int, x: Ref)
  requires acc(Join(r, lvl, x), write) && (lvl >= 0 && Join_state(r, lvl, x) == 0) && acc(Join_SET(r), write)
  ensures acc(Join(r, lvl, x), write) && (lvl >= 0 && Join_state(r, lvl, x) == 1) && acc(Join_SET(r), write)
{
  var $_levelVar_0: Int
  var $_levelVar_1: Int
  var $_levelVar_2: Int
  inhale $_levelVar_0 >= 0 && $_levelVar_0 > lvl
  assert $_levelVar_0 >= 0
  inhale acc(Join_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Join_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context Join (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer0
  
  // Inferring interference all instances of region Join
  
  ___silicon_hack407_havoc_all_Join_interferenceContext_fp()
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Join_interferenceSet_df(1, $r, $lvl, $x)) } none < old[pre_infer0](perm(Join($r, $lvl, $x))) ==> ($$_m in Join_interferenceSet_hf(1, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in Join_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer0](Join_state($r, $lvl, $x)) || 0 == old[pre_infer0](Join_state($r, $lvl, $x)) && 1 == $$_m && true && perm(Join_SET($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_infer0](perm(Join($r, $lvl, $x))) ==> Join_interferenceReference_hf(1, $r, $lvl, $x) == old[pre_infer0](Join_state($r, $lvl, $x)))
  
  // ------- Inferring interference context Join (beginning of non atomic procedure) END 
  
  
  
  // ------- use-atomic BEGIN --------
  
  
  label pre_use_atomic0
  assert perm(Join_atomicity_context_fp(r, lvl, x)) == none
  assert $_levelVar_0 > lvl
  $_levelVar_1 := lvl
  exhale acc(Join_SET(r), write)
  
  // ------- Stabilising regions  (before use-atomic@21.3) BEGIN 
  
  
  label pre_stabilize0
  
  // ------- Stabilising regions  (before use-atomic@21.3) END 
  
  
  unfold acc(Join(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- Stabilising regions Join (before use-atomic@21.3) BEGIN 
  
  
  label pre_stabilize
  
  // Stabilising all instances of region Join
  
  ___silicon_hack407_havoc_all_Join()
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_stabilize](perm(Join($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==> (Join_state($r, $lvl, $x) in Join_atomicity_context_hf($r, $lvl, $x))) && (Join_state($r, $lvl, $x) == old[pre_stabilize](Join_state($r, $lvl, $x)) || 0 == old[pre_stabilize](Join_state($r, $lvl, $x)) && 1 == Join_state($r, $lvl, $x) && true && perm(Join_SET($r)) == none))
  
  // ------- Stabilising regions Join (before use-atomic@21.3) END 
  
  
  inhale acc(Join_SET(r), write)
  
  // ------- heap-write BEGIN --------
  
  
  x.$memcell_$f := 1
  
  // ------- heap-write END ----------
  
  
  fold acc(Join(r, lvl, x), write)
  assert old[pre_use_atomic0](Join_state(r, lvl, x)) == Join_state(r, lvl, x) || 0 == old[pre_use_atomic0](Join_state(r, lvl, x)) && 1 == Join_state(r, lvl, x)
  $_levelVar_2 := $_levelVar_0
  
  // ------- use-atomic END ----------
  
  
  
  // ------- Stabilising regions Join (after use-atomic@21.3) BEGIN 
  
  
  label pre_stabilize2
  
  // Stabilising all instances of region Join
  
  ___silicon_hack407_havoc_all_Join_interferenceContext_fp()
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Join_interferenceSet_df(2, $r, $lvl, $x)) } none < old[pre_stabilize2](perm(Join($r, $lvl, $x))) ==> ($$_m in Join_interferenceSet_hf(2, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in Join_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize2](Join_state($r, $lvl, $x)) || 0 == old[pre_stabilize2](Join_state($r, $lvl, $x)) && 1 == $$_m && true && perm(Join_SET($r)) == none))))
  ___silicon_hack407_havoc_all_Join()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_stabilize2](perm(Join($r, $lvl, $x))) ==> (Join_state($r, $lvl, $x) in Join_interferenceSet_hf(2, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_stabilize2](perm(Join($r, $lvl, $x))) ==> Join_interferenceReference_hf(2, $r, $lvl, $x) == old[pre_stabilize2](Join_state($r, $lvl, $x)))
  
  // ------- Stabilising regions Join (after use-atomic@21.3) END 
  
  
}

method wait(r: Ref, lvl: Int, x: Ref)
  requires acc(Join(r, lvl, x), write) && (lvl >= 0 && true)
  ensures acc(Join(r, lvl, x), write) && (lvl >= 0 && Join_state(r, lvl, x) == 1)
{
  var v: Int
  var $_levelVar_3: Int
  var $_levelVar_4: Int
  var $_levelVar_5: Int
  var $_levelVar_6: Int
  var $_levelVar_7: Int
  var $_levelVar_8: Int
  inhale $_levelVar_3 >= 0 && $_levelVar_3 > lvl
  assert $_levelVar_3 >= 0
  inhale acc(Join_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Join_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context Join (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer
  
  // Inferring interference all instances of region Join
  
  ___silicon_hack407_havoc_all_Join_interferenceContext_fp()
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Join_interferenceSet_df(3, $r, $lvl, $x)) } none < old[pre_infer](perm(Join($r, $lvl, $x))) ==> ($$_m in Join_interferenceSet_hf(3, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in Join_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer](Join_state($r, $lvl, $x)) || 0 == old[pre_infer](Join_state($r, $lvl, $x)) && 1 == $$_m && true && perm(Join_SET($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_infer](perm(Join($r, $lvl, $x))) ==> Join_interferenceReference_hf(3, $r, $lvl, $x) == old[pre_infer](Join_state($r, $lvl, $x)))
  
  // ------- Inferring interference context Join (beginning of non atomic procedure) END 
  
  
  
  // ------- open-region BEGIN -------
  
  
  label pre_open_region0
  assert $_levelVar_3 > lvl
  $_levelVar_4 := lvl
  unfold acc(Join(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  
  // ------- heap-read BEGIN ---------
  
  
  v := x.$memcell_$f
  
  // ------- heap-read END -----------
  
  
  fold acc(Join(r, lvl, x), write)
  assert Join_state(r, lvl, x) == old[pre_open_region0](Join_state(r, lvl, x))
  $_levelVar_5 := $_levelVar_3
  
  // ------- open-region END ---------
  
  
  
  // ------- Stabilising regions Join (after open-region@38.5) BEGIN 
  
  
  label pre_stabilize3
  
  // Stabilising all instances of region Join
  
  ___silicon_hack407_havoc_all_Join_interferenceContext_fp()
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Join_interferenceSet_df(4, $r, $lvl, $x)) } none < old[pre_stabilize3](perm(Join($r, $lvl, $x))) ==> ($$_m in Join_interferenceSet_hf(4, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in Join_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize3](Join_state($r, $lvl, $x)) || 0 == old[pre_stabilize3](Join_state($r, $lvl, $x)) && 1 == $$_m && true && perm(Join_SET($r)) == none))))
  ___silicon_hack407_havoc_all_Join()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_stabilize3](perm(Join($r, $lvl, $x))) ==> (Join_state($r, $lvl, $x) in Join_interferenceSet_hf(4, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_stabilize3](perm(Join($r, $lvl, $x))) ==> Join_interferenceReference_hf(4, $r, $lvl, $x) == old[pre_stabilize3](Join_state($r, $lvl, $x)))
  
  // ------- Stabilising regions Join (after open-region@38.5) END 
  
  
  
  // ------- while BEGIN -------------
  
  
  label preWhile0
  while (v == 0)
    invariant acc(Join(r, lvl, x), write) && (lvl >= 0 && true)
    invariant (v == 0 ? Join_state(r, lvl, x) >= 0 : Join_state(r, lvl, x) == 1) 
  {
    inhale acc(Join_sk_fp(), write)
    
    // no init required
    
    
    inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Join_interferenceContext_fp($r, $lvl, $x), write))
    inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Join_atomicity_context_fp($r, $lvl, $x), old[preWhile0](perm(Join_atomicity_context_fp($r, $lvl, $x)))))
    inhale (forall $r: Ref, $lvl: Int, $x: Ref :: { Join_atomicity_context_df($r, $lvl, $x) } none < old[preWhile0](perm(Join_atomicity_context_fp($r, $lvl, $x))) ==> Join_atomicity_context_hf($r, $lvl, $x) == old[preWhile0](Join_atomicity_context_hf($r, $lvl, $x)))
    
    // ------- Inferring interference context Join (infer context inside while) BEGIN 
    
    
    label pre_infer2
    
    // Inferring interference all instances of region Join
    
    ___silicon_hack407_havoc_all_Join_interferenceContext_fp()
    exhale acc(Join_sk_fp(), write)
    inhale acc(Join_sk_fp(), write)
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Join_interferenceSet_df(5, $r, $lvl, $x)) } none < old[pre_infer2](perm(Join($r, $lvl, $x))) ==> ($$_m in Join_interferenceSet_hf(5, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in Join_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer2](Join_state($r, $lvl, $x)) || 0 == old[pre_infer2](Join_state($r, $lvl, $x)) && 1 == $$_m && true && perm(Join_SET($r)) == none))))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_infer2](perm(Join($r, $lvl, $x))) ==> Join_interferenceReference_hf(5, $r, $lvl, $x) == old[pre_infer2](Join_state($r, $lvl, $x)))
    
    // ------- Inferring interference context Join (infer context inside while) END 
    
    
    
    // ------- open-region BEGIN -------
    
    
    label pre_open_region
    assert $_levelVar_5 > lvl
    $_levelVar_6 := lvl
    unfold acc(Join(r, lvl, x), write)
    
    // no interference context translation needed
    
    
    
    // ------- heap-read BEGIN ---------
    
    
    v := x.$memcell_$f
    
    // ------- heap-read END -----------
    
    
    fold acc(Join(r, lvl, x), write)
    assert Join_state(r, lvl, x) == old[pre_open_region](Join_state(r, lvl, x))
    $_levelVar_7 := $_levelVar_5
    
    // ------- open-region END ---------
    
    
    
    // ------- Stabilising regions Join (after open-region@38.5) BEGIN 
    
    
    label pre_stabilize4
    
    // Stabilising all instances of region Join
    
    ___silicon_hack407_havoc_all_Join_interferenceContext_fp()
    exhale acc(Join_sk_fp(), write)
    inhale acc(Join_sk_fp(), write)
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Join_interferenceSet_df(6, $r, $lvl, $x)) } none < old[pre_stabilize4](perm(Join($r, $lvl, $x))) ==> ($$_m in Join_interferenceSet_hf(6, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in Join_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize4](Join_state($r, $lvl, $x)) || 0 == old[pre_stabilize4](Join_state($r, $lvl, $x)) && 1 == $$_m && true && perm(Join_SET($r)) == none))))
    ___silicon_hack407_havoc_all_Join()
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_stabilize4](perm(Join($r, $lvl, $x))) ==> (Join_state($r, $lvl, $x) in Join_interferenceSet_hf(6, $r, $lvl, $x)))
    
    // havoc performed by other front resource
    
    
    inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_stabilize4](perm(Join($r, $lvl, $x))) ==> Join_interferenceReference_hf(6, $r, $lvl, $x) == old[pre_stabilize4](Join_state($r, $lvl, $x)))
    
    // ------- Stabilising regions Join (after open-region@38.5) END 
    
    
    assert $_levelVar_7 == $_levelVar_5
  }
  $_levelVar_8 := $_levelVar_5
  
  // ------- while END ---------------
  
  
  
  // ------- Stabilising regions Join (after while@34.3) BEGIN 
  
  
  label pre_stabilize5
  
  // Stabilising all instances of region Join
  
  ___silicon_hack407_havoc_all_Join_interferenceContext_fp()
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Join_interferenceSet_df(7, $r, $lvl, $x)) } none < old[pre_stabilize5](perm(Join($r, $lvl, $x))) ==> ($$_m in Join_interferenceSet_hf(7, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in Join_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_stabilize5](Join_state($r, $lvl, $x)) || 0 == old[pre_stabilize5](Join_state($r, $lvl, $x)) && 1 == $$_m && true && perm(Join_SET($r)) == none))))
  ___silicon_hack407_havoc_all_Join()
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_stabilize5](perm(Join($r, $lvl, $x))) ==> (Join_state($r, $lvl, $x) in Join_interferenceSet_hf(7, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_stabilize5](perm(Join($r, $lvl, $x))) ==> Join_interferenceReference_hf(7, $r, $lvl, $x) == old[pre_stabilize5](Join_state($r, $lvl, $x)))
  
  // ------- Stabilising regions Join (after while@34.3) END 
  
  
}

method $_Join_interpretation_stability_check(r: Ref, lvl: Int, x: Ref)
{
  inhale acc(Join_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Join_interferenceContext_fp($r, $lvl, $x), write))
  inhale acc(x.$memcell_$f, write) && true && (x.$memcell_$f == 0 || x.$memcell_$f == 1)
  
  // ------- Stabilising regions Join (check stability of region interpretation) BEGIN 
  
  
  label pre_stabilize6
  
  // Stabilising all instances of region Join
  
  ___silicon_hack407_havoc_all_Join()
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_stabilize6](perm(Join($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==> (Join_state($r, $lvl, $x) in Join_atomicity_context_hf($r, $lvl, $x))) && (Join_state($r, $lvl, $x) == old[pre_stabilize6](Join_state($r, $lvl, $x)) || 0 == old[pre_stabilize6](Join_state($r, $lvl, $x)) && 1 == Join_state($r, $lvl, $x) && true && perm(Join_SET($r)) == none))
  
  // ------- Stabilising regions Join (check stability of region interpretation) END 
  
  
  assert acc(x.$memcell_$f, write) && true && (x.$memcell_$f == 0 || x.$memcell_$f == 1)
}

method $_Join_action_transitivity_check()
{
  var SET: Bool
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState || 0 == aState && 1 == bState && true && SET
  inhale bState == cState || 0 == bState && 1 == cState && true && SET
  assert aState == cState || 0 == aState && 1 == cState && true && SET
}

method $_set_to_one_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref)
  requires acc(Join(r, lvl, x), write) && (lvl >= 0 && Join_state(r, lvl, x) == 0) && acc(Join_SET(r), write)
{
  var $_levelVar_9: Int
  inhale $_levelVar_9 >= 0 && $_levelVar_9 > lvl
  inhale acc(Join_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Join_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context Join (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer3
  
  // Inferring interference all instances of region Join
  
  ___silicon_hack407_havoc_all_Join_interferenceContext_fp()
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Join_interferenceSet_df(8, $r, $lvl, $x)) } none < old[pre_infer3](perm(Join($r, $lvl, $x))) ==> ($$_m in Join_interferenceSet_hf(8, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in Join_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer3](Join_state($r, $lvl, $x)) || 0 == old[pre_infer3](Join_state($r, $lvl, $x)) && 1 == $$_m && true && perm(Join_SET($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_infer3](perm(Join($r, $lvl, $x))) ==> Join_interferenceReference_hf(8, $r, $lvl, $x) == old[pre_infer3](Join_state($r, $lvl, $x)))
  
  // ------- Inferring interference context Join (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Join (check stability of method condition) BEGIN 
  
  
  label pre_stabilize7
  
  // Stabilising all instances of region Join
  
  ___silicon_hack407_havoc_all_Join()
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_stabilize7](perm(Join($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==> (Join_state($r, $lvl, $x) in Join_atomicity_context_hf($r, $lvl, $x))) && (Join_state($r, $lvl, $x) == old[pre_stabilize7](Join_state($r, $lvl, $x)) || 0 == old[pre_stabilize7](Join_state($r, $lvl, $x)) && 1 == Join_state($r, $lvl, $x) && true && perm(Join_SET($r)) == none))
  
  // ------- Stabilising regions Join (check stability of method condition) END 
  
  
  assert acc(Join(r, lvl, x), write) && (lvl >= 0 && Join_state(r, lvl, x) == 0) && acc(Join_SET(r), write)
}

method $_wait_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref)
  requires acc(Join(r, lvl, x), write) && (lvl >= 0 && true)
{
  var $_levelVar_10: Int
  var v: Int
  inhale $_levelVar_10 >= 0 && $_levelVar_10 > lvl
  inhale acc(Join_sk_fp(), write)
  
  // no init required
  
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref :: acc(Join_interferenceContext_fp($r, $lvl, $x), write))
  
  // ------- Inferring interference context Join (beginning of non atomic procedure) BEGIN 
  
  
  label pre_infer4
  
  // Inferring interference all instances of region Join
  
  ___silicon_hack407_havoc_all_Join_interferenceContext_fp()
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: (forall $$_m: Int :: { ($$_m in Join_interferenceSet_df(9, $r, $lvl, $x)) } none < old[pre_infer4](perm(Join($r, $lvl, $x))) ==> ($$_m in Join_interferenceSet_hf(9, $r, $lvl, $x)) == ((none < perm($r.$diamond) && none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==> ($$_m in Join_atomicity_context_hf($r, $lvl, $x))) && ($$_m == old[pre_infer4](Join_state($r, $lvl, $x)) || 0 == old[pre_infer4](Join_state($r, $lvl, $x)) && 1 == $$_m && true && perm(Join_SET($r)) == none))))
  
  // havoc performed by other front resource
  
  
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_infer4](perm(Join($r, $lvl, $x))) ==> Join_interferenceReference_hf(9, $r, $lvl, $x) == old[pre_infer4](Join_state($r, $lvl, $x)))
  
  // ------- Inferring interference context Join (beginning of non atomic procedure) END 
  
  
  
  // ------- Stabilising regions Join (check stability of method condition) BEGIN 
  
  
  label pre_stabilize8
  
  // Stabilising all instances of region Join
  
  ___silicon_hack407_havoc_all_Join()
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none < old[pre_stabilize8](perm(Join($r, $lvl, $x))) ==> (none < perm($r.$diamond) && none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==> (Join_state($r, $lvl, $x) in Join_atomicity_context_hf($r, $lvl, $x))) && (Join_state($r, $lvl, $x) == old[pre_stabilize8](Join_state($r, $lvl, $x)) || 0 == old[pre_stabilize8](Join_state($r, $lvl, $x)) && 1 == Join_state($r, $lvl, $x) && true && perm(Join_SET($r)) == none))
  
  // ------- Stabilising regions Join (check stability of method condition) END 
  
  
  assert acc(Join(r, lvl, x), write) && (lvl >= 0 && true)
}